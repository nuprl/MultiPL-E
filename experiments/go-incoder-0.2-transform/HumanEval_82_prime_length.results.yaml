language: go_test.go
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpxq2_sr_9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpxq2_sr_9_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := 2; i*j < length;\
    \ j++ {\n                if myString[i*j] == myString[j] {\n                 \
    \   primes[j] = false\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp0eh3ods5_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp0eh3ods5_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp0eh3ods5_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp0eh3ods5_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmp0eh3ods5_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp0eh3ods5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j <= length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_8gsu_8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_8gsu_8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_8gsu_8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_8gsu_8_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_8gsu_8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_8gsu_8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length/2] {\n \
    \               if myString[i] != myString[length/3] {\n                    if\
    \ myString[i] != myString[length/4] {\n                        if myString[i]\
    \ != myString[length/5] {\n                            if myString[i] != myString[length/6]\
    \ {\n                                if myString[i] != myString[length/7] {\n\
    \                                    if myString[i] != myString[length/8] {\n\
    \                                        if myString[i] != myString[length/9]\
    \ {\n                                            if myString[i] != myString[length/10]\
    \ {\n                                                if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1zhytglg_test.go:60:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInts []int\n    var myIntLen int\n    var myIntPrime\
    \ int\n    var myIntPrimeLen int\n    var myIntPrimePrime int\n    var myIntPrimePrimeLen\
    \ int\n    var myIntPrimePrimePrime int\n    var myIntPrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime int\n \
    \   var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime int\n  \
    \  var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime int\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePri\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3zh1vlmd_test.go:48:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 {\n        return true\n    }\n    if length\
    \ == 3 {\n        return true\n    }\n    if length == 4 {\n        return true\n\
    \    }\n    if length == 5 {\n        return true\n    }\n    if length == 6 {\n\
    \        return true\n    }\n    if length == 7 {\n        return true\n    }\n\
    \    if length == 8 {\n        return true\n    }\n    if length == 9 {\n    \
    \    return true\n    }\n    if length == 10 {\n        return true\n    }\n \
    \   if length == 11 {\n        return true\n    }\n    if length == 12 {\n   \
    \     return true\n    }\n    if length == 13 {\n        return true\n    }\n\
    \    if length == 14 {\n        return true\n    }\n    if length == 15 {\n  \
    \      return true\n    }\n    if length == 16 {\n        return true\n    }\n\
    \    if length == 17 {\n        return true\n    }\n    if length == 18 {\n  \
    \      return true\n    }\n    if length == 19 {\n        return true\n    }\n\
    \    if length == 20 {\n        return true\n    }\n    if length == 21 {\n  \
    \      return true\n    }\n    if length == 22 {\n        return true\n    }\n\
    \    if length == 23 {\n        return true\n    }\n    if length == 24 {\n  \
    \      return true\n    }\n    if length == 25 {\n        return true\n    }\n\
    \    if length == 26 {\n        return true\n    }\n    if length == 27 {\n  \
    \      return true\n    }\n    if length == 28 {\n        return true\n    }\n\
    \    if length == 29 {\n        return true\n    }\n    if length == 30 {\n  \
    \      return true\n    }\n    if length == 31 {\n        return true\n    }\n\
    \    if length == 32 {\n        return true\n    }\n    if length == 33 {\n  \
    \      return true\n    }\n    if length == 34 {\n        return true\n    }\n\
    \    if length == 35 {\n        return true\n    }\n    if length == 36 {\n  \
    \      return true\n    }\n    if length == 37 {\n        return true\n    }\n\
    \    if length == 38 {\n        return true\n    }\n    if length == 39 {\n  \
    \      return true\n    }\n    if length == 40 {\n        return true\n    }\n\
    \    if length == 41 {\n        return true\n    }\n    if length == 42 {\n  \
    \      return true\n    }\n    if length == 43 {\n        return true\n    }\n\
    \    if length == 44 {\n        return true\n    }\n    if length == 45 {\n  \
    \      return true\n    }\n    if length == 46 {\n        return true\n    }\n\
    \    if length == 47 {\n        return true\n    }\n    if length == 48 {\n  \
    \      return true\n    }\n    if \nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp312ip3f7_test.go:166:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 23 {\n  \
    \      return true\n    }\n    if length == 24 {\n        return true\n    }\n\
    \    if length == 25 {\n        return true\n    }\n    if length == 26 {\n  \
    \      return true\n    }\n    if length == 27 {\n        return true\n    }\n\
    \    if length == 28 {\n        return true\n    }\n    if length == 29 {\n  \
    \      return true\n    }\n    if length == 30 {\n        return true\n    }\n\
    \    if length == 31 {\n        return true\n    }\n    if length == 32 {\n  \
    \      return true\n    }\n    if length == 33 {\n        return true\n    }\n\
    \    if length == 34 {\n        return true\n    }\n    if length == 35 {\n  \
    \      return true\n    }\n    if length == 36 {\n        return true\n    }\n\
    \    if length == 37 {\n        return true\n    }\n    if length == 38 {\n  \
    \      return true\n    }\n    if length == 39 {\n        return true\n    }\n\
    \    if length == 40 {\n        return true\n    }\n    if length == 41 {\n  \
    \      return true\n    }\n    if length == 42 {\n        return true\n    }\n\
    \    if length == 43 {\n        return true\n    }\n    if length == 44 {\n  \
    \      return true\n    }\n    if length == 45 {\n        return true\n    }\n\
    \    if length == 46 {\n        return true\n    }\n    if length == 47 {\n  \
    \      return true\n    }\n    if length == 48 {\n        return true\n    }\n\
    \    if length == 49 {\n        return \nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb1q9sazs_test.go:164:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \              break\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpquqaftbl_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length/2] {\n \
    \               if myString[i] != myString[length/3] {\n                    if\
    \ myString[i] != myString[length/4] {\n                        if myString[i]\
    \ != myString[length/5] {\n                            if myString[i] != myString[length/6]\
    \ {\n                                if myString[i] != myString[length/7] {\n\
    \                                    if myString[i] != myString[length/8] {\n\
    \                                        if myString[i] != myString[length/9]\
    \ {\n                                            if myString[i] != myString[length/10]\
    \ {\n                                                if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1zhytglg_test.go:60:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2-i] {\n                if\
    \ myString[i] != myString[length-3*i] {\n                    if myString[i] !=\
    \ myString[length-4*i] {\n                        if myString[i] != myString[length-5*i]\
    \ {\n                            if myString[i] != myString[length-6*i] {\n  \
    \                              if myString[i] != myString[length-7*i] {\n    \
    \                                if myString[i] != myString[length-8*i] {\n  \
    \                                      if myString[i] != myString[length-9*i]\
    \ {\n                                            if myString[i] != myString[length-10*i]\
    \ {\n                                                if myString[i] != myString[length-11*i]\
    \ {\n                                                    if myString[i] != myString[length-12*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-13*i] {\n                                                  \
    \          if myString[i] != myString[length-14*i] {\n                       \
    \                                         if myString[i] != myString[length-15*i]\
    \ {\n                                                                    if myString[i]\
    \ != myString[length-16*i] {\n                                               \
    \                         if myString[i] != myString[length-17*i] {\n        \
    \                                                                    if myString[i]\
    \ != myString[length-18*i] {\n                                               \
    \                                 if myString[i] != myString[length-19*i] {\n\
    \                                                                            \
    \        if myString[i] != myString[length-20*i] {\n                         \
    \                                                               if myString[i]\
    \ != myString[length-21*i] {\n                                               \
    \                                             if myString[i] != myString[length-22*i]\
    \ {\n                                                                        \
    \                        if myString[i] != myString[length-23*i] {\n         \
    \                                                                            \
    \               if myString[i] != myString[length-24*i] {\n                  \
    \                                                                            \
    \          if myString[i] != myString[length-25*i] {\n                       \
    \                                                                            \
    \         if myString[i] != myString[length-26*i] {\n                        \
    \                                                                            \
    \            if myString[i] != myString[length-27*i] {\n                     \
    \                                                                            \
    \                   if myString[i] != myString[length-28*i] {\n              \
    \                                                                            \
    \                              if myString[i] != myString[length-29*i] {\n   \
    \                                                                            \
    \                                             if myString[i] != myString[length-30*i]\
    \ {\n                                                                        \
    \                                                                        if myString[i]\
    \ != myString[length-31*i] {\n                                               \
    \                                                                            \
    \         if myString[i] != myString[length\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpssq2_bgz_test.go:55:166: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var length int\n    for i := 0; i < len(myString); i++ {\n\
    \        length += 1\n        for j := 0; j < length; j++ {\n            if myString[j]\
    \ != myString[j] {\n                return false\n            }\n        }\n \
    \   }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmplcfsoz02_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmplcfsoz02_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmplcfsoz02_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmplcfsoz02_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmplcfsoz02_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmplcfsoz02_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    i := 2\n    for i < length {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o0tmdhr_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n          \
    \  prime = false\n            break\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i-1]\
    \ {\n                prime = false\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i * i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    i := 2\n    for i < length {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[length-i]\
    \ != myString[length-i-1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpv429870f_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpv429870f_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpv429870f_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpv429870f_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpv429870f_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpv429870f_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i != 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzws6ql52_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0uae4g9_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7dd2196_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpfagseofj_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpfagseofj_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpfagseofj_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpfagseofj_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpfagseofj_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfagseofj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpfagseofj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpfagseofj_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfagseofj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfagseofj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            primes[i] = 0\n        } else {\n          \
    \  primes[i] = 1\n        }\n    }\n    for i := 2; i < length; i++ {\n      \
    \  if primes[i] != 0 {\n            for j := 2; j < i; j++ {\n               \
    \ if primes[j]*primes[i] == i {\n                    return false\n          \
    \      }\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmpjys6gdqm_test.go:22\
    \ +0xed\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpjys6gdqm_test.go:57\
    \ +0x142\ntesting.tRunner(0xc0001164e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i != 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6houlqd_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInts []int\n    var myIntLen int\n    var myIntPrime\
    \ bool\n    var myIntPrimeLen int\n    var myIntPrimePrime bool\n    var myIntPrimePrimeLen\
    \ int\n    var myIntPrimePrimePrime bool\n    var myIntPrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n  \
    \  var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n\
    \    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ bool\n    var myIntPrimePrimePrime\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsuw_stcb_test.go:49:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var prime bool\n    var i int\n    var j int\n    var k\
    \ int\n    var l int\n    var m int\n\n    for i = 2; i < len(myString); i++ {\n\
    \        for j = i + 1; j < len(myString); j++ {\n            for k = j + 1; k\
    \ < len(myString); k++ {\n                for l = k + 1; l < len(myString); l++\
    \ {\n                    for m = l + 1; m < len(myString); m++ {\n           \
    \             if myString[i] == myString[j] && myString[i] == myString[k] && myString[i]\
    \ == myString[l] && myString[i] == myString[m] {\n                           \
    \ prime = true\n                        }\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptfwuzyjs_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptfwuzyjs_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptfwuzyjs_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptfwuzyjs_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmptfwuzyjs_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmptfwuzyjs_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-i-1] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-2*i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7dd2196_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            prime = false\n            break\n       \
    \ }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var prime bool\n    var length int\n    for i := 0; i <\
    \ len(myString); i++ {\n        length += 1\n        for j := 1; j < length; j++\
    \ {\n            if myString[i] == myString[j] {\n                prime = false\n\
    \                break\n            }\n        }\n        if prime {\n       \
    \     break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp5d240g9s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5d240g9s_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp5d240g9s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5d240g9s_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp5d240g9s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5d240g9s_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp5d240g9s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp5d240g9s_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp5d240g9s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp5d240g9s_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for i := 2; i < length;\
    \ i++ {\n        if myString[i] != myString[i/2] {\n            return false\n\
    \        }\n    }\n    for _, prime := range primes {\n        if length%prime\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp1t5zt8sq_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp1t5zt8sq_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp1t5zt8sq_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp1t5zt8sq_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp1t5zt8sq_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp1t5zt8sq_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp1t5zt8sq_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp1t5zt8sq_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp1t5zt8sq_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp1t5zt8sq_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7dd2196_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] == myString[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2d6eed06_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp2d6eed06_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp2d6eed06_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp2d6eed06_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp2d6eed06_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp2d6eed06_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpkujsuhwr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkujsuhwr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkujsuhwr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkujsuhwr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpkujsuhwr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpkujsuhwr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpkujsuhwr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkujsuhwr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpkujsuhwr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkujsuhwr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i] {\n \
    \               prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i < length; i++ {\n        if myString[i] != myString[i-1] {\n\
    \            if myString[i] != myString[i/2] {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpa332szuh_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpa332szuh_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length)\n\
    \    primes[0] = true\n    for i := 1; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 1; j < i; j++ {\n                if myString[j] % i\
    \ == 0 {\n                    primes[j] = false\n                    break\n \
    \               }\n            }\n        }\n    }\n    return primes[length-1]\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoawqakze_test.go:26:20: invalid operation: myString[j] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var primes []int\n    var i int\n    var j int\n    var\
    \ k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p\
    \ int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n\
    \    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n \
    \   var a int\n    var b int\n    var c int\n    var d int\n    var e int\n  \
    \  var f int\n    var g int\n    var h int\n    var i int\n    var j int\n   \
    \ var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var\
    \ p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u\
    \ int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n\
    \    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n \
    \   var f int\n    var g int\n    var h int\n    var i int\n    var j int\n  \
    \  var k int\n    var l int\n    var m int\n    var n int\n    var o int\n   \
    \ var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var\
    \ u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z\
    \ int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n\
    \    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n \
    \   var k int\n    var l int\n    var m int\n    var n int\n    var o int\n  \
    \  var p int\n    var q int\n    var r int\n    var s int\n    var t int\n   \
    \ var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var\
    \ z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e\
    \ int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var\
    \ e \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjgafobyb_test.go:147:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := make([]int, length)\n    for i := 0; i < length;\
    \ i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length; i++ {\n   \
    \     if primes[i] == 0 {\n            for j := i * i; j < length; j += i {\n\
    \                primes[j] = 0\n            }\n        }\n    }\n    for i :=\
    \ 0; i < length; i++ {\n        if primes[i] == 1 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpp62yw7fk_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpp62yw7fk_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpp62yw7fk_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2] {\n                if myString[i]\
    \ != myString[length/3] {\n                    if myString[i] != myString[length/4]\
    \ {\n                        if myString[i] != myString[length/5] {\n        \
    \                    if myString[i] != myString[length/6] {\n                \
    \                if myString[i] != myString[length/7] {\n                    \
    \                if myString[i] != myString[length/8] {\n                    \
    \                    if myString[i] != myString[length/9] {\n                \
    \                            if myString[i] != myString[length/10] {\n       \
    \                                         if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString[i] != myString[\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz0p78ufl_test.go:59:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-2*i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2-i] {\n                if\
    \ myString[i] != myString[length-3*i] {\n                    prime = false\n \
    \               }\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpmzut7r6f_test.go:26\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpmzut7r6f_test.go:42\
    \ +0xaa6\ntesting.tRunner(0xc0001924e0, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpiwhdutf1_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpiwhdutf1_test.go:51\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp5wiw2dwt_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp5wiw2dwt_test.go:39\
    \ +0x83f\ntesting.tRunner(0xc000103520, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i * i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    \n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length/2] {\n\
    \                if myString[i] != myString[length/2-1] {\n                  \
    \  if myString[i] != myString[length/3] {\n                        if myString[i]\
    \ != myString[length/3-1] {\n                            if myString[i] != myString[length/4]\
    \ {\n                                if myString[i] != myString[length/4-1] {\n\
    \                                    if myString[i] != myString[length/5] {\n\
    \                                        if myString[i] != myString[length/5-1]\
    \ {\n                                            if myString[i] != myString[length/6]\
    \ {\n                                                if myString[i] != myString[length/6-1]\
    \ {\n                                                    if myString[i] != myString[length/7]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/7-1] {\n                                                   \
    \         if myString[i] != myString[length/8] {\n                           \
    \                                     if myString[i] != myString[length/8-1] {\n\
    \                                                                    if myString[i]\
    \ != myString[length/9] {\n                                                  \
    \                      if myString[i] != myString[length/9-1] {\n            \
    \                                                                if myString[i]\
    \ != myString[length/10] {\n                                                if\
    \ myString[i] != myString[length/10-1] {\n                                   \
    \                 if myString[i] != myString[length/11] {\n                  \
    \                                      if myString[i] != myString[length/11-1]\
    \ {\n                                                            if myString[i]\
    \ != myString[length/12] {\n                                                 \
    \               if myString[i] != myString[length/12-1] {\n                  \
    \                                                  if myString[i] != myString[length/13]\
    \ {\n                                                                        if\
    \ myString[i] != myString[length/13-1] {\n                                   \
    \         if myString[i] != myString[length/14] {\n                          \
    \                      if myString[i] != myString[length/14-1] {\n           \
    \                                         if myString[i] != myString[length/15]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/15-1] {\n                                                  \
    \          if myString[i] != myString[length/16] {\n                         \
    \                                       if myString[i] != myString[length/16-1]\
    \ {\n                                                                    if myString[i]\
    \ != myString[length/17] {\n                                                 \
    \                       if myString[i] != myString[length/17-1] {\n          \
    \                                  if myString[i] != myString[length/18\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3u1fcle2_test.go:58:81: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    i := 2\n    for i <= length {\n        if myString[i] != myString[i/2]\
    \ {\n            prime = false\n            break\n        }\n        i++\n  \
    \  }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmphanrcvfd_test.go:25\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmphanrcvfd_test.go:50\
    \ +0x225\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i <= length/2; i++ {\n        if length%i ==\
    \ 0 {\n            prime = false\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpoumb_ddb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpoumb_ddb_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpoumb_ddb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[length/2-i]\
    \ == myString[length/2+i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range\
    \ [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpc3hj1gi7_test.go:25\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpc3hj1gi7_test.go:42\
    \ +0x72c\ntesting.tRunner(0xc000192680, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            primes[i] = 0\n        } else {\n          \
    \  primes[i] = primes[i-1] + 1\n        }\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp_p24jc9n_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp_p24jc9n_test.go:53\
    \ +0x4af\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInt int\n    var myBool bool\n    for myInt = 1; myInt\
    \ <= myString.Length; myInt++ {\n        if myString.Substring(myInt, 1) == myString.Substring(0,\
    \ myInt) {\n            myBool = true\n            break\n        }\n    }\n \
    \   return myBool\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8eo4d_ix_test.go:22:38: myString.Length undefined (type string has no
    field or method Length)

    /tmp/tmp8eo4d_ix_test.go:23:21: myString.Substring undefined (type string has
    no field or method Substring)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i] {\n \
    \               prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/i+1] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpff1h7_g1_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpff1h7_g1_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpff1h7_g1_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpff1h7_g1_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpff1h7_g1_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpff1h7_g1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpff1h7_g1_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpff1h7_g1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpff1h7_g1_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpiwhdutf1_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpiwhdutf1_test.go:51\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i]\
    \ != myString[length-i] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i] {\n\
    \                prime = false\n                break\n            }\n       \
    \ }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpjvr17n94_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpjvr17n94_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpjvr17n94_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpjvr17n94_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpjvr17n94_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpjvr17n94_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpjvr17n94_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpjvr17n94_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpjvr17n94_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpjvr17n94_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-i-1] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i != 0 {\n              \
    \  prime = false\n                break\n            }\n        }\n    }\n   \
    \ return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsgp1_br0_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 100 {\n \
    \       return true\n    }\n    if length == 200 {\n        return true\n    }\n\
    \    if length == 300 {\n        return true\n    }\n    if length == 400 {\n\
    \        return true\n    }\n    if length == 500 {\n        return true\n   \
    \ }\n    if length == 600 {\n        return true\n    }\n    if length == 700\
    \ {\n        return true\n    }\n    if length == 800 {\n        return true\n\
    \    }\n    if length == 900 {\n        return true\n    }\n    if length == 1000\
    \ {\n        return true\n    }\n    if length == 10000 {\n        return true\n\
    \    }\n    if length == 20000 {\n        return true\n    }\n    if length ==\
    \ 30000 {\n        return true\n    }\n    if length == 40000 {\n        return\
    \ true\n    }\n    if length == 50000 {\n        return true\n    }\n    if length\
    \ == 60000 {\n        return true\n    }\n    if length == 70000 {\n        return\
    \ true\n    }\n    if length == 80000 {\n        return true\n    }\n    if length\
    \ == 90000 {\n        return true\n    }\n    if length == 100000 {\n        return\
    \ true\n    }\n    if length == 200000 {\n        return true\n    }\n    if length\
    \ == 300000 {\n        return true\n    }\n    if length == 400000 {\n       \
    \ return true\n    }\n    if length == 500000 {\n        return true\n    }\n\
    \    if length == 600000 {\n        return true\n    }\n    if length == 700000\
    \ {\n        return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoez62mpr_test.go:161:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i] {\n \
    \               prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] > 'z' {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpsp3gtma1_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpsp3gtma1_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpsp3gtma1_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpsp3gtma1_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpsp3gtma1_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpsp3gtma1_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] % i == 0 {\n                prime = false\n           \
    \     break\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9qe3ai7_test.go:24:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var prime bool\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] > 0 && myString[i] < len(myString)-1 {\n            if\
    \ myString[i] == myString[i+1] {\n                prime = true\n            }\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8t33837a_test.go:22:45: invalid operation: myString[i] < len(myString)
    - 1 (mismatched types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    \n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n     \
    \       prime = false\n            break\n        }\n    }\n    \n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpqm294mz2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpqm294mz2_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-i-1] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    i := 2\n    for i < length {\n        if myString[i] !=\
    \ myString[length] {\n            prime = false\n            break\n        }\n\
    \        i++\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpzczpck96_test.go:25\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpzczpck96_test.go:41\
    \ +0x1b\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length/2+i] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp0bb31t9e_test.go:25\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp0bb31t9e_test.go:52\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInts []int\n    var myIntLen int\n    var myIntPrime\
    \ bool\n    var myIntPrimeLen int\n    var myIntPrimePrime bool\n    var myIntPrimePrimeLen\
    \ int\n    var myIntPrimePrimePrime bool\n    var myIntPrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n  \
    \  var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime bool\n\
    \    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ bool\n    var myIntPrimePrimePrime\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsuw_stcb_test.go:49:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[j] =\
    \ false\n            }\n        }\n    }\n    for i := 2; i < length; i++ {\n\
    \        if primes[i] {\n            if myString[i] != myString[i/2] {\n     \
    \           return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmpex_to6e6_test.go:22\
    \ +0x105\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpex_to6e6_test.go:55\
    \ +0x142\ntesting.tRunner(0xc0001a0340, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i * i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpwu4f3mc5_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpwu4f3mc5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 100 {\n \
    \       return true\n    }\n    if length == 200 {\n        return true\n    }\n\
    \    if length == 300 {\n        return true\n    }\n    if length == 400 {\n\
    \        return true\n    }\n    if length == 500 {\n        return true\n   \
    \ }\n    if length == 600 {\n        return true\n    }\n    if length == 700\
    \ {\n        return true\n    }\n    if length == 800 {\n        return true\n\
    \    }\n    if length == 900 {\n        return true\n    }\n    if length == 1000\
    \ {\n        return true\n    }\n    if length == 10000 {\n        return true\n\
    \    }\n    if length == 20000 {\n        return true\n    }\n    if length ==\
    \ 30000 {\n        return true\n    }\n    if length == 40000 {\n        return\
    \ true\n    }\n    if length == 50000 {\n        return true\n    }\n    if length\
    \ == 60000 {\n        return true\n    }\n    if length == 70000 {\n        return\
    \ true\n    }\n    if length == 80000 {\n        return true\n    }\n    if length\
    \ == 90000 {\n        return true\n    }\n    if length == 100000 {\n        return\
    \ true\n    }\n    if length == 200000 {\n        return true\n    }\n    if length\
    \ == 300000 {\n        return true\n    }\n    if length == 400000 {\n       \
    \ return true\n    }\n    if length == 500000 {\n        return true\n    }\n\
    \    if length == 600000 {\n        return true\n    }\n    if length == 700000\
    \ {\n        return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoez62mpr_test.go:161:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o0tmdhr_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpsmc5umd8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpsmc5umd8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpsmc5umd8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpsmc5umd8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpsmc5umd8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpsmc5umd8_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpsmc5umd8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpsmc5umd8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpsmc5umd8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpsmc5umd8_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    \n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7v6u7m7v_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7v6u7m7v_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7v6u7m7v_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp7v6u7m7v_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp7v6u7m7v_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp7v6u7m7v_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp7v6u7m7v_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7v6u7m7v_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7v6u7m7v_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7v6u7m7v_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLength := len(primes)\n\
    \    for i := 0; i < primesLength; i++ {\n        if length%primes[i] == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9dxalaw5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9dxalaw5_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9dxalaw5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp9dxalaw5_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9dxalaw5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9dxalaw5_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp9dxalaw5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp9dxalaw5_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp9dxalaw5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9dxalaw5_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n          \
    \  prime = false\n            break\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp_qbg7f7l_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp_qbg7f7l_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_qbg7f7l_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp_qbg7f7l_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp_qbg7f7l_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp_qbg7f7l_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp_qbg7f7l_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-i-1] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpro0_5ism_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpro0_5ism_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n    length := len(myString)\n\
    \    primes := make([]int, length)\n    for i := 0; i < length; i++ {\n      \
    \  primes[i] = 1\n    }\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ == 0 {\n            for j := 0; j < i; j++ {\n                if myString[j]\
    \ != \"a\" && myString[j] != \"e\" && myString[j] != \"i\" && myString[j] != \"\
    o\" && myString[j] != \"u\" {\n                    primes[i] = 0\n           \
    \         break\n                }\n            }\n        }\n    }\n    if primes[length-1]\
    \ == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnam_622d_test.go:29:35: invalid operation: myString[j] != "a" (mismatched
    types byte and untyped string)

    /tmp/tmpnam_622d_test.go:29:57: invalid operation: myString[j] != "e" (mismatched
    types byte and untyped string)

    /tmp/tmpnam_622d_test.go:29:79: invalid operation: myString[j] != "i" (mismatched
    types byte and untyped string)

    /tmp/tmpnam_622d_test.go:29:101: invalid operation: myString[j] != "o" (mismatched
    types byte and untyped string)

    /tmp/tmpnam_622d_test.go:29:123: invalid operation: myString[j] != "u" (mismatched
    types byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] == myString[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2gfxxsyd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp2gfxxsyd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp2gfxxsyd_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp2gfxxsyd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            prime = false\n            break\n       \
    \ }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := make([]bool, length+1)\n    primes[0] = true\n \
    \   for i := 2; i < length; i++ {\n        if primes[i] {\n            for j :=\
    \ 2; i*j < length; j++ {\n                primes[i*j] = false\n            }\n\
    \        }\n    }\n    return primes[length-1]\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpdeg3g4uc_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpdeg3g4uc_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpdeg3g4uc_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpdeg3g4uc_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpdeg3g4uc_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpdeg3g4uc_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpdeg3g4uc_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpdeg3g4uc_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpdeg3g4uc_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpdeg3g4uc_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpiwhdutf1_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpiwhdutf1_test.go:51\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7dd2196_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9_wsd79i_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9_wsd79i_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-i-1] {\n   \
    \         prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp_2hanpy9_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp_2hanpy9_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_2hanpy9_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp_2hanpy9_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp_2hanpy9_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp_2hanpy9_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp_2hanpy9_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-i-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp0kv6v5ck_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp0kv6v5ck_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp0kv6v5ck_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp0kv6v5ck_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp0kv6v5ck_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp0kv6v5ck_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp0kv6v5ck_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp0kv6v5ck_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp0kv6v5ck_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length-2*i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp9esk4qnf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp9esk4qnf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    if length\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < length; i++ {\n    \
    \    if myString[i] != myString[i/2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpzm7xjt8x_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpzm7xjt8x_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpzm7xjt8x_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpzm7xjt8x_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpzm7xjt8x_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpzm7xjt8x_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpzm7xjt8x_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpzm7xjt8x_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpzm7xjt8x_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[length-i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-2-i] {\n\
    \                if myString[i] != myString[length-3*i] {\n                  \
    \  prime = false\n                }\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpajj14nb4_test.go:26\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpajj14nb4_test.go:42\
    \ +0xaa6\ntesting.tRunner(0xc0001a01a0, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    for i := 1; i < length; i++ {\n        if primes[i] !=\
    \ 0 {\n            continue\n        }\n        for j := 2; j < i; j++ {\n   \
    \         if i*j > length {\n                break\n            }\n          \
    \  if myString[i*j] == myString[j] {\n                primes[i] = 0\n        \
    \        break\n            }\n        }\n    }\n    return primes[length-1] ==\
    \ 1\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range\
    \ [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpiikc8gld_test.go:31\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpiikc8gld_test.go:50\
    \ +0x405\ntesting.tRunner(0xc000192680, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    primes\
    \ := make([]bool, length)\n    for i := 0; i < length; i++ {\n        if primes[i]\
    \ == true {\n            continue\n        }\n        for j := i + 1; j < length;\
    \ j++ {\n            if myString[i] == myString[j] {\n                primes[j]\
    \ = true\n            }\n        }\n    }\n    for i := 0; i < length; i++ {\n\
    \        if primes[i] == true {\n            return true\n        }\n    }\n \
    \   return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4zv434tb_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp4zv434tb_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmp4zv434tb_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmp4zv434tb_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp4zv434tb_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp4zv434tb_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInts []int\n    var myIntLen int\n    var myIntPrime\
    \ int\n    var myIntPrimeLen int\n    var myIntPrimePrime int\n    var myIntPrimePrimeLen\
    \ int\n    var myIntPrimePrimePrime int\n    var myIntPrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimeLen int\n\
    \    var myIntPrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime int\n    var\
    \ myIntPrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n   \
    \ var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen\
    \ int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime int\n \
    \   var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimeLen int\n    var myIntPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ int\n    var myIntPrimePrimePrimePrime\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps9hgi6uc_test.go:49:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var count int\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] == 'a' {\n            count++\n        }\n    }\n    if\
    \ count == 1 {\n        return true\n    }\n    if count == 2 {\n        return\
    \ true\n    }\n    if count == 3 {\n        return true\n    }\n    if count ==\
    \ 4 {\n        return true\n    }\n    if count == 5 {\n        return true\n\
    \    }\n    if count == 6 {\n        return true\n    }\n    if count == 7 {\n\
    \        return true\n    }\n    if count == 8 {\n        return true\n    }\n\
    \    if count == 9 {\n        return true\n    }\n    if count == 10 {\n     \
    \   return true\n    }\n    if count == 11 {\n        return true\n    }\n   \
    \ if count == 12 {\n        return true\n    }\n    if count == 13 {\n       \
    \ return true\n    }\n    if count == 14 {\n        return true\n    }\n    if\
    \ count == 15 {\n        return true\n    }\n    if count == 16 {\n        return\
    \ true\n    }\n    if count == 17 {\n        return true\n    }\n    if count\
    \ == 18 {\n        return true\n    }\n    if count == 19 {\n        return true\n\
    \    }\n    if count == 20 {\n        return true\n    }\n    if count == 21 {\n\
    \        return true\n    }\n    if count == 22 {\n        return true\n    }\n\
    \    if count == 23 {\n        return true\n    }\n    if count == 24 {\n    \
    \    return true\n    }\n    if count == 25 {\n        return true\n    }\n  \
    \  if count == 26 {\n        return true\n    }\n    if count == 27 {\n      \
    \  return true\n    }\n    if count == 28 {\n        return true\n    }\n    if\
    \ count == 29 {\n        return true\n    }\n    if count == 30 {\n        return\
    \ true\n    }\n    if count == 31 {\n        return true\n    }\n    if count\
    \ == 32 {\n        return true\n    }\n    if count == 33 {\n        return true\n\
    \    }\n    if count == 34 {\n        return true\n    }\n    if count == 35 {\n\
    \        return true\n    }\n    if count == 36 {\n        return true\n    }\n\
    \    if count == 37 {\n        return true\n    }\n    if count == 38 {\n    \
    \    return true\n    }\n    if count == 39 {\n        return true\n    }\n  \
    \  if count == 40 {\n        return true\n    }\n    if count == 41 {\n      \
    \  return true\n    }\n    if count == 42 {\n        return true\n    }\n    if\
    \ count == 43 {\n        return true\n    }\n    if count == 44 {\n        return\
    \ true\n    }\n    if count == 45 {\n        return true\n    }\n    if count\
    \ == 46 {\n        return true\n    }\n    if count == 47 {\n        return true\n\
    \    }\n    if count == 48 {\n        return true\n    }\n    if count == 49\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7beronro_test.go:171:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] =\
    \ 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n  \
    \  primes[31] = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34]\
    \ = 149\n    primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n  \
    \  primes[38] = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41]\
    \ = 181\n    primes[42] = 191\n    primes[43] = 193\n    primes[44] = 197 // this\
    \ one is a special case\n    primes[45] = 199\n    primes[46] = 211\n    primes[47]\
    \ = 223\n    primes[48] = 229\n    primes[49] = 233\n    primes[50] = 241\n  \
    \  primes[51] = 247\n    primes[52] = 251\n    primes[53] = 257\n    primes[54]\
    \ = 263\n    primes[55] = 269\n    primes[56] = 271\n    primes[57] = 277\n  \
    \  primes[58] = 281\n    primes[59] = 283\n    primes[60] = 293\n    primes[61]\
    \ = 307\n    primes[62] = 311\n    primes[63] = 317\n    primes[64] = 323\n  \
    \  primes[65] = 329\n    primes[66] = 331\n    primes[67]\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfwyd0n54_test.go:90:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 100 {\n \
    \       return true\n    }\n    if length == 200 {\n        return true\n    }\n\
    \    if length == 300 {\n        return true\n    }\n    if length == 400 {\n\
    \        return true\n    }\n    if length == 500 {\n        return true\n   \
    \ }\n    if length == 600 {\n        return true\n    }\n    if length == 700\
    \ {\n        return true\n    }\n    if length == 800 {\n        return true\n\
    \    }\n    if length == 900 {\n        return true\n    }\n    if length == 1000\
    \ {\n        return true\n    }\n    if length == 10000 {\n        return true\n\
    \    }\n    if length == 20000 {\n        return true\n    }\n    if length ==\
    \ 30000 {\n        return true\n    }\n    if length == 40000 {\n        return\
    \ true\n    }\n    if length == 50000 {\n        return true\n    }\n    if length\
    \ == 60000 {\n        return true\n    }\n    if length == 70000 {\n        return\
    \ true\n    }\n    if length == 80000 {\n        return true\n    }\n    if length\
    \ == 90000 {\n        return true\n    }\n    if length == 100000 {\n        return\
    \ true\n    }\n    if length == 200000 {\n        return true\n    }\n    if length\
    \ == 300000 {\n        return true\n    }\n    if length == 400000 {\n       \
    \ return true\n    }\n    if length == 500000 {\n        return true\n    }\n\
    \    if length == 600000 {\n        return true\n    }\n    if length == 700000\
    \ {\n        return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoez62mpr_test.go:161:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length-1]\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp3ahbms_x_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp3ahbms_x_test.go:48\
    \ +0x24f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    i := 2\n\
    \    for i < length {\n        if myString[i] != myString[i/2] {\n           \
    \ prime = false\n            break\n        }\n        i += 2\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpcc85fu_4_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpcc85fu_4_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := []int{2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    for _, prime := range primes\
    \ {\n        if length%prime == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpsaee62ky_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpsaee62ky_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7dd2196_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpta3i0zwq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpta3i0zwq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpta3i0zwq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpta3i0zwq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpta3i0zwq_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpta3i0zwq_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpta3i0zwq_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpta3i0zwq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpta3i0zwq_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpta3i0zwq_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i] {\n \
    \               prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9hpu48wx_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9hpu48wx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := make([]bool, length+1)\n    primes[0] = true\n \
    \   primes[1] = false\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcpf0h8ma_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcpf0h8ma_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcpf0h8ma_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcpf0h8ma_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcpf0h8ma_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcpf0h8ma_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcpf0h8ma_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpcpf0h8ma_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpcpf0h8ma_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpcpf0h8ma_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    for i := 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if primes[i] == 0 {\n            for j := 2; j\
    \ < i; j++ {\n                if myString[j] % i == 0 {\n                    primes[i]\
    \ = 0\n                    break\n                }\n            }\n        }\n\
    \    }\n    return primes[length-1] == 1\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ak434kf_test.go:28:20: invalid operation: myString[j] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] =\
    \ 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 121\n    primes[32] = 123\n    primes[33] = 127\n    primes[34]\
    \ = 131\n    primes[35] = 137\n    primes[36] = 139\n    primes[37] = 142\n  \
    \  primes[38] = 147\n    primes[39] = 151\n    primes[40] = 157\n    primes[41]\
    \ = 163\n    primes[42] = 167\n    primes[43] = 173\n    primes[44] = 179\n  \
    \  primes[45] = 181\n    primes[46] = 191\n    primes[47] = 193\n    primes[48]\
    \ = 197\n    primes[49] = 199\n    primes[50] = 201\n    primes[51] = 203\n  \
    \  primes[52] = 205\n    primes[53] = 209\n    primes[54] = 212\n    primes[55]\
    \ = 215\n    primes[56] = 217\n    primes[57] = 223\n    primes[58] = 227\n  \
    \  primes[59] = 229\n    primes[60] = 231\n    primes[61] = 233\n    primes[62]\
    \ = 239\n    primes[63] = 241\n    primes[64] = 243\n    primes[65] = 247\n  \
    \  primes[66] = 251\n    primes[67] = 257\n    primes[68] = 263\n    prime\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpov191mod_test.go:92:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] =\
    \ 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 121\n  \
    \  primes[31] = 123\n    primes[32] = 127\n    primes[33] = 131\n    primes[34]\
    \ = 137\n    primes[35] = 139\n    primes[36] = 149\n    primes[37] = 151\n  \
    \  primes[38] = 157\n    primes[39] = 163\n    primes[40] = 173\n    primes[41]\
    \ = 179\n    primes[42] = 181\n    primes[43] = 191\n    primes[44] = 193\n  \
    \  primes[45] = 197\n    primes[46] = 199\n    primes[47] = 211\n    primes[48]\
    \ = 223\n    primes[49] = 229\n    primes[50] = 241\n    primes[51] = 251\n  \
    \  primes[52] = 263\n    primes[53] = 269\n    primes[54] = 271\n    primes[55]\
    \ = 277\n    primes[56] = 281\n    primes[57] = 283\n    primes[58] = 293\n  \
    \  primes[59] = 307\n    primes[60] = 311\n    primes[61] = 317\n    primes[62]\
    \ = 327\n    primes[63] = 331\n    primes[64] = 333\n    primes[65] = 389\n  \
    \  primes[66] = 407\n    primes[67] = 419\n    \nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk81ttu5_test.go:91:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myInt int\n    myInt = len(myString)\n    for i := 2;\
    \ i < myInt; i++ {\n        if myString == fmt.Sprintf(\"%d\", i) {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpett9d2iz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpett9d2iz_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpett9d2iz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpett9d2iz_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpett9d2iz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpett9d2iz_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpett9d2iz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpett9d2iz_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpett9d2iz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpett9d2iz_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length/2] {\n \
    \               if myString[i] != myString[length/3] {\n                    if\
    \ myString[i] != myString[length/4] {\n                        if myString[i]\
    \ != myString[length/5] {\n                            if myString[i] != myString[length/6]\
    \ {\n                                if myString[i] != myString[length/7] {\n\
    \                                    if myString[i] != myString[length/8] {\n\
    \                                        if myString[i] != myString[length/9]\
    \ {\n                                            if myString[i] != myString[length/10]\
    \ {\n                                                if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1zhytglg_test.go:60:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var prime bool\n    var i int\n    var j int\n    for i\
    \ = 2; i < len(myString); i++ {\n        for j = i; j < len(myString); j++ {\n\
    \            if myString[i] == myString[j] {\n                break\n        \
    \    }\n            if myString[i] == 'a' || myString[i] == 'e' || myString[i]\
    \ == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n                prime\
    \ = true\n                break\n            }\n        }\n        if prime {\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp_7_qjjss_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp_7_qjjss_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp_7_qjjss_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp_7_qjjss_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_7_qjjss_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp_7_qjjss_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp_7_qjjss_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp_7_qjjss_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp_7_qjjss_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp_7_qjjss_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i]\
    \ != myString[length-i] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp_24q1fvo_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp_24q1fvo_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_24q1fvo_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp_24q1fvo_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp_24q1fvo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp_24q1fvo_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp_24q1fvo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp_24q1fvo_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp_24q1fvo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp_24q1fvo_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j <= length; j++ {\n                if i*j == length\
    \ {\n                    primes[j] = false\n                    break\n      \
    \          }\n                if myString[i*j] == myString[j] {\n            \
    \        primes[j] = false\n                    break\n                }\n   \
    \         }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwie8dc_e_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwie8dc_e_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwie8dc_e_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwie8dc_e_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpwie8dc_e_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpwie8dc_e_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i] {\n  \
    \          prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmps020ibm3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmps020ibm3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmps020ibm3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmps020ibm3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmps020ibm3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmps020ibm3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmps020ibm3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmps020ibm3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmps020ibm3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmps020ibm3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLen := len(primes)\n\
    \    i := 0\n    for i < primesLen {\n        if length%primes[i] == 0 {\n   \
    \         i++\n            continue\n        }\n        if length%primes[i] !=\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4hsp268w_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4hsp268w_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4hsp268w_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4hsp268w_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4hsp268w_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4hsp268w_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4hsp268w_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp4hsp268w_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp4hsp268w_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4hsp268w_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-i-1] {\n\
    \                prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpobzxk_gh_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpobzxk_gh_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] =\
    \ 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 121\n  \
    \  primes[31] = 123\n    primes[32] = 127\n    primes[33] = 131\n    primes[34]\
    \ = 137\n    primes[35] = 139\n    primes[36] = 149\n    primes[37] = 151\n  \
    \  primes[38] = 157\n    primes[39] = 163\n    primes[40] = 173\n    primes[41]\
    \ = 179\n    primes[42] = 181\n    primes[43] = 191\n    primes[44] = 193\n  \
    \  primes[45] = 197\n    primes[46] = 199\n    primes[47] = 211\n    primes[48]\
    \ = 223\n    primes[49] = 229\n    primes[50] = 241\n    primes[51] = 251\n  \
    \  primes[52] = 263\n    primes[53] = 269\n    primes[54] = 271\n    primes[55]\
    \ = 277\n    primes[56] = 281\n    primes[57] = 283\n    primes[58] = 293\n  \
    \  primes[59] = 307\n    primes[60] = 311\n    primes[61] = 317\n    primes[62]\
    \ = 327\n    primes[63] = 331\n    primes[64] = 333\n    primes[65] = 389\n  \
    \  primes[66] = 397\n    primes[67] = 419\n    \nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy31qv_ku_test.go:91:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] == myString[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2gfxxsyd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp2gfxxsyd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp2gfxxsyd_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp2gfxxsyd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var count int\n    for i := 0; i < len(myString); i++ {\n\
    \        count += myString[i]\n    }\n    for i := 2; i < count; i++ {\n     \
    \   if myString[i] != 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12mkt3cm_test.go:22:9: invalid operation: count += myString[i] (mismatched
    types int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    for i := 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if primes[i] == 0 {\n            for j := 0; j\
    \ < i; j++ {\n                if myString[j] != \"a\" && myString[j] != \"e\"\
    \ && myString[j] != \"i\" && myString[j] != \"o\" && myString[j] != \"u\" {\n\
    \                    primes[i] = 0\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return primes[length-1] == 1\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgc1kf6j_test.go:28:35: invalid operation: myString[j] != "a" (mismatched
    types byte and untyped string)

    /tmp/tmpzgc1kf6j_test.go:28:57: invalid operation: myString[j] != "e" (mismatched
    types byte and untyped string)

    /tmp/tmpzgc1kf6j_test.go:28:79: invalid operation: myString[j] != "i" (mismatched
    types byte and untyped string)

    /tmp/tmpzgc1kf6j_test.go:28:101: invalid operation: myString[j] != "o" (mismatched
    types byte and untyped string)

    /tmp/tmpzgc1kf6j_test.go:28:123: invalid operation: myString[j] != "u" (mismatched
    types byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    \n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp6bgqdhep_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp6bgqdhep_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i-1]\
    \ {\n                prime = false\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpujt5n__g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpujt5n__g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpjp4ngsma_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpjp4ngsma_test.go:39\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp7h15fm1a_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp7h15fm1a_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7h15fm1a_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7h15fm1a_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp7h15fm1a_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp7h15fm1a_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp7h15fm1a_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7h15fm1a_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7h15fm1a_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7h15fm1a_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[length-i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpgtid96sm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgtid96sm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp4fad1byx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp4fad1byx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            primes[i] = 0\n        } else {\n          \
    \  primes[i] = primes[i-1] + 1\n        }\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp_p24jc9n_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp_p24jc9n_test.go:53\
    \ +0x4af\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] % i == 0 {\n                prime = false\n           \
    \ }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra13it9c_test.go:24:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o0tmdhr_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpiy094rw7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpiy094rw7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := 2; i*j < length; j++ {\n                primes[i*j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpuhur2106_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpuhur2106_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < length; i++ {\n   \
    \     if myString[i] != myString[i/2] {\n            primes[i] = 0\n        }\
    \ else {\n            primes[i] = primes[i-1] + 1\n        }\n    }\n    for i\
    \ := 2; i < length; i++ {\n        if primes[i] == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmpr46mpyg0_test.go:22\
    \ +0xf6\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpr46mpyg0_test.go:54\
    \ +0x142\ntesting.tRunner(0xc0001a01a0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    i := 2\n    for i < length {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpe23u8e2w_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpe23u8e2w_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o0tmdhr_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o0tmdhr_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpkrt8mtq7_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkrt8mtq7_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp5wiw2dwt_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp5wiw2dwt_test.go:39\
    \ +0x83f\ntesting.tRunner(0xc000103520, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp01u44nnd_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp01u44nnd_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp19qw8rx5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp19qw8rx5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i <= length/2; i++ {\n        if myString[length-i]\
    \ != myString[length-i-1] {\n            prime = false\n            break\n  \
    \      }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp6mza6ski_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp6mza6ski_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6mza6ski_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6mza6ski_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp6mza6ski_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp6mza6ski_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp6mza6ski_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp6mza6ski_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp6mza6ski_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            prime = false\n            break\n       \
    \ }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpyhrkr5in_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpyhrkr5in_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]int, length)\n\
    \    primes[0] = 2\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            primes[i] = 0\n        } else {\n          \
    \  primes[i] = 1\n        }\n    }\n    for i := 2; i < length; i++ {\n      \
    \  if primes[i] == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpojcwy5_q_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpojcwy5_q_test.go:53\
    \ +0x4a5\ntesting.tRunner(0xc0001a01a0, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i <= length/2; i++ {\n        if myString[length-i] != myString[length-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpjw32s6a0_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpjw32s6a0_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpjw32s6a0_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpjw32s6a0_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpjw32s6a0_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpjw32s6a0_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpjw32s6a0_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpjw32s6a0_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpjw32s6a0_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-i-1] {\n   \
    \         prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpilgvj9a3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpilgvj9a3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    prime := true\n    for i := 2; i < length; i++ {\n       \
    \ if myString[i] != myString[length-1] {\n            prime = false\n        \
    \    break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp46fapjjt_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp46fapjjt_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp46fapjjt_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp46fapjjt_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp46fapjjt_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp46fapjjt_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp46fapjjt_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 23 {\n  \
    \      return true\n    }\n    if length == 24 {\n        return true\n    }\n\
    \    if length == 25 {\n        return true\n    }\n    if length == 26 {\n  \
    \      return true\n    }\n    if length == 27 {\n        return true\n    }\n\
    \    if length == 28 {\n        return true\n    }\n    if length == 29 {\n  \
    \      return true\n    }\n    if length == 30 {\n        return true\n    }\n\
    \    if length == 31 {\n        return true\n    }\n    if length == 32 {\n  \
    \      return true\n    }\n    if length == 33 {\n        return true\n    }\n\
    \    if length == 34 {\n        return true\n    }\n    if length == 35 {\n  \
    \      return true\n    }\n    if length == 36 {\n        return true\n    }\n\
    \    if length == 37 {\n        return true\n    }\n    if length == 38 {\n  \
    \      return true\n    }\n    if length == 39 {\n        return true\n    }\n\
    \    if length == 40 {\n        return true\n    }\n    if length == 41 {\n  \
    \      return true\n    }\n    if length == 42 {\n        return true\n    }\n\
    \    if length == 43 {\n        return true\n    }\n    if length == 44 {\n  \
    \      return true\n    }\n    if length == 45 {\n        return true\n    }\n\
    \    if length == 46 {\n        return true\n    }\n    if length == 47 {\n  \
    \      return true\n    }\n    if length == 48 {\n        return true\n    }\n\
    \    if length == 49 {\n        return true\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvq23t_l3_test.go:164:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpgem67i5e_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpgem67i5e_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgem67i5e_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgem67i5e_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgem67i5e_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpgem67i5e_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpgem67i5e_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpgem67i5e_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpgem67i5e_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpgem67i5e_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i]\
    \ != myString[length-i] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpobw02exm_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpobw02exm_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0uae4g9_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := make([]bool, length+1)\n\
    \    primes[0] = true\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ {\n            for j := i*i; j < length; j += i {\n                primes[j]\
    \ = false\n            }\n        }\n    }\n    return primes[length]\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpgql_qv6c_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpgql_qv6c_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var primes []int\n    var length int\n    for i := 0; i\
    \ < len(myString); i++ {\n        length += 1\n        for j := 0; j < length;\
    \ j++ {\n            if myString[j] == myString[j] {\n                primes =\
    \ append(primes, j)\n            }\n        }\n    }\n    for _, prime := range\
    \ primes {\n        if myString[prime] != myString[prime] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpy0cip4uv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpy0cip4uv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpy0cip4uv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpy0cip4uv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpy0cip4uv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpy0cip4uv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i != 0 {\n                prime = false\n  \
    \              break\n            }\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt86aqsm0_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n                break\n            }\n        }\n    }\n   \
    \ return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihn5bp64_test.go:25:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    primes := make([]bool, length+1)\n    primes[0] = true\n \
    \   for i := 2; i < length; i++ {\n        if primes[i] {\n            for j :=\
    \ 2; i*j < length; j++ {\n                primes[i*j] = false\n            }\n\
    \        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp_9k7ey_p_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp_9k7ey_p_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp_9k7ey_p_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp_9k7ey_p_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_9k7ey_p_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp_9k7ey_p_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp_9k7ey_p_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp_9k7ey_p_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp_9k7ey_p_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp_9k7ey_p_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length] {\n            prime = false\n            break\n      \
    \  }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmph1oi4t7v_test.go:24\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmph1oi4t7v_test.go:39\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length-2-i] {\n\
    \                if myString[i] != myString[length-3*i] {\n                  \
    \  prime = false\n                }\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpajj14nb4_test.go:26\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpajj14nb4_test.go:42\
    \ +0xaa6\ntesting.tRunner(0xc0001a01a0, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpu0dnbaq6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpu0dnbaq6_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n          \
    \  prime = false\n            break\n        }\n    }\n    return prime\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpwtj7lz6i_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpwtj7lz6i_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length/2] {\n\
    \                if myString[i] != myString[length/3] {\n                    if\
    \ myString[i] != myString[length/4] {\n                        if myString[i]\
    \ != myString[length/5] {\n                            if myString[i] != myString[length/6]\
    \ {\n                                if myString[i] != myString[length/7] {\n\
    \                                    if myString[i] != myString[length/8] {\n\
    \                                        if myString[i] != myString[length/9]\
    \ {\n                                            if myString[i] != myString[length/10]\
    \ {\n                                                if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if my\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmkg2oeih_test.go:60:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpd79kc9jy_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpd79kc9jy_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpd79kc9jy_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpd79kc9jy_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpd79kc9jy_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpd79kc9jy_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpd79kc9jy_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    primes := []int{2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    for i := 2; i < length; i++ {\n        if myString[i] > myString[i/2]\
    \ {\n            return false\n        }\n        for _, prime := range primes\
    \ {\n            if myString[i] == string(prime) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz7yvv_9_test.go:27:31: invalid operation: myString[i] == string(prime)
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
