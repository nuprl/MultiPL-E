language: go_test.go
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmps301qlf3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x > y && x > z {\n        return true\n    }\n    if y > z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return x\
    \ == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsp5a2w52_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpsp5a2w52_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpsp5a2w52_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpx25wo6hz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x+y+z\
    \ == (x+y+z)/3)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < 0\
    \ || y < 0 || z < 0 {\n        return false\n    }\n    if x == y && y == z {\n\
    \        return true\n    }\n    if x == y || y == z {\n        return true\n\
    \    }\n    if x == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmprtrxq_yr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmprtrxq_yr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmprtrxq_yr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmprtrxq_yr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmprtrxq_yr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n      \
    \  return false\n    }\n    if x < 0 || y < 0 || z < 0 {\n        return false\n\
    \    }\n    if x == y || y == z {\n        return false\n    }\n    if x == 0\
    \ || y == 0 || z == 0 {\n        return false\n    }\n    if x == y && y == z\
    \ {\n        return false\n    }\n    if x == y || y == z {\n        return false\n\
    \    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n   \
    \ if x == y || y == z {\n        return false\n    }\n    if x == y && y == z\
    \ {\n        return false\n    }\n    if x == y || y == z {\n        return false\n\
    \    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n   \
    \ if x == y || y == z {\n        return false\n    }\n    if x == y && y == z\
    \ {\n        return false\n    }\n    if x == y || y == z {\n        return false\n\
    \    }\n    if x == y || y == z {\n        return false\n    }\n    if x == y\
    \ || y == z {\n        return false\n    }\n    if x == y || y == z {\n      \
    \  return false\n    }\n    if x == y || y == z {\n        return false\n    }\n\
    \    if x == y || y == z {\n        return false\n    }\n    if x == y || y ==\
    \ z {\n        return false\n    }\n    if x == y || y == z {\n        return\
    \ false\n    }\n    if x == y || y == z {\n        return false\n    }\n    if\
    \ x == y || y == z {\n        return false\n    }\n    if x == y || y == z {\n\
    \        return false\n    }\n    if x == y || y == z {\n        return false\n\
    \    }\n    if x == y || y == z {\n        return false\n    }\n    if x == y\
    \ || y == z {\n        return false\n    }\n    if x == y || y == z {\n      \
    \  return false\n    }\n    if x == y || y == z {\n        return false\n    }\n\
    \    if x == y || y == z {\n        return false\n    }\n    if x == y || y ==\
    \ z {\n        return false\n    }\n    if x == y || y == z {\n        return\
    \ false\n    }\n    if x == y || y == z {\n        return false\n    }\n    if\
    \ x == y || y == z {\n        return false\n    }\n    if x == y || y == z {\n\
    \        return false\n    }\n    if x == y || y == z {\n        return false\n\
    \    }\n    if x == y || y == z {\n        return false\n    }\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu3n276yc_test.go:139:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp2_kf0ymt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp2_kf0ymt_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp2_kf0ymt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp2_kf0ymt_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp2_kf0ymt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp2_kf0ymt_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp2_kf0ymt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < y\
    \ && x < z {\n        return true\n    }\n    if y < x && y < z {\n        return\
    \ true\n    }\n    if z < x && z < y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x > y\
    \ && x > z {\n        return true\n    }\n    if y > x && y > z {\n        return\
    \ true\n    }\n    if z > x && z > y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpqgxr28yg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpqgxr28yg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpqgxr28yg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqgxr28yg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return x\
    \ == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsp5a2w52_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpsp5a2w52_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpsp5a2w52_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < 0\
    \ || y < 0 || z < 0 {\n        return false\n    }\n    if x == y || x == z {\n\
    \        return true\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == y || x == z {\n        return true\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x == y ||\
    \ x == z {\n        return true\n    }\n    if x == y || x == z {\n        return\
    \ true\n    }\n    if x == y || x == z {\n        return true\n    }\n    if x\
    \ == y || x == z {\n        return true\n    }\n    if x == y || x == z {\n  \
    \      return true\n    }\n    if x == y || x == z {\n        return true\n  \
    \  }\n    if x == y || x == z {\n        return true\n    }\n    if x == y ||\
    \ x == z {\n        return true\n    }\n    if x == y || x == z {\n        return\
    \ true\n    }\n    if x == y || x == z {\n        return true\n    }\n    if x\
    \ == y || x == z {\n        return true\n    }\n    if x == y || x == z {\n  \
    \      return true\n    }\n    if x == y || x == z {\n        return true\n  \
    \  }\n    if x == y || x == z {\n        return true\n    }\n    if x == y ||\
    \ x == z {\n        return true\n    }\n    if x == y || x == z {\n        return\
    \ true\n    }\n    if x == y || x == z {\n        return true\n    }\n    if x\
    \ == y || x == z {\n        return true\n    }\n    if x == y || x == z {\n  \
    \      return true\n    }\n    if x == y || x == z {\n        return true\n  \
    \  }\n    if x == y || x == z {\n        return true\n    }\n    if x == y ||\
    \ x == z {\n        return true\n    }\n    if x == y || x == z {\n        return\
    \ true\n    }\n    if x == y || x == z {\n        return true\n    }\n    if x\
    \ == y || x == z {\n        return true\n    }\n    if x == y || x == z {\n  \
    \      return true\n    }\n    if x == y || x == z {\n        return true\n  \
    \  }\n    if x == y || x == z {\n        return true\n    }\n    if x == y ||\
    \ x == z {\n        return true\n    }\n    if x == y || x == z {\n        return\
    \ true\n    }\n    if x == y || x == z {\n        return true\n    }\n    if x\
    \ == y || x == z {\n        return true\n    }\n    if x == y || x == z {\n  \
    \      return true\n    }\n    if \nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp84yi973s_test.go:139:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < 0\
    \ || y < 0 || z < 0 {\n        return false\n    }\n    if x < y && x < z {\n\
    \        return true\n    }\n    if y < x && y < z {\n        return true\n  \
    \  }\n    if z < x && z < y {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpnqrm9eqr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpnqrm9eqr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpnqrm9eqr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnqrm9eqr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnqrm9eqr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpnqrm9eqr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x+y+z\
    \ == (x+y+z)/3)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmps301qlf3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < 0\
    \ || y < 0 || z < 0 {\n        return false\n    }\n    if x == y && y == z {\n\
    \        return true\n    }\n    if x == y || y == z || x == z {\n        return\
    \ true\n    }\n    if x > y && y > z {\n        return true\n    }\n    if x >\
    \ y || y > z || x > z {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz5o_bzgx_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpz5o_bzgx_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz5o_bzgx_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz5o_bzgx_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpz5o_bzgx_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpx25wo6hz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    if x < y && y < z {\n     \
    \   return true\n    }\n    if x > y && y > z {\n        return true\n    }\n\
    \    if x > z && z > y {\n        return true\n    }\n    if x < z && z < y {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpmqpr3q97_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpmqpr3q97_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpmqpr3q97_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpmqpr3q97_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpmqpr3q97_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpmqpr3q97_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpmqpr3q97_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x > y\
    \ && x > z {\n        return true\n    }\n    if y > x && y > z {\n        return\
    \ true\n    }\n    if z > x && z > y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpqgxr28yg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpqgxr28yg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpqgxr28yg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqgxr28yg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpl48k224m_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpl48k224m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmps301qlf3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    if x == 0 || y == 0 || z ==\
    \ 0 {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n    \
    \    return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 ||\
    \ y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n\
    \        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 ||\
    \ y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n\
    \        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 ||\
    \ y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n\
    \        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 ||\
    \ y == 0 || z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n\
    \        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if\
    \ x == 0 || y == \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9eimn_rm_test.go:133:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x < y && x < z {\n        return\
    \ true\n    }\n    if y < x && y < z {\n        return true\n    }\n    if z <\
    \ x && z < y {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp3w5w3jnj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp3w5w3jnj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp3w5w3jnj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3w5w3jnj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp3w5w3jnj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < 0\
    \ || y < 0 || z < 0 {\n        return false\n    }\n    if x == y && y == z {\n\
    \        return true\n    }\n    if x == y || y == z {\n        return true\n\
    \    }\n    if x == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmprtrxq_yr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmprtrxq_yr_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmprtrxq_yr_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmprtrxq_yr_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmprtrxq_yr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmphdj8tv9h_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmphdj8tv9h_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmphdj8tv9h_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmphdj8tv9h_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmphdj8tv9h_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmphdj8tv9h_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmphdj8tv9h_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmphdj8tv9h_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmphdj8tv9h_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmphdj8tv9h_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x || z == y\n    }\n    if x == z {\n   \
    \     return y == x || y == z\n    }\n    return x == y || x == z || y == z\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp2gj4zct4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp2gj4zct4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp2gj4zct4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp2gj4zct4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmps301qlf3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmps301qlf3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    if x < y && y < z {\n        return\
    \ true\n    }\n    if x > y && y > z {\n        return true\n    }\n    if x >\
    \ y || y > z || x < z {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkk34vjga_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpkk34vjga_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkk34vjga_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkk34vjga_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpkk34vjga_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpkk34vjga_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x+y+z\
    \ == (x+y+z)/3)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpe9fcfnzy_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe9fcfnzy_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return true\n    }\n    if y < z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp75awrnof_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp75awrnof_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp75awrnof_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    if x < y && y < z {\n        return\
    \ true\n    }\n    if x > y && y > z {\n        return true\n    }\n    if x <\
    \ y || y < z || x > z {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpy9sdf0bz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpy9sdf0bz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpy9sdf0bz_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpy9sdf0bz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpy9sdf0bz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy9sdf0bz_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < y\
    \ && x < z {\n        return true\n    }\n    if y < x && y < z {\n        return\
    \ true\n    }\n    if z < x && z < y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    if x < y && y < z {\n     \
    \   return true\n    }\n    if x < y || y < z {\n        return false\n    }\n\
    \    if x < z {\n        return true\n    }\n    if y < z {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == 0 || y == 0 || z == 0 {\n      \
    \  return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7l44lezu_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7l44lezu_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp7l44lezu_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp7l44lezu_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp7l44lezu_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp7l44lezu_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp7l44lezu_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp7w_akyci_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp7w_akyci_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x > y && x > z {\n        return true\n    }\n    if y > z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    if y == z {\n        return false\n    }\n    if x < y && y < z {\n     \
    \   return true\n    }\n    if x < y || y < z {\n        return false\n    }\n\
    \    if x < z {\n        return true\n    }\n    if y < z {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpsfef5uyo_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpsfef5uyo_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    if x == z {\n        return\
    \ y == z\n    }\n    if y == z {\n        return x == y\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpnfszz8ii_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpnfszz8ii_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmph0bwb22l_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmph0bwb22l_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmph0bwb22l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmph0bwb22l_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmph0bwb22l_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmph0bwb22l_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x\
    \ == y || x == z) && x == int(x+y+z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqruwnwj7_test.go:24:39: invalid operation: x == int(x + y + z) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x + y\n    }\n    return z == x + y || z\
    \ == x - y || z == x * y\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpjugdcdwl_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpjugdcdwl_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpx25wo6hz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx25wo6hz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpx25wo6hz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp3ngys0e3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3ngys0e3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    if y == z {\n        return true\n\
    \    }\n    if x > y && x > z {\n        return true\n    }\n    if y > z {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpupc4gsqb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpupc4gsqb_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ || x == z {\n        return false\n    }\n    if x < y && y < z {\n        return\
    \ true\n    }\n    if x < y || y < z || x < z {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp0jbso990_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp0jbso990_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp0jbso990_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp0jbso990_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp0jbso990_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp0jbso990_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < y\
    \ && x < z {\n        return true\n    }\n    if y < x && y < z {\n        return\
    \ true\n    }\n    if z < x && z < y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp81duhgjg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp81duhgjg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpe375q4oo_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpe375q4oo_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
