name: HumanEval_27_flip_case
language: go_test.go
prompt: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\
  // >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string\
  \ {\n"
tests: "func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
  Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
  \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := \"\"\n    for _, letter := range myString {\n       \
    \ if letter == letter.toUpper() {\n            result += letter.toLower()\n  \
    \      } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, letter := range myString {\n        if letter\
    \ == 'a' {\n            result += \"A\"\n        } else if letter == 'b' {\n \
    \           result += \"B\"\n        } else if letter == 'c' {\n            result\
    \ += \"C\"\n        } else if letter == 'd' {\n            result += \"D\"\n \
    \       } else if letter == 'e' {\n            result += \"E\"\n        } else\
    \ if letter == 'f' {\n            result += \"F\"\n        } else if letter ==\
    \ 'g' {\n            result += \"G\"\n        } else if letter == 'h' {\n    \
    \        result += \"H\"\n        } else if letter == 'i' {\n            result\
    \ += \"I\"\n        } else if letter == 'j' {\n            result += \"J\"\n \
    \       } else if letter == 'k' {\n            result += \"K\"\n        } else\
    \ if letter == 'l' {\n            result += \"L\"\n        } else if letter ==\
    \ 'm' {\n            result += \"M\"\n        } else if letter == 'n' {\n    \
    \        result += \"N\"\n        } else if letter == 'o' {\n            result\
    \ += \"O\"\n        } else if letter == 'p' {\n            result += \"P\"\n \
    \       } else if letter == 'q' {\n            result += \"Q\"\n        } else\
    \ if letter == 'r' {\n            result += \"R\"\n        } else if letter ==\
    \ 's' {\n            result += \"S\"\n        } else if letter == 't' {\n    \
    \        result += \"T\"\n        } else if letter == 'u' {\n            result\
    \ += \"U\"\n        } else if letter == 'v' {\n            result += \"V\"\n \
    \       } else if letter == 'w' {\n            result += \"W\"\n        } else\
    \ if letter == 'x' {\n            result += \"X\"\n        } else if letter ==\
    \ 'y' {\n            result += \"Y\"\n        } else if letter == 'z' {\n    \
    \        result += \"Z\"\n        } else {\n            result += letter\n   \
    \     }\n    }\n    return result\n}\n", "    result := \"\"\n    for _, letter\
    \ := range myString {\n        if letter == letter.toUpper() {\n            result\
    \ += letter.toLower()\n        } else {\n            result += letter.toUpper()\n\
    \        }\n    }\n    return result\n}\n", "    result := \"\"\n    for _, letter\
    \ := range myString {\n        if letter == letter.toUpper() {\n            result\
    \ += letter.toLower()\n        } else {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n", "    result := \"\"\n    for _, char :=\
    \ range myString {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string(char - 'a') + string(char - 'A')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n", "    result := \"\"\n  \
    \  for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n", " \
    \   result := \"\"\n    for _, char := range myString {\n        if char >= 'a'\
    \ && char <= 'z' {\n            result += string(char - 'a') + string(char - 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n",
  "    result := \"\"\n    for _, char := range myString {\n        if char >= 'a'\
    \ && char <= 'z' {\n            result += string([]byte{char - 'a', char - 'A'})\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n  \
    \      } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n", "    result := \"\"\n    for _, char := range myString\
    \ {\n        if char >= 'a' && char <= 'z' {\n            result += string(char\
    \ - 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else {\n\
    \            result = letter\n        }\n    }\n    return result\n}\n", "   \
    \ result := \"\"\n    for _, char := range myString {\n        if char >= 'a'\
    \ && char <= 'z' {\n            result += string(char - 'a') + string(char - 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n  \
    \      } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, letter := range myString {\n        if letter\
    \ == 'a' {\n            result += \"A\"\n        } else if letter == 'b' {\n \
    \           result += \"B\"\n        } else if letter == 'c' {\n            result\
    \ += \"C\"\n        } else if letter == 'd' {\n            result += \"D\"\n \
    \       } else if letter == 'e' {\n            result += \"E\"\n        } else\
    \ if letter == 'f' {\n            result += \"F\"\n        } else if letter ==\
    \ 'g' {\n            result += \"G\"\n        } else if letter == 'h' {\n    \
    \        result += \"H\"\n        } else if letter == 'i' {\n            result\
    \ += \"I\"\n        } else if letter == 'j' {\n            result += \"J\"\n \
    \       } else if letter == 'k' {\n            result += \"K\"\n        } else\
    \ if letter == 'l' {\n            result += \"L\"\n        } else if letter ==\
    \ 'm' {\n            result += \"M\"\n        } else if letter == 'n' {\n    \
    \        result += \"N\"\n        } else if letter == 'o' {\n            result\
    \ += \"O\"\n        } else if letter == 'p' {\n            result += \"P\"\n \
    \       } else if letter == 'q' {\n            result += \"Q\"\n        } else\
    \ if letter == 'r' {\n            result += \"R\"\n        } else if letter ==\
    \ 's' {\n            result += \"S\"\n        } else if letter == 't' {\n    \
    \        result += \"T\"\n        } else if letter == 'u' {\n            result\
    \ += \"U\"\n        } else if letter == 'v' {\n            result += \"V\"\n \
    \       } else if letter == 'w' {\n            result += \"W\"\n        } else\
    \ if letter == 'x' {\n            result += \"X\"\n        } else if letter ==\
    \ 'y' {\n            result += \"Y\"\n        } else if letter == 'z' {\n    \
    \        result += \"Z\"\n        } else {\n            result += letter\n   \
    \     }\n    }\n    return result\n}\n", "    result := \"\"\n    for _, char\
    \ := range myString {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string(char - 'a') + string(char - 'A')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n", "    result := \"\"\n  \
    \  for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n", "    result := \"\
    \"\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z'\
    \ {\n            result += string([]byte{char - 'a', char})\n        } else {\n\
    \            result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
