name: HumanEval_84_solve
language: go_test.go
prompt: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer N, return the total sum of its digits in binary.\n// Example\n\
  // >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n\
  // \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n\
  // Output:\n// a string of binary number\nfunc solve(N int) string {\n"
tests: "func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
  \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n \
  \    { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
  \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    s := \"\"\n    for i := 0; i < N; i++ {\n        s += fmt.Sprintf(\"\
    %b\", N%2)\n        N /= 2\n    }\n    return s\n}\n", "    result := \"\"\n \
    \   digit := 0\n    result += \"1\"\n    for i := 0; i < N; i++ {\n        digit\
    \ += int(N % 2)\n        N /= 2\n    }\n    result += fmt.Sprintf(\"%d\", digit)\n\
    \    return result\n}\n", "    result := \"\"\n    digit := 0\n    i := 0\n  \
    \  for i < N {\n        digit = N % 2\n        result += string(digit)\n     \
    \   N /= 2\n        i++\n    }\n    return result\n}\n", "    result := \"\"\n\
    \    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N % 2)\n \
    \       N /= 2\n    }\n    for i := 0; i < digit; i++ {\n        result += \"\
    1\"\n    }\n    return result\n}\n", "    s := \"\"\n    i := 0\n    for N > 0\
    \ {\n        if N%2 == 0 {\n            s += \"1\"\n            N /= 2\n     \
    \   } else {\n            s += \"0\"\n            N /= 2\n        }\n        i++\n\
    \    }\n    return s\n}\n", "    result := \"\"\n    n := N\n    result += \"\
    1\"\n    for i := 2; i <= n; i++ {\n        result += \"0\"\n    }\n    return\
    \ result\n}\n", "    s := \"\"\n    for i := 0; i < N; i++ {\n        s += fmt.Sprintf(\"\
    %b\", N%2)\n        N /= 2\n    }\n    return s\n}\n", "    s := \"\"\n    i :=\
    \ 0\n    for N > 0 {\n        s += fmt.Sprintf(\"%b\", N%2)\n        N = N/2\n\
    \        i++\n    }\n    return s\n}\n", "    result := \"\"\n    base := 2\n\
    \    for i := 0; i < N; i++ {\n        result += \"1\"\n    }\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result += \"0\"\n    }\n    return result\n}\n",
  "    s := \"\"\n    for i := 0; i < N; i++ {\n        s += fmt.Sprintf(\"%b\", N%2)\n\
    \        N /= 2\n    }\n    return s\n}\n", "    result := \"\"\n    digit :=\
    \ 0\n    for i := 0; i < N; i++ {\n        digit += int(N % 2)\n        N = N\
    \ / 2\n    }\n    for i := 0; i < digit; i++ {\n        result += fmt.Sprintf(\"\
    1\")\n    }\n    return result\n}\n", "    result := \"\"\n    digit := 0\n  \
    \  sum := 0\n    for i := 0; i < N; i++ {\n        digit = N % 10\n        sum\
    \ += digit\n        N = N / 10\n    }\n    for i := 0; i < sum; i++ {\n      \
    \  result = fmt.Sprintf(\"%s%d\", result, digit)\n    }\n    return result\n}\n",
  "    s := \"\"\n    for i := 0; i < N; i++ {\n        s += fmt.Sprintf(\"%b\", N%2)\n\
    \        N /= 2\n    }\n    return s\n}\n", "    result := \"\"\n    digit :=\
    \ 0\n    digit := N / 10\n    result := result + fmt.Sprintf(\"%d\", digit)\n\
    \    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"%d\",\
    \ digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= 10\n    digit := N / 10\n    result := result + fmt.Sprintf(\"\
    %d\", digit)\n    N %= ", "    result := \"\"\n    i := 0\n    for N > 0 {\n \
    \       result += \"1\"\n        N /= 10\n        i++\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for i := 0; i < N; i++ {\n        result += \"\
    1\"\n    }\n    return result\n}\n", "    s := \"\"\n    i := 0\n    for i < N\
    \ {\n        s += fmt.Sprintf(\"%d\", N % 2)\n        N = N / 2\n        i++\n\
    \    }\n    return s\n}\n", "    result := \"\"\n    base := 2\n    digit := 0\n\
    \    for digit < N {\n        result += \"1\"\n        digit += base\n       \
    \ base /= 2\n    }\n    return result\n}\n", "    s := \"\"\n    i := 0\n    for\
    \ i < N {\n        s += fmt.Sprintf(\"%b\", N%2)\n        N = N / 2\n        i++\n\
    \    }\n    return s\n}\n", "    s := \"\"\n    i := 0\n    for N > 0 {\n    \
    \    s += fmt.Sprintf(\"%d\", N%2)\n        N = N/2\n        i++\n    }\n    return\
    \ s\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
