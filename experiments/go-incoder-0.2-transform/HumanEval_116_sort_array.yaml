name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2,\
  \ -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0,\
  \ 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result []int\n    var count int\n    for _, v := range arr\
    \ {\n        if v == 0 {\n            count++\n        } else {\n            count\
    \ = 0\n        }\n        result = append(result, v)\n        if count > 1 {\n\
    \            result = append(result, count-1)\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n    \
    \    onesCount := binary.BigEndian.Uint32(arr[i]) >> 3\n        zerosCount :=\
    \ binary.BigEndian.Uint32(arr[j]) >> 3\n        if onesCount > zerosCount {\n\
    \            return true\n        }\n        if onesCount < zerosCount {\n   \
    \         return false\n        }\n        return arr[i] < arr[j]\n    })\n  \
    \  return arr\n}\n", "    var result []int\n    var count int\n    for _, v :=\
    \ range arr {\n        count += v\n    }\n    for _, v := range arr {\n      \
    \  if v == 0 {\n            continue\n        }\n        if count == 0 {\n   \
    \         result = append(result, v)\n            count = 0\n            continue\n\
    \        }\n        if v > 0 {\n            count -= v\n        } else {\n   \
    \         count += v\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        ones1 := binary.BigEndian.Uint64(arr[i])\n\
    \        ones2 := binary.BigEndian.Uint64(arr[j])\n        dec1 := ones1 >> uint(8)\n\
    \        dec2 := ones2 >> uint(8)\n        if dec1 > dec2 {\n            return\
    \ true\n        }\n        if dec1 < dec2 {\n            return false\n      \
    \  }\n        return dec1 < dec2\n    })\n    return arr\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range arr {\n        result[i] = arr[i]\n    }\n    for i\
    \ := range count {\n        if count[i] == 0 {\n            continue\n       \
    \ }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n       \
    \ }\n        if j == -1 {\n            break\n        }\n        result[i] = arr[j]\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ arr {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    i := 0\n    for _, v := range arr {\n        count[v]++\n   \
    \ }\n    for _, v := range arr {\n        result[i] = v\n        i++\n    }\n\
    \    for _, v := range count {\n        if v > 0 {\n            j := 0\n     \
    \       for i := 0; i < v; i++ {\n                j++\n                result[i]\
    \ = result[j-1]\n            }\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := range arr {\n        count[i] = 0\n    }\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        if count[i]\
    \ == 1 {\n            result[i] = i\n        }\n    }\n    for i := range count\
    \ {\n        if count[i] == 1 {\n            continue\n        }\n        j :=\
    \ i\n        for k := i - 1; k >= 0; k-- {\n            if count[k] == 1 {\n \
    \               result[j] = k\n                break\n            }\n        \
    \    if count[k] > 1 {\n                j--\n            }\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range count {\n        result[count[i]-1] = i\n    }\n    for i := range\
    \ result {\n        result[i] = arr[result[i]]\n    }\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        if arr[i] == 1 {\n            return true\n        }\n        if\
    \ arr[j] == 1 {\n            return false\n        }\n        return arr[i]-arr[j]\
    \ >= 0\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n \
    \   result := sort_array_test(arr, result)\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n\
    \        for k := i; k < j; k++ {\n            if arr[k] == 1 {\n            \
    \    oneCount++\n            }\n        }\n        if oneCount > 0 {\n       \
    \     return oneCount < 2\n        }\n        return arr[j] < arr[i]\n    })\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \n    for _, v := range arr {\n        count[v]++\n    }\n\n    for _, v := range\
    \ arr {\n        if count[v] == 1 {\n            result[count[v]] = v\n      \
    \      count[v]--\n        }\n    }\n\n    return result\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make(map[int]int)\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range arr {\n        result[count[arr[i]]]\
    \ = arr[i]\n        count[arr[i]]++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make(map[int]int)\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for k := range count {\n        result[count[k]-1]\
    \ = k\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = arr[i]\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return true\n        }\n\
    \        if arr[j] == 1 {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     count[i] = 0\n    }\n    for _, v := range arr {\n        count[v] += 1\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            j\
    \ := 0\n            for k := 0; k < i; k++ {\n                if count[k] == count[j]\
    \ {\n                    j++\n                }\n            }\n            result[i],\
    \ result[j] = result[j], result[i]\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range arr {\n        result := append(result,\
    \ v)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        onesCount :=\
    \ binary.BigEndian.Uint32(result[i:]) >> 3\n        zerosCount := binary.BigEndian.Uint32(result[i:])\
    \ & 0x7\n        if onesCount > zerosCount {\n            return true\n      \
    \  }\n        if onesCount < zerosCount {\n            return false\n        }\n\
    \        return result[i] < result[j]\n    })\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
