name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2,\
  \ -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0,\
  \ 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result []int\n    var count int\n    for _, v := range arr\
    \ {\n        if v == 0 {\n            count++\n        } else {\n            count\
    \ = 0\n        }\n        result = append(result, v)\n        if count > 1 {\n\
    \            result = append(result, count-1)\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n    \
    \    onesCount := binary.BigEndian.Uint32(arr[i]) >> 3\n        zerosCount :=\
    \ binary.BigEndian.Uint32(arr[j]) >> 3\n        if onesCount > zerosCount {\n\
    \            return true\n        }\n        if onesCount < zerosCount {\n   \
    \         return false\n        }\n        return arr[i] < arr[j]\n    })\n  \
    \  return arr\n}\n", "    var result []int\n    var count int\n    for _, v :=\
    \ range arr {\n        count += v\n    }\n    for _, v := range arr {\n      \
    \  if v == 0 {\n            continue\n        }\n        if count == 0 {\n   \
    \         result = append(result, v)\n            count = 0\n            continue\n\
    \        }\n        if v > 0 {\n            count -= v\n        } else {\n   \
    \         count += v\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        ones1 := binary.BigEndian.Uint64(arr[i])\n\
    \        ones2 := binary.BigEndian.Uint64(arr[j])\n        dec1 := ones1 >> uint(8)\n\
    \        dec2 := ones2 >> uint(8)\n        if dec1 > dec2 {\n            return\
    \ true\n        }\n        if dec1 < dec2 {\n            return false\n      \
    \  }\n        return dec1 < dec2\n    })\n    return arr\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range arr {\n        result[i] = arr[i]\n    }\n    for i\
    \ := range count {\n        if count[i] == 0 {\n            continue\n       \
    \ }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n       \
    \ }\n        if j == -1 {\n            break\n        }\n        result[i] = arr[j]\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ arr {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    i := 0\n    for _, v := range arr {\n        count[v]++\n   \
    \ }\n    for _, v := range arr {\n        result[i] = v\n        i++\n    }\n\
    \    for _, v := range count {\n        if v > 0 {\n            j := 0\n     \
    \       for i := 0; i < v; i++ {\n                j++\n                result[i]\
    \ = result[j-1]\n            }\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := range arr {\n        count[i] = 0\n    }\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        if count[i]\
    \ == 1 {\n            result[i] = i\n        }\n    }\n    for i := range count\
    \ {\n        if count[i] == 1 {\n            continue\n        }\n        j :=\
    \ i\n        for k := i - 1; k >= 0; k-- {\n            if count[k] == 1 {\n \
    \               result[j] = k\n                break\n            }\n        \
    \    if count[k] > 1 {\n                j--\n            }\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range count {\n        result[count[i]-1] = i\n    }\n    for i := range\
    \ result {\n        result[i] = arr[result[i]]\n    }\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        if arr[i] == 1 {\n            return true\n        }\n        if\
    \ arr[j] == 1 {\n            return false\n        }\n        return arr[i]-arr[j]\
    \ >= 0\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n \
    \   result := sort_array_test(arr, result)\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n\
    \        for k := i; k < j; k++ {\n            if arr[k] == 1 {\n            \
    \    oneCount++\n            }\n        }\n        if oneCount > 0 {\n       \
    \     return oneCount < 2\n        }\n        return arr[j] < arr[i]\n    })\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \n    for _, v := range arr {\n        count[v]++\n    }\n\n    for _, v := range\
    \ arr {\n        if count[v] == 1 {\n            result[count[v]] = v\n      \
    \      count[v]--\n        }\n    }\n\n    return result\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make(map[int]int)\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range arr {\n        result[count[arr[i]]]\
    \ = arr[i]\n        count[arr[i]]++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make(map[int]int)\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for k := range count {\n        result[count[k]-1]\
    \ = k\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = arr[i]\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return true\n        }\n\
    \        if arr[j] == 1 {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     count[i] = 0\n    }\n    for _, v := range arr {\n        count[v] += 1\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            j\
    \ := 0\n            for k := 0; k < i; k++ {\n                if count[k] == count[j]\
    \ {\n                    j++\n                }\n            }\n            result[i],\
    \ result[j] = result[j], result[i]\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range arr {\n        result := append(result,\
    \ v)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        onesCount :=\
    \ binary.BigEndian.Uint32(result[i:]) >> 3\n        zerosCount := binary.BigEndian.Uint32(result[i:])\
    \ & 0x7\n        if onesCount > zerosCount {\n            return true\n      \
    \  }\n        if onesCount < zerosCount {\n            return false\n        }\n\
    \        return result[i] < result[j]\n    })\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n    return\
    \ result\n}\n", "    var result []int\n    var count int\n    for _, v := range\
    \ arr {\n        count += v\n    }\n    for _, v := range arr {\n        if v\
    \ == 0 {\n            continue\n        }\n        if count > 0 {\n          \
    \  count -= v\n        } else {\n            result = append(result, v)\n    \
    \    }\n    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ return onesCount < zerosCount\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 1\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 1\n        if\
    \ onesCount > zerosCount {\n            return true\n        }\n        if onesCount\
    \ < zerosCount {\n            return false\n        }\n        return arr[i] <\
    \ arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    var\
    \ result []int\n    result := sort_array_test(arr)\n    return result\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := range arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n\
    \        count[v]++\n    }\n    for i := range arr {\n        if count[i] == 0\
    \ {\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount\
    \ := binary.BigEndian.Uint16(arr[i:i+2])\n        zeroCount := binary.BigEndian.Uint16(arr[j:j+2])\n\
    \        if oneCount > zeroCount {\n            return true\n        }\n     \
    \   if oneCount < zeroCount {\n            return false\n        }\n        return\
    \ arr[j] < arr[i]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int, len(arr))\n    for _, v := range arr {\n     \
    \   count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1 {\n\
    \            result[count[v]] = v\n            count[v]--\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    result :=\
    \ sort_array_test(arr, result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := range arr {\n        result[i] = arr[i]\n\
    \    }\n    for i := range count {\n        if count[i] > 1 {\n            j :=\
    \ i\n            for k := 0; k < count[i]; k++ {\n                j--\n      \
    \          result[j] = result[j+1]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ count := make([]int, len(arr))\n    for i := range arr {\n        count[i] =\
    \ 0\n    }\n    for _, v := range arr {\n        count[v]++\n    }\n    for i\
    \ := range count {\n        if count[i] == 0 {\n            continue\n       \
    \ }\n        j := i\n        for {\n            j := j - 1\n            if count[j]\
    \ == 0 {\n                break\n            }\n            count[j]--\n     \
    \   }\n        result[i] = arr[j]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, i := range arr {\n        count[i%8]\
    \ += 1\n    }\n    for i := range arr {\n        result[count[i%8]] = i\n    \
    \    count[i%8] -= 1\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i, v := range arr {\n        count[v]++\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if count[arr[i]] == 1 {\n            result[i], result[i+1] = result[i+1],\
    \ result[i]\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    if count > 0 {\n        result = append(result,\
    \ count)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n\
    \        for _, v := range arr[i:j] {\n            if v == 1 {\n             \
    \   oneCount++\n            }\n        }\n        if oneCount > 0 {\n        \
    \    return true\n        }\n        if oneCount == 0 {\n            return arr[j]\
    \ < arr[i]\n        }\n        return false\n    })\n    return arr\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make(map[int]int, len(arr))\n\
    \    for i := range arr {\n        count[arr[i]]++\n    }\n    for i := range\
    \ arr {\n        result[count[arr[i]]]--\n        result[arr[i]]++\n    }\n  \
    \  return result\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ result := sort_array_test(arr, result)\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n", "    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j].(float64) - arr[i].(float64)\n        }\n        return arr[j].(float64)\
    \ - arr[i].(float64)\n    })\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n    return\
    \ result\n}\n", "    var result []int\n    var count int\n    for _, v := range\
    \ arr {\n        if v == 0 {\n            count++\n        } else {\n        \
    \    count = 0\n        }\n        result = append(result, v)\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        if count == 0 {\n            result = append(result,\
    \ arr[i])\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var i int\n    var j int\n    for i = 0; i < len(arr); i++ {\n        j :=\
    \ i\n        for j > 0 && arr[j-1] == arr[j] {\n            j--\n        }\n \
    \       if j > 0 {\n            result = append(result, arr[j])\n            arr[j]\
    \ = arr[i]\n            arr[i] = result[len(result)-1]\n        }\n    }\n   \
    \ return result\n}\n", "    // Your code here\n    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     count[arr[i]]++\n    }\n    for i := 0; i < len(arr); i++ {\n        result[count[arr[i]]-1]\
    \ = arr[i]\n        count[arr[i]]--\n    }\n    return result\n}\n", "    // Write\
    \ your code here\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i]\
    \ == 1 {\n            return false\n        }\n        if arr[j] == 1 {\n    \
    \        return true\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n", "    var result []int\n    var count int\n    for _, v := range arr\
    \ {\n        if v == 0 {\n            count++\n        } else {\n            if\
    \ count > 0 {\n                count -= 1\n                result = append(result,\
    \ count)\n            }\n            count = 0\n        }\n        result = append(result,\
    \ v)\n    }\n    if count > 0 {\n        result = append(result, count)\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for i\
    \ := range count {\n        result[i] = i\n    }\n    for i := range count {\n\
    \        count[i] = 0\n    }\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        result[count[i]] = arr[i]\n    }\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k]&1 == 1 {\n                onesCount++\n           \
    \ }\n        }\n        if onesCount > 0 {\n            return arr[j] > arr[i]\n\
    \        }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n", "  \
    \  // Your code here\n    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count[i] = 0\n    }\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if count[i] > 1 {\n            j := i\n            for k := 0; k\
    \ < count[i]; k++ {\n                j--\n                result[j] = result[j+1]\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    result := sort_array_helper(arr)\n    return result\n}\n", "    result :=\
    \ make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        count :=\
    \ 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n \
    \               count++\n            }\n        }\n        result[i] = count\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        if count[i] == 0 {\n            continue\n\
    \        }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n\
    \        }\n        if j == -1 {\n            j = i\n        }\n        result[i]\
    \ = arr[j]\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for k\
    \ := i; k < j; k++ {\n            if arr[k] == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j] - arr[i]\n        }\n        return arr[j] - arr[i]\n    })\n    return\
    \ arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n\
    \        if arr[i] == 1 {\n            return true\n        }\n        if arr[j]\
    \ == 1 {\n            return false\n        }\n        return arr[i]-arr[j] >=\
    \ 0\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    var result []int\n    for\
    \ _, v := range arr {\n        result := sort_array_test(arr, v)\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count > 1 {\n            result = append(result,\
    \ count-1)\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i])\
    \ >> 63\n        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                onesCount++\n         \
    \   }\n        }\n        if onesCount > 0 {\n            return onesCount < len(arr)\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "  \
    \  result := make([]int, len(arr))\n    count := make(map[int]int)\n    for _,\
    \ v := range arr {\n        count[v]++\n    }\n    for _, v := range arr {\n \
    \       if count[v] == 1 {\n            result[count[v]] = v\n            count[v]--\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n\
    }\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \n    for i := range arr {\n        count[arr[i]]++\n    }\n\n    for i := range\
    \ count {\n        result[count[i]-1] = i\n    }\n\n    for i := range result\
    \ {\n        result[i] = arr[i]\n    }\n\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    result\
    \ := sort_array_test(arr, result)\n    return result\n}\n", "    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      count := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                count++\n            }\n        }\n        result[i]\
    \ = count\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make(map[int]int)\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[count[v]] = v\n            count[v]--\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[arr[i]]++\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        result[i] = i\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[arr[i]] == 1 {\n            j := 0\n            for k := i; k < len(arr);\
    \ k++ {\n                if arr[k] == arr[i] {\n                    j++\n    \
    \            }\n            }\n            for k := i; k < len(arr); k++ {\n \
    \               if arr[k] > arr[i] {\n                    result[k] = arr[j]\n\
    \                    j++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        ones, _ := strconv.Atoi(arr[i].String())\n        zeros1,\
    \ _ := strconv.Atoi(arr[j].String())\n        ones, zeros1 := ones-zeros1, zeros1-ones\n\
    \        if ones == 0 {\n            return zeros1 < 0\n        }\n        return\
    \ ones > 0\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                onesCount++\n         \
    \   }\n        }\n        if onesCount > 0 {\n            return onesCount > arr[j].([]int)[0].([]int)[1]\n\
    \        }\n        return arr[j].([]int)[0].([]int)[1] > arr[j].([]int)[0].([]int)[0]\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[arr[i]]++\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        result[i] = i\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[arr[i]] == 1 {\n            result[i], result[i+1] = result[i+1], result[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[i]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    result :=\
    \ sort_array_test(arr, result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    i := 0\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        result[i]\
    \ = v\n        i++\n    }\n    for _, v := range count {\n        if v > 1 {\n\
    \            i -= v\n        }\n    }\n    for _, v := range result {\n      \
    \  i -= v\n    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                onesCount++\n         \
    \   }\n        }\n        if onesCount > 0 {\n            return onesCount < len(arr)\n\
    \        } else {\n            return arr[i] < arr[j]\n        }\n    })\n   \
    \ return arr\n}\n", "    var result []int\n    for _, v := range arr {\n     \
    \   result := make([]int, len(arr))\n        for i := range arr {\n          \
    \  if arr[i] == 1 {\n                result[i] = 1\n            } else {\n   \
    \             result[i] = arr[i]\n            }\n        }\n        sort.Ints(result)\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i, v :=\
    \ range arr {\n        count[v]++\n    }\n    for i := range count {\n       \
    \ result[i] = i\n    }\n    for i := range count {\n        count[i] = 0\n   \
    \ }\n    for i := range count {\n        if count[i] > 0 {\n            count[i]\
    \ -= 1\n            j := i\n            for k := i + 1; k < len(count); k++ {\n\
    \                if count[k] == 0 {\n                    count[k] = 1\n      \
    \              result[j] = k\n                    j++\n                }\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     count[i] = 0\n    }\n    for _, v := range arr {\n        count[v] += 1\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            j\
    \ := i\n            for k := i + 1; k < len(arr); k++ {\n                if count[k]\
    \ == 1 {\n                    result[j] = arr[k]\n                    count[j]\
    \ = 0\n                    j = k\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i]) >> 32\n\
    \        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n        if onesCount\
    \ > zerosCount {\n            return true\n        }\n        if onesCount < zerosCount\
    \ {\n            return false\n        }\n        return arr[i] < arr[j]\n   \
    \ })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count :=\
    \ make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n   \
    \ }\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < count[i]; j++\
    \ {\n            result[i] = arr[j]\n            arr[j] = arr[i]\n           \
    \ arr[i] = result[i]\n        }\n    }\n    return result\n}\n", "    // Write\
    \ your code here\n    sort.Slice(arr, func(i, j int) bool {\n        ones1 :=\
    \ arr[i] & 1\n        ones2 := arr[j] & 1\n        if ones1 > ones2 {\n      \
    \      return true\n        }\n        if ones1 < ones2 {\n            return\
    \ false\n        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n",
  "    // Your code here\n    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n\
    \    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n  \
    \  result := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result\
    \ := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result :=\
    \ make([]int, len(arr))\n    result := make([]int, len(arr))\n    result := make([]int,\
    \ len(arr))\n    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n\
    \    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n  \
    \  result := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result\
    \ := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result :=\
    \ make([]int, len(arr))\n    result := make([]int, len(arr))\n    result := make([]int,\
    \ len(arr))\n    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n\
    \    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n  \
    \  result := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result\
    \ := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result :=\
    \ make([]int, len(arr))\n    result := make([]int, len(arr))\n    result := make([]int,\
    \ len(arr))\n    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n\
    \    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n  \
    \  result := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result\
    \ := make([]int, len(arr))\n    result := make([]int, len(arr))\n    result :=\
    \ make([]int, len(arr))\n    result := make([]int, len(arr))\n    result := make([]int,\
    \ len(arr))\n    result := make([]int, len(arr))\n    ", "    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for i := range arr {\n      \
    \  count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return true\n        }\n\
    \        if arr[j] == 1 {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for _, v := range arr[i:j]\
    \ {\n            if v == 1 {\n                onesCount++\n            }\n   \
    \     }\n        if onesCount == 0 {\n            return arr[i] < arr[j]\n   \
    \     }\n        return onesCount < len(arr) / 2 && onesCount > len(arr) / 4\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return false\n        }\n\
    \        if arr[j] == 1 {\n            return true\n        }\n        return\
    \ arr[i] > arr[j]\n    })\n    return arr\n}\n", "    var result []int\n    for\
    \ _, v := range arr {\n        result := make([]int, len(arr))\n        copy(result,\
    \ arr)\n        sort.Sort(result)\n        for i := range result {\n         \
    \   if result[i] == v {\n                result[i] = -1\n            }\n     \
    \   }\n        result = append(result, v)\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    i\
    \ := 0\n    for _, v := range arr {\n        count[v]++\n    }\n    for _, v :=\
    \ range arr {\n        result[i] = v\n        i++\n    }\n    for i := 0; i <\
    \ len(arr); i++ {\n        for j := 0; j < count[i]; j++ {\n            k := j\n\
    \            for k >= 0 && arr[i] > arr[k] {\n                arr[i], arr[k] =\
    \ arr[k], arr[i]\n            }\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n    \
    \    if count[i] > 1 {\n            result[i] = i\n        }\n    }\n    for i\
    \ := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n\
    \            return true\n        }\n        if arr[j] == 1 {\n            return\
    \ false\n        }\n        return arr[i]-arr[j] <= 0\n    })\n    return arr\n\
    }\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n    \
    \    onesCount := binary.BigEndian.Uint16(arr[i*2]) << 8 + binary.BigEndian.Uint16(arr[i*2+1])\
    \ >> 8\n        decCount := arr[j*2] - arr[j*2+1]\n        return onesCount >\
    \ decCount\n    })\n    return arr\n}\n", "    var result []int\n    result :=\
    \ sort_array_test(arr)\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make(map[int]int)\n    for i := range\
    \ arr {\n        count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i]) >> 63\n\
    \        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n        return onesCount\
    \ > zerosCount\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    //\
    \ Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        ones, _ :=\
    \ strconv.Atoi(arr[i].String())\n        ones, _ = strconv.Atoi(arr[j].String())\n\
    \        return ones < 0\n    })\n    return arr\n}\n", "    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n \
    \   })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    result\
    \ := sort_array_test(arr, result)\n    return result\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for i, v := range arr {\n        result[i] = v\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if count[i] == 0 {\n            result[i] =\
    \ 0\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i\
    \ + 1; j < len(arr); j++ {\n            if count[arr[i]] > count[arr[j]] {\n \
    \               tmp := arr[i]\n                arr[i] = arr[j]\n             \
    \   arr[j] = tmp\n            }\n        }\n    }\n    return result\n}\n", " \
    \   // Your code here\n    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n  \
    \  }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n      \
    \      result[i], result[i+1] = result[i+1], result[i]\n        }\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    i := 0\n    for _, v := range arr {\n        count[v]++\n   \
    \ }\n    for _, v := range arr {\n        result[i] = v\n        i++\n    }\n\
    \    for _, v := range arr {\n        if count[v] == 1 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    result := sort_array_test(arr)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = 0\n    }\n    for i :=\
    \ range count {\n        result[i] = arr[i]\n    }\n    for i := range count {\n\
    \        if count[i] > 1 {\n            j := i\n            for k := i + 1; k\
    \ < len(count); k++ {\n                if count[k] == 1 {\n                  \
    \  result[j] = result[k]\n                    count[j]--\n                   \
    \ j++\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(arr))\n    for i := range arr {\n       \
    \ result[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        onesCount := binary.BigEndian.Uint32(arr[i]) >> 32\n        zerosCount\
    \ := binary.BigEndian.Uint32(arr[j]) >> 32\n        if onesCount > zerosCount\
    \ {\n            return true\n        }\n        if onesCount < zerosCount {\n\
    \            return false\n        }\n        return arr[i] < arr[j]\n    })\n\
    \    return arr\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n",
  "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount\
    \ := binary.BigEndian.Uint32(arr[i]) >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j])\
    \ >> 32\n        return onesCount > zerosCount\n    })\n    return arr\n}\n",
  "    result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i]) >> 32\n\
    \        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n        if onesCount\
    \ > zerosCount {\n            return true\n        }\n        if onesCount < zerosCount\
    \ {\n            return false\n        }\n        return arr[i] < arr[j]\n   \
    \ })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count :=\
    \ make([]int, len(arr))\n    for i := range arr {\n        count[i] = 0\n    }\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for i := range count\
    \ {\n        result[count[i]] = arr[i]\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var count int\n    for _, v := range arr {\n        count\
    \ += v\n    }\n    for _, v := range arr {\n        if v > 0 {\n            result\
    \ += append([]int{v}, count-int(v)+len(result)-1)\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result\
    \ := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for i,\
    \ v := range arr {\n        result[i] = v\n    }\n    for i, v := range count\
    \ {\n        if v == 0 {\n            continue\n        }\n        j := i\n  \
    \      for k := 0; k < v; k++ {\n            j = j + 1\n        }\n        for\
    \ k := 0; k < v; k++ {\n            tmp := result[j]\n            result[j] =\
    \ result[i]\n            result[i] = tmp\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    sort.Slice(arr, func(i, j int) bool {\n\
    \        oneCount := 0\n        for k := 0; k < len(arr); k++ {\n            if\
    \ arr[k] == 1 {\n                oneCount++\n            }\n        }\n      \
    \  if oneCount > 0 {\n            return oneCount > arr[j].(float64) - arr[i].(float64)\n\
    \        }\n        return arr[j].(float64) - arr[i].(float64)\n    })\n    return\
    \ arr\n}\n", "    var result []int\n    var count int\n    for _, v := range arr\
    \ {\n        if v == 0 {\n            count++\n        } else {\n            count\
    \ = 0\n        }\n        result = append(result, v)\n        if count > 1 {\n\
    \            result = append(result, count)\n        }\n    }\n    return sort_array_test(result)\n\
    }\n", "    var result []int\n    var count int\n    for _, v := range arr {\n\
    \        if v == 0 {\n            count++\n        } else {\n            count\
    \ = 0\n        }\n        result = append(result, v)\n    }\n    for _, v := range\
    \ arr {\n        if v == 0 {\n            continue\n        }\n        if count\
    \ == 0 {\n            result = append(result, v)\n            continue\n     \
    \   }\n        if v < 0 {\n            result = append(result, v)\n          \
    \  continue\n        }\n        if v > 0 {\n            count--\n        }\n \
    \       result = append(result, v)\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var count int\n    for _, v := range arr {\n        count += v\n\
    \    }\n    for _, v := range arr {\n        if v == 0 {\n            continue\n\
    \        }\n        if count > 0 {\n            count -= v\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := range arr {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v] += 1\n    }\n    for i := range arr {\n        if count[i]\
    \ > 1 {\n            result[i] = arr[i]\n        }\n    }\n    for i := range\
    \ arr {\n        if count[i] == 1 {\n            result[i] = arr[i]\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        ones, _ := strconv.Atoi(arr[i].String())\n        zeros1,\
    \ _ := strconv.Atoi(arr[j].String())\n        ones, zeros1 := ones-zeros1, zeros1-ones\n\
    \        if ones == 0 {\n            return zeros1 < 0\n        }\n        return\
    \ ones > 0\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[i]\
    \ = 0\n    }\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for {\n            j += 1\n            if count[j]\
    \ == 0 {\n                break\n            }\n            count[j] -= 1\n  \
    \      }\n        result[i] = arr[j]\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var count int\n    for _, v := range arr {\n        if v ==\
    \ 0 {\n            count++\n        } else {\n            if count == 0 {\n  \
    \              result = append(result, v)\n            } else {\n            \
    \    count -= 1\n                result = append(result, v)\n            }\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range arr {\n        result[count[arr[i]]] = arr[i]\n   \
    \     count[arr[i]]++\n    }\n    return result\n}\n", "    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i]-arr[j] > 0\n    })\n    return arr\n}\n", " \
    \   var result []int\n    var count int\n    for _, v := range arr {\n       \
    \ count += v\n    }\n    for _, v := range arr {\n        if v == 0 {\n      \
    \      continue\n        }\n        if count > 0 {\n            count -= v\n \
    \       } else {\n            result = append(result, v)\n        }\n    }\n \
    \   return result\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k] == 1 {\n                onesCount++\n            }\n\
    \        }\n        if onesCount > 0 {\n            return onesCount > arr[j].(float64)\
    \ - arr[i].(float64)\n        }\n        return arr[j].(float64) - arr[i].(float64)\n\
    \    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n      \
    \      result[i], result[i+1] = result[i+1], result[i]\n        }\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Write your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        if arr[i] == 1 {\n            return true\n \
    \       }\n        if arr[j] == 1 {\n            return false\n        }\n   \
    \     return arr[i]-arr[j] >= 0\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount < zerosCount {\n            return true\n        }\n        if\
    \ onesCount > zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        oneCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                oneCount++\n          \
    \  }\n        }\n        if oneCount > 0 {\n            return oneCount < len(arr)\n\
    \        } else {\n            return arr[j] < arr[i]\n        }\n    })\n   \
    \ return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n \
    \   return arr\n}\n", "    // Your code here\n    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range arr {\n        result[i] = arr[i]\n    }\n    for i\
    \ := range count {\n        if count[i] > 1 {\n            sort.Ints(result[i:])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[i]\
    \ = 0\n    }\n    for _, v := range arr {\n        count[v]++\n    }\n    for\
    \ i := range count {\n        result[i] = arr[i]\n    }\n    for i := range count\
    \ {\n        if count[i] > 1 {\n            j := i\n            for k := 0; k\
    \ < count[i]; k++ {\n                j--\n                result[j] = result[j+1]\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += v\n    }\n \
    \   for _, v := range arr {\n        if v == 0 {\n            continue\n     \
    \   }\n        if count > 0 {\n            count -= v\n        } else {\n    \
    \        result = append(result, v)\n            count = 0\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k] == 1 {\n                onesCount++\n            }\n\
    \        }\n        if onesCount == 1 {\n            return arr[j] < arr[i]\n\
    \        }\n        return onesCount < len(arr)\n    })\n    return arr\n}\n",
  "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount\
    \ := binary.BigEndian.Uint32(arr[i]) >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j])\
    \ >> 32\n        if onesCount > zerosCount {\n            return true\n      \
    \  }\n        if onesCount < zerosCount {\n            return false\n        }\n\
    \        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n",
  "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n", "    var\
    \ result []int\n    var count int\n    for _, v := range arr {\n        if v ==\
    \ 0 {\n            count++\n        } else {\n            count = 0\n        }\n\
    \        result = append(result, v)\n    }\n    for _, v := range arr {\n    \
    \    if count == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var count int\n    for _,\
    \ v := range arr {\n        if v == 0 {\n            count++\n        } else {\n\
    \            count = 0\n        }\n        result = append(result, v)\n    }\n\
    \    for _, v := range arr {\n        if count == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    var result []int\n    var count int\n    for _, v\
    \ := range arr {\n        count += v\n    }\n    for _, v := range arr {\n   \
    \     if v == 0 {\n            continue\n        }\n        if count == 0 {\n\
    \            result = append(result, v)\n            count = 0\n            continue\n\
    \        }\n        if v > 0 {\n            count -= 1\n        } else {\n   \
    \         count += 1\n        }\n        result = append(result, v)\n    }\n \
    \   return result\n}\n", "    var result []int\n    var count int\n    for _,\
    \ v := range arr {\n        if v == 0 {\n            count++\n        } else {\n\
    \            count = 0\n        }\n        result = append(result, v)\n    }\n\
    \    for i := len(arr) - 1; i >= 0; i-- {\n        if count == 0 {\n         \
    \   result = append(result, arr[i])\n        } else {\n            count = 0\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var count\
    \ int\n    for _, v := range arr {\n        if v == 0 {\n            count++\n\
    \        } else {\n            count = 0\n        }\n        result = append(result,\
    \ v)\n    }\n    for i := 0; i < len(arr); i++ {\n        if count == 0 {\n  \
    \          result = append(result, arr[i])\n        }\n        if count == 1 {\n\
    \            result = append(result, arr[i]-1)\n        }\n        if count ==\
    \ 2 {\n            result = append(result, arr[i]-2)\n        }\n        if count\
    \ == 3 {\n            result = append(result, arr[i]-3)\n        }\n        if\
    \ count == 4 {\n            result = append(result, arr[i]-4)\n        }\n   \
    \     if count == 5 {\n            result = append(result, arr[i]-5)\n       \
    \ }\n        if count == 6 {\n            result = append(result, arr[i]-6)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for k, v := range count {\n        result[k] = v\n    }\n    for i\
    \ := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n   \
    \         if count[arr[i]] > count[arr[j]] {\n                tmp := arr[i]\n\
    \                arr[i] = arr[j]\n                arr[j] = tmp\n            }\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range arr {\n        result[i] = arr[i]\n    }\n    for i\
    \ := range count {\n        if count[i] > 1 {\n            j := i\n          \
    \  for k := i - 1; k >= 0; k-- {\n                if count[k] == 1 {\n       \
    \             result[j] = result[k]\n                    count[j]--\n        \
    \            break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int,\
    \ len(arr))\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range arr {\n        result[count[arr[i]]] = arr[i]\n        count[arr[i]]++\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ arr {\n        result := append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for i\
    \ := range count {\n        result[i] = i\n    }\n    for i := range count {\n\
    \        count[i] = 0\n    }\n    for i := range count {\n        if count[i]\
    \ > 0 {\n            j := i\n            for k := 0; k < count[i]; k++ {\n   \
    \             j--\n                result[j] = result[j+1]\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    for _, v\
    \ := range arr {\n        result := append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    i := 0\n    for _, v := range arr {\n        count[v]++\n   \
    \ }\n    for _, v := range arr {\n        result[i] = v\n        i++\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := 0; j < count[i]; j++ {\n\
    \            k := j\n            for k >= 0 && arr[i] > arr[k] {\n           \
    \     result[i] = arr[k]\n                k--\n            }\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += v\n    }\n \
    \   for _, v := range arr {\n        if v == 0 {\n            continue\n     \
    \   }\n        if count > 0 {\n            count -= v\n        } else {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range arr {\n        result := append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            j\
    \ := i\n            for k := i + 1; k < len(arr); k++ {\n                if count[k]\
    \ == 1 {\n                    result[j] = arr[k]\n                    count[j]--\n\
    \                    j++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n",
  "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := range arr {\n        count[i] = 0\n    }\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        if count[i]\
    \ == 0 {\n            continue\n        }\n        j := i\n        for k := 0;\
    \ k < count[i]; k++ {\n            j = j - 1\n            if j == -1 {\n     \
    \           break\n            }\n            result[j] = arr[j]\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := range arr {\n        result[i] = arr[i]\n\
    \    }\n    for i := range count {\n        if count[i] > 1 {\n            j :=\
    \ i\n            for k := i - 1; k >= 0; k-- {\n                if count[k] ==\
    \ 1 {\n                    result[j] = result[k]\n                    count[j]--\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int,\
    \ len(arr))\n    for _, v := range arr {\n        count[v]++\n    }\n    for _,\
    \ v := range arr {\n        if count[v] == 1 {\n            result[count[v]] =\
    \ v\n            count[v]--\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i]\
    \ == 1 {\n            return true\n        }\n        if arr[j] == 1 {\n     \
    \       return false\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n\
    \        onesCount := binary.BigEndian.Uint32(arr[i]) >> 3\n        zerosCount\
    \ := binary.BigEndian.Uint32(arr[j]) >> 3\n        if onesCount > zerosCount {\n\
    \            return true\n        }\n        if onesCount < zerosCount {\n   \
    \         return false\n        }\n        return arr[i] < arr[j]\n    })\n  \
    \  return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ count := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(count); i++ {\n        result[i] = 0\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n      \
    \      result[count[arr[i]]] = arr[i]\n            count[arr[i]]++\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k]&(1<<uint(k)) == 0 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 1 {\n            return true\n\
    \        }\n        if onesCount == 1 {\n            return arr[j] >= arr[i]\n\
    \        }\n        return false\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n   \
    \     for k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n        \
    \        oneCount++\n            }\n        }\n        if oneCount > 0 {\n   \
    \         return arr[j] > arr[i]\n        }\n        return arr[j] < arr[i]\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        if count[i] == 0 {\n            continue\n\
    \        }\n        j := i\n        for k := i - 1; k >= 0; k-- {\n          \
    \  if count[k] == 0 {\n                continue\n            }\n            if\
    \ count[k] > count[j] {\n                result[j] = arr[k]\n                count[j]--\n\
    \            } else {\n                j--\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i]) >> 63\n\
    \        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n        if onesCount\
    \ > zerosCount {\n            return true\n        }\n        if onesCount < zerosCount\
    \ {\n            return false\n        }\n        return arr[i] < arr[j]\n   \
    \ })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count :=\
    \ make([]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n \
    \   }\n    for i := range count {\n        result[i] = i\n    }\n    for i :=\
    \ range count {\n        count[i] = count[i] / 2\n    }\n    for i := range count\
    \ {\n        result[count[i]] = i\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    result := make([]int, len(arr))\n    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        oneCount\
    \ = 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n\
    \                oneCount++\n            }\n        }\n        if oneCount > 0\
    \ {\n            result[i] = oneCount\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i, v := range arr {\n        count[v]++\n    }\n    for i := range arr {\n \
    \       result[i] = arr[i]\n    }\n    for i := range count {\n        if count[i]\
    \ == 1 {\n            j := i\n            for ; j < len(arr) && count[j] == 1;\
    \ j++ {\n            }\n            result[i], result[j] = result[j], result[i]\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var count\
    \ int\n    for _, v := range arr {\n        if v == 0 {\n            count++\n\
    \        } else {\n            count = 0\n        }\n        result = append(result,\
    \ v)\n    }\n    for i := 0; i < len(arr); i++ {\n        if count == 0 {\n  \
    \          result = append(result, arr[i])\n        }\n        if count == 1 {\n\
    \            result := append(result, arr[i])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    i := 0\n    for _, v := range arr {\n        count[v]++\n    }\n    for _,\
    \ v := range arr {\n        result[i] = v\n        i++\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := 0; j < count[i]; j++ {\n            k\
    \ := j\n            for k >= 0 && arr[k] == arr[k-1] {\n                k--\n\
    \            }\n            result[i] = arr[k]\n            count[i]--\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[i]\
    \ = 0\n    }\n    for _, i := range arr {\n        count[i] += 1\n    }\n    for\
    \ i := range count {\n        if count[i] > 1 {\n            result[i] = i\n \
    \       }\n    }\n    for i := range count {\n        if count[i] == 1 {\n   \
    \         result[i] = arr[i]\n        }\n    }\n    return result\n}\n", "   \
    \ // Your code here\n    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for i\
    \ := range count {\n        result[i] = i\n    }\n    for i := range count {\n\
    \        count[i] = 0\n    }\n    for i := range result {\n        if count[i]\
    \ > 0 {\n            result[i] = i\n            count[i]--\n        }\n    }\n\
    \    for i := range count {\n        if count[i] > 0 {\n            result[i]\
    \ = i\n            count[i]--\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(arr))\n    for i := range arr {\n        ones, _\
    \ := countOnes(arr[i])\n        result[i] = arr[i]\n        if ones > 0 {\n  \
    \          result[i] = arr[i] + ones\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    result :=\
    \ sort_array_test(arr, result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    var result []int\n    result := make([]int, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        count := 0\n        for j := 0; j < len(arr); j++ {\n\
    \            if arr[j] == 1 {\n                count++\n            }\n      \
    \  }\n        if count == 0 {\n            result[i] = arr[i]\n        } else\
    \ {\n            result := make([]int, len(arr))\n            result := make([]int,\
    \ len(arr))\n            for j := 0; j < len(arr); j++ {\n                if arr[j]\
    \ == 1 {\n                    result[j] = arr[j]\n                }\n        \
    \    }\n            sort.Ints(result)\n            result[i] = result[len(result)-1]\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        count[i] = 0\n    }\n    for i := 0; i\
    \ < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if count[arr[i]] == 1 {\n            result[i] = arr[i]\n       \
    \ }\n    }\n    return result\n}\n", "    var result []int\n    var count int\n\
    \    for _, v := range arr {\n        count += v\n    }\n    for _, v := range\
    \ arr {\n        if v == 0 {\n            continue\n        }\n        if count\
    \ > 0 {\n            count -= v\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ count int\n    for _, v := range arr {\n        if v == 0 {\n            count++\n\
    \        } else {\n            result = append(result, v)\n        }\n    }\n\
    \    for i := 0; i < count; i++ {\n        result = append(result, 0)\n    }\n\
    \    for _, v := range arr {\n        for i := 0; i < count; i++ {\n         \
    \   if v&1 == 1 {\n                result[i] = result[i] + 1\n            }\n\
    \            v >>= 1\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        if count[i] > 1 {\n            result[i]\
    \ = i\n        }\n    }\n    for i := range arr {\n        if count[arr[i]] ==\
    \ 1 {\n            result[i] = arr[i]\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
