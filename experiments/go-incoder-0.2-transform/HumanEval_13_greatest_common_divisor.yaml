name: HumanEval_13_greatest_common_divisor
language: go_test.go
prompt: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>>\
  \ greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n\
  // 5\nfunc greatest_common_divisor(a int, b int) int {\n"
tests: "func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
  \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
  \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a%b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if a < b {\n        a, b = b, a\n    }\n    \n    d := 1\n\
    \    \n    for i := 1; i <= b; i++ {\n        if a % i == 0 {\n            d =\
    \ i\n        }\n    }\n    \n    return d\n}\n", "    if b == 0 {\n        return\
    \ a\n    }\n    greatest_common_divisor_helper := greatest_common_divisor_helper{\n\
    \        a:   a,\n        b:   b,\n        gcd: 0,\n    }\n    greatest_common_divisor_helper.gcd\
    \ = greatest_common_divisor_helper.b\n    greatest_common_divisor_helper.a = greatest_common_divisor_helper.b\n\
    \    greatest_common_divisor_helper.b = greatest_common_divisor_helper.a\n   \
    \ greatest_common_divisor_helper.gcd = greatest_common_divisor_helper.gcd\n  \
    \  return greatest_common_divisor_helper.gcd\n}\n\ntype greatest_common_divisor_helper ",
  "    if a < b {\n        a, b = b, a\n    }\n    for {\n        if a > b {\n   \
    \         break\n        }\n        a -= b\n    }\n    return a\n}\n", "    if\
    \ b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b, a %\
    \ b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    gcd := greatest_common_divisor(b,\
    \ a % b)\n    if a > gcd {\n        return a\n    }\n    return gcd\n}\n", " \
    \   if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    if a == 0 {\n \
    \       return b\n    }\n    r := greatest_common_divisor(b, a % b)\n    return\
    \ r\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a%b)\n}\n", "    if b == 0 {\n        return a\n    }\n    c := a\n    d :=\
    \ b\n    while c != 0 {\n        c %= d\n        d *= 10\n    }\n    return d\n\
    }\n", "    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
