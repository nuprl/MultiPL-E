language: go_test.go
name: HumanEval_41_car_race_collision
results:
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a map of cars indexed by their current position\n\
    \    cars := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        cars[i]\
    \ = true\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding2 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding2[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding3 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding3[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding4 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding4[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding5 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding5[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding6 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding6[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding7 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding7[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding8 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding8[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding9 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        colliding9[i]\
    \ = false\n    }\n\n    // Initialize a map of cars indexed by their current position\n\
    \    colliding10 := make(map[int]bool)\n    for i := 0; i < n; i++ {\n       \
    \ colliding10[i] = false\n    }\n\n    // Initialize a map of cars indexed by\
    \ their current position\n    colliding11 := make(map[int]bool)\n    for i :=\
    \ 0; i < n; i++ {\n        colliding11[i] = false\n    }\n\n    // \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_5l9j69t_test.go:90:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i) == car_race_collision_test(j)\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga3cw_se_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j,true)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsozgeoxi_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i+1, j+1, n)\
    \ == true {\n                collisions++\n            }\n        }\n    }\n \
    \   return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu92ko8__test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i) == car_race_collision_test(j)\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga3cw_se_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd42ydk39_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a collision counter.\n    var collisions int\n\
    \n    // Initialize a vector to hold the cars.\n    var cars []Car\n\n    // Initialize\
    \ a vector to hold the cars that are colliding.\n    var colliding []Car\n\n \
    \   // Initialize a vector to hold the cars that are colliding with each other.\n\
    \    var colliding2 []Car\n\n    // Initialize a vector to hold the cars that\
    \ are colliding with each other and are moving left to right.\n    var colliding3\
    \ []Car\n\n    // Initialize a vector to hold the cars that are colliding with\
    \ each other and are moving right to left.\n    var colliding4 []Car\n\n    //\
    \ Initialize a vector to hold the cars that are colliding with each other and\
    \ are moving left to right and are moving right to left.\n    var colliding5 []Car\n\
    \n    // Initialize a vector to hold the cars that are colliding with each other\
    \ and are moving left to right and are moving right to left and are moving left\
    \ to right.\n    var colliding6 []Car\n\n    // Initialize a vector to hold the\
    \ cars that are colliding with each other and are moving left to right and are\
    \ moving right to left and are moving left to right and are moving right to left.\n\
    \    var colliding7 []Car\n\n    // Initialize a vector to hold the cars that\
    \ are colliding with each other and are moving left to right and are moving right\
    \ to left and are moving left to right and are moving right to left and are moving\
    \ left to right.\n    var colliding8 []Car\n\n    // Initialize a vector to hold\
    \ the cars that are colliding with each other and are moving left to right and\
    \ are moving right to left and are moving left to right and are moving right to\
    \ left and are moving left to right and are moving right to left.\n    var colliding9\
    \ []Car\n\n    // Initialize a vector to hold the cars that are colliding with\
    \ each other and are moving left to right and are moving right to left and are\
    \ moving left to right and are moving right to left and are moving left to right\
    \ and are moving right to left and are moving left to right.\n    var colliding10\
    \ []Car\n\n    // Initialize a vector to hold the cars that are colliding with\
    \ each other and are moving left to right and are moving right to left and are\
    \ moving left to right and are moving right to left and are moving left to right\
    \ and are moving right to left and are moving left to right and are moving right\
    \ to left.\n    var colliding11 []Car\n\n    // Initialize a vector to hold the\
    \ cars that are colliding with each other and are moving left to right and are\
    \ moving \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq8nfelrg_test.go:57:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhxf1uyr_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a table of collisions\n    collisions := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        // Initialize a table of collisions\n \
    \       collisions[i] = 0\n    }\n\n    // Initialize a table of collisions\n\
    \    collisions[0] = 1\n\n    // Initialize a table of collisions\n    collisions[1]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[2] = 1\n\n  \
    \  // Initialize a table of collisions\n    collisions[3] = 1\n\n    // Initialize\
    \ a table of collisions\n    collisions[4] = 1\n\n    // Initialize a table of\
    \ collisions\n    collisions[5] = 1\n\n    // Initialize a table of collisions\n\
    \    collisions[6] = 1\n\n    // Initialize a table of collisions\n    collisions[7]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[8] = 1\n\n  \
    \  // Initialize a table of collisions\n    collisions[9] = 1\n\n    // Initialize\
    \ a table of collisions\n    collisions[10] = 1\n\n    // Initialize a table of\
    \ collisions\n    collisions[11] = 1\n\n    // Initialize a table of collisions\n\
    \    collisions[12] = 1\n\n    // Initialize a table of collisions\n    collisions[13]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[14] = 1\n\n \
    \   // Initialize a table of collisions\n    collisions[15] = 1\n\n    // Initialize\
    \ a table of collisions\n    collisions[16] = 1\n\n    // Initialize a table of\
    \ collisions\n    collisions[17] = 1\n\n    // Initialize a table of collisions\n\
    \    collisions[18] = 1\n\n    // Initialize a table of collisions\n    collisions[19]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[20] = 1\n\n \
    \   // Initialize a table of collisions\n    collisions[21] = 1\n\n    // Initialize\
    \ a table of collisions\n    collisions[22] = 1\n\n    // Initialize a table of\
    \ collisions\n    collisions[23] = 1\n\n    // Initialize a table of collisions\n\
    \    collisions[24] = 1\n\n    // Initialize a table of collisions\n    collisions[25]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[26] = 1\n\n \
    \   // Initialize a table of collisions\n    collisions[27] = 1\n\n    // Initialize\
    \ a table of collisions\n    collisions[28] = 1\n\n    // Initialize a table of\
    \ collisions\n    collisions[29] = 1\n\n    // Initialize a table of collisions\n\
    \    collisions[30] = 1\n\n    // Initialize a table of collisions\n    collisions[31]\
    \ = 1\n\n    // Initialize a table of collisions\n    collisions[32] = 1\n\n \
    \   // Initialize a table of collisions\n    \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmji06f28_test.go:125:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd42ydk39_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_9f7pjc_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j), j), i)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdwxx_olk_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a collision matrix.\n    collision := make([][]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        collision[i] = make([]int, n)\n  \
    \      for j := 0; j < n; j++ {\n            collision[i][j] = 0\n        }\n\
    \    }\n\n    // Initialize a collision counter.\n    collision_count := 0\n\n\
    \    // Initialize a car array.\n    cars := make([]Car, n)\n\n    // Initialize\
    \ a car array.\n    cars_right := make([]Car, n)\n\n    // Initialize a car array.\n\
    \    cars_left := make([]Car, n)\n\n    // Initialize a car array.\n    cars_right\
    \ := make([]Car, n)\n\n    // Initialize a car array.\n    cars_left := make([]Car,\
    \ n)\n\n    // Initialize a car array.\n    cars_right := make([]Car, n)\n\n \
    \   // Initialize a car array.\n    cars_left := make([]Car, n)\n\n    // Initialize\
    \ a car array.\n    cars_right := make([]Car, n)\n\n    // Initialize a car array.\n\
    \    cars_left := make([]Car, n)\n\n    // Initialize a car array.\n    cars_right\
    \ := make([]Car, n)\n\n    // Initialize a car array.\n    cars_left := make([]Car,\
    \ n)\n\n    // Initialize a car array.\n    cars_right := make([]Car, n)\n\n \
    \   // Initialize a car array.\n    cars_left := make([]Car, n)\n\n    // Initialize\
    \ a car array.\n    cars_right := make([]Car, n)\n\n    // Initialize a car array.\n\
    \    cars_left := make([]Car, n)\n\n    // Initialize a car array.\n    cars_right\
    \ := make([]Car, n)\n\n    // Initialize a car array.\n    cars_left := make([]Car,\
    \ n)\n\n    // Initialize a car array.\n    cars_right := make([]Car, n)\n\n \
    \   // Initialize a car array.\n    cars_left := make([]Car, n)\n\n    // Initialize\
    \ a car array.\n    cars_right := make([]Car, n)\n\n    // Initialize a car array.\n\
    \    cars_left := make([]Car, n)\n\n    // Initialize a car array.\n    cars_right\
    \ := make([]Car, n)\n\n    // Initialize a car array.\n    cars_left := make([]Car,\
    \ n)\n\n    // Initialize a car \nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyza8br3g_test.go:99:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a table of booleans indicating whether a car collides\
    \ with any\n    // other car.\n    var collides [n - 1][n - 1]bool\n\n    // Initialize\
    \ a table of booleans indicating whether a car collides with any\n    // other\
    \ car.\n    var collides_2 [n - 1][n - 1]bool\n\n    // Initialize a table of\
    \ booleans indicating whether a car collides with any\n    // other car.\n   \
    \ var collides_3 [n - 1][n - 1]bool\n\n    // Initialize a table of booleans indicating\
    \ whether a car collides with any\n    // other car.\n    var collides_4 [n -\
    \ 1][n - 1]bool\n\n    // Initialize a table of booleans indicating whether a\
    \ car collides with any\n    // other car.\n    var collides_5 [n - 1][n - 1]bool\n\
    \n    // Initialize a table of booleans indicating whether a car collides with\
    \ any\n    // other car.\n    var collides_6 [n - 1][n - 1]bool\n\n    // Initialize\
    \ a table of booleans indicating whether a car collides with any\n    // other\
    \ car.\n    var collides_7 [n - 1][n - 1]bool\n\n    // Initialize a table of\
    \ booleans indicating whether a car collides with any\n    // other car.\n   \
    \ var collides_8 [n - 1][n - 1]bool\n\n    // Initialize a table of booleans indicating\
    \ whether a car collides with any\n    // other car.\n    var collides_9 [n -\
    \ 1][n - 1]bool\n\n    // Initialize a table of booleans indicating whether a\
    \ car collides with any\n    // other car.\n    var collides_10 [n - 1][n - 1]bool\n\
    \n    // Initialize a table of booleans indicating whether a car collides with\
    \ any\n    // other car.\n    var collides_11 [n - 1][n - 1]bool\n\n    // Initialize\
    \ a table of booleans indicating whether a car collides with any\n    // other\
    \ car.\n    var collides_12 [n - 1][n - 1]bool\n\n    // Initialize a table of\
    \ booleans indicating whether a car collides with any\n    // other car.\n   \
    \ var collides_13 [n - 1][n - 1]bool\n\n    // Initialize a table of booleans\
    \ indicating whether a car collides with any\n    // other car.\n    var collides_14\
    \ [n - 1][n - 1]bool\n\n    // Initialize a table of booleans indicating whether\
    \ a car collides with any\n    // other car.\n    var \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk0lxq0x__test.go:76:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i+1, j+1, n)\
    \ == true {\n                collisions++\n            }\n        }\n    }\n \
    \   return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu92ko8__test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a collision counter.\n    var collisions int =\
    \ 0\n\n    // Initialize a car array.\n    var cars []Car\n\n    // Initialize\
    \ a car array.\n    var cars2 []Car\n\n    // Initialize a car array.\n    var\
    \ cars3 []Car\n\n    // Initialize a car array.\n    var cars4 []Car\n\n    //\
    \ Initialize a car array.\n    var cars5 []Car\n\n    // Initialize a car array.\n\
    \    var cars6 []Car\n\n    // Initialize a car array.\n    var cars7 []Car\n\n\
    \    // Initialize a car array.\n    var cars8 []Car\n\n    // Initialize a car\
    \ array.\n    var cars9 []Car\n\n    // Initialize a car array.\n    var cars10\
    \ []Car\n\n    // Initialize a car array.\n    var cars11 []Car\n\n    // Initialize\
    \ a car array.\n    var cars12 []Car\n\n    // Initialize a car array.\n    var\
    \ cars13 []Car\n\n    // Initialize a car array.\n    var cars14 []Car\n\n   \
    \ // Initialize a car array.\n    var cars15 []Car\n\n    // Initialize a car\
    \ array.\n    var cars16 []Car\n\n    // Initialize a car array.\n    var cars17\
    \ []Car\n\n    // Initialize a car array.\n    var cars18 []Car\n\n    // Initialize\
    \ a car array.\n    var cars19 []Car\n\n    // Initialize a car array.\n    var\
    \ cars20 []Car\n\n    // Initialize a car array.\n    var cars21 []Car\n\n   \
    \ // Initialize a car array.\n    var cars22 []Car\n\n    // Initialize a car\
    \ array.\n    var cars23 []Car\n\n    // Initialize a car array.\n    var cars24\
    \ []Car\n\n    // Initialize a car array.\n    var cars25 []Car\n\n    // Initialize\
    \ a car array.\n    var cars26 []Car\n\n    // Initialize a car array.\n    var\
    \ cars27 []Car\n\n    // Initialize a car array.\n    var cars28 []Car\n\n   \
    \ // Initialize a car array.\n    var cars29 []Car\n\n    // Initialize a car\
    \ array.\n    var cars30 []Car\n\n    // Initialize a car array.\n    var cars31\
    \ []Car\n\n    // Initialize a car array.\n    var cars32 []Car\n\n    // Initialize\
    \ a car array.\n    var cars33 []Car\n\n    // Initialize a car array.\n    var\
    \ cars34 []Car\n\n    // Initialize a car array.\n    var cars35 []Car\n\n   \
    \ // Initialize a car array.\n    var \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq0_auis7_test.go:127:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i) == car_race_collision_test(j)\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga3cw_se_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a map of cars to their current positions.\n  \
    \  cars := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars[i] =\
    \ i\n    }\n\n    // Initialize a map of cars to their current positions.\n  \
    \  cars_right := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars_right[i]\
    \ = n\n    }\n\n    // Initialize a map of cars to their current positions.\n\
    \    cars_left := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars_left[i]\
    \ = 0\n    }\n\n    // Initialize a map of cars to their current positions.\n\
    \    cars_left_to_right := make(map[int]int)\n    for i := 0; i < n; i++ {\n \
    \       cars_left_to_right[i] = 0\n    }\n\n    // Initialize a map of cars to\
    \ their current positions.\n    cars_right_to_left := make(map[int]int)\n    for\
    \ i := 0; i < n; i++ {\n        cars_right_to_left[i] = 0\n    }\n\n    // Initialize\
    \ a map of cars to their current positions.\n    cars_left_to_left_to_right :=\
    \ make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars_left_to_left_to_right[i]\
    \ = 0\n    }\n\n    // Initialize a map of cars to their current positions.\n\
    \    cars_right_to_left_to_left := make(map[int]int)\n    for i := 0; i < n; i++\
    \ {\n        cars_right_to_left_to_left[i] = 0\n    }\n\n    // Initialize a map\
    \ of cars to their current positions.\n    cars_left_to_right_to_left := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        cars_left_to_right_to_left[i] = 0\n   \
    \ }\n\n    // Initialize a map of cars to their current positions.\n    cars_right_to_left_to_right\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars_right_to_left_to_right[i]\
    \ = 0\n    }\n\n    // Initialize a map of cars to their current positions.\n\
    \    cars_left_to_left_to_right_to_left := make(map[int]int)\n    for i := 0;\
    \ i < n; i++ {\n        cars_left_to_left_to_right_to_left[i] = 0\n    }\n\n \
    \   // Initialize a map of cars to their current positions.\n    cars_right_to_left_to_right_to_right\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars_right_\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpper6aotm_test.go:81:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a table of booleans to indicate whether a car\
    \ collides with any\n    // other car.\n    collide := make([]bool, n)\n    for\
    \ i := 0; i < n; i++ {\n        collide[i] = false\n    }\n\n    // Initialize\
    \ a table of booleans to indicate whether a car collides with any\n    // other\
    \ car.\n    collide2 := make([]bool, n)\n    for i := 0; i < n; i++ {\n      \
    \  collide2[i] = false\n    }\n\n    // Initialize a table of booleans to indicate\
    \ whether a car collides with any\n    // other car.\n    collide3 := make([]bool,\
    \ n)\n    for i := 0; i < n; i++ {\n        collide3[i] = false\n    }\n\n   \
    \ // Initialize a table of booleans to indicate whether a car collides with any\n\
    \    // other car.\n    collide4 := make([]bool, n)\n    for i := 0; i < n; i++\
    \ {\n        collide4[i] = false\n    }\n\n    // Initialize a table of booleans\
    \ to indicate whether a car collides with any\n    // other car.\n    collide5\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collide5[i] = false\n\
    \    }\n\n    // Initialize a table of booleans to indicate whether a car collides\
    \ with any\n    // other car.\n    collide6 := make([]bool, n)\n    for i := 0;\
    \ i < n; i++ {\n        collide6[i] = false\n    }\n\n    // Initialize a table\
    \ of booleans to indicate whether a car collides with any\n    // other car.\n\
    \    collide7 := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collide7[i]\
    \ = false\n    }\n\n    // Initialize a table of booleans to indicate whether\
    \ a car collides with any\n    // other car.\n    collide8 := make([]bool, n)\n\
    \    for i := 0; i < n; i++ {\n        collide8[i] = false\n    }\n\n    // Initialize\
    \ a table of booleans to indicate whether a car collides with any\n    // other\
    \ car.\n    collide9 := make([]bool, n)\n    for i := 0; i < n; i++ {\n      \
    \  collide9[i] = false\n    }\n\n    // Initialize a table of booleans to indicate\
    \ whether a car collides with any\n    // other car.\n    collide10 := make([]bool,\
    \ n)\n    for i := \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0h05s0eb_test.go:84:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision(i, j) == 1 {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt8x73nlw_test.go:20:38:\
    \ too many arguments in call to car_race_collision\n\thave (int, int)\n\twant\
    \ (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j,true)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsozgeoxi_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a map of possible collisions\n    collisions :=\
    \ make(map[int]int)\n\n    // Initialize a map of possible collisions\n    collisions\
    \ := make(map[int]int)\n\n    // Initialize a map of possible collisions\n   \
    \ collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\n\n    // Initialize a map of possible collisions\n\
    \    collisions := make(map[int]int)\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq34mgnki_test.go:97:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i+1, j+1, n)\
    \ == true {\n                collisions++\n            }\n        }\n    }\n \
    \   return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu92ko8__test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i,j,n)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprkgxyfj0_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd42ydk39_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd42ydk39_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j), j), i)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdwxx_olk_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a 2D array of bools to keep track of which cars\
    \ are colliding.\n    collisions := make([][]bool, 2*n)\n    for i := 0; i < n;\
    \ i++ {\n        collisions[i] = make([]bool, 2*n)\n    }\n\n    // Initialize\
    \ a 2D array of ints to keep track of which cars are colliding with each other.\n\
    \    collision_pairs := make([][]int, 2*n)\n    for i := 0; i < n; i++ {\n   \
    \     collision_pairs[i] = make([]int, 2*n)\n    }\n\n    // Initialize a 2D array\
    \ of ints to keep track of which cars are colliding with each other.\n    collision_pairs_count\
    \ := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n        collision_pairs_count[i]\
    \ = 0\n    }\n\n    // Initialize a 2D array of ints to keep track of which cars\
    \ are colliding with each other.\n    collision_pairs_count_2 := make([]int, 2*n)\n\
    \    for i := 0; i < n; i++ {\n        collision_pairs_count_2[i] = 0\n    }\n\
    \n    // Initialize a 2D array of ints to keep track of which cars are colliding\
    \ with each other.\n    collision_pairs_count_3 := make([]int, 2*n)\n    for i\
    \ := 0; i < n; i++ {\n        collision_pairs_count_3[i] = 0\n    }\n\n    //\
    \ Initialize a 2D array of ints to keep track of which cars are colliding with\
    \ each other.\n    collision_pairs_count_4 := make([]int, 2*n)\n    for i := 0;\
    \ i < n; i++ {\n        collision_pairs_count_4[i] = 0\n    }\n\n    // Initialize\
    \ a 2D array of ints to keep track of which cars are colliding with each other.\n\
    \    collision_pairs_count_5 := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n\
    \        collision_pairs_count_5[i] = 0\n    }\n\n    // Initialize a 2D array\
    \ of ints to keep track of which cars are colliding with each other.\n    collision_pairs_count_6\
    \ := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n        collision_pairs_count_6[i]\
    \ = 0\n    }\n\n    // Initialize a 2D array of ints to keep track of which cars\
    \ are colliding with each other.\n    collision_pairs_count_7 := make([]int, 2*n)\n\
    \    for i := 0; i < n; i++ {\n        collision_pairs_count_7[i] = 0\n    }\n\
    \n    // Initialize a 2D array of ints to keep track of which cars are colliding\
    \ with each other.\n    collision_pairs_count_8 := make([]int, 2*n)\n    for i\
    \ := 0; i < n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbnuyu651_test.go:74:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i, j) {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpof7jh04k_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i) == car_race_collision_test(j)\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga3cw_se_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a table of booleans indicating whether each car\
    \ collides with each other.\n    collisions := make([]bool, n)\n    for i := 0;\
    \ i < n; i++ {\n        collisions[i] = true\n    }\n\n    // Initialize a table\
    \ of booleans indicating whether each car collides with each other.\n    collisions2\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collisions2[i] = true\n\
    \    }\n\n    // Initialize a table of booleans indicating whether each car collides\
    \ with each other.\n    collisions3 := make([]bool, n)\n    for i := 0; i < n;\
    \ i++ {\n        collisions3[i] = true\n    }\n\n    // Initialize a table of\
    \ booleans indicating whether each car collides with each other.\n    collisions4\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collisions4[i] = true\n\
    \    }\n\n    // Initialize a table of booleans indicating whether each car collides\
    \ with each other.\n    collisions5 := make([]bool, n)\n    for i := 0; i < n;\
    \ i++ {\n        collisions5[i] = true\n    }\n\n    // Initialize a table of\
    \ booleans indicating whether each car collides with each other.\n    collisions6\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collisions6[i] = true\n\
    \    }\n\n    // Initialize a table of booleans indicating whether each car collides\
    \ with each other.\n    collisions7 := make([]bool, n)\n    for i := 0; i < n;\
    \ i++ {\n        collisions7[i] = true\n    }\n\n    // Initialize a table of\
    \ booleans indicating whether each car collides with each other.\n    collisions8\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collisions8[i] = true\n\
    \    }\n\n    // Initialize a table of booleans indicating whether each car collides\
    \ with each other.\n    collisions9 := make([]bool, n)\n    for i := 0; i < n;\
    \ i++ {\n        collisions9[i] = true\n    }\n\n    // Initialize a table of\
    \ booleans indicating whether each car collides with each other.\n    collisions10\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        collisions10[i] =\
    \ true\n    }\n\n    // Initialize a table of booleans indicating whether each\
    \ car collides with each other.\n    collisions11 := make([]bool\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vrd4lpt_test.go:78:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i+1, j+1, n)\
    \ == true {\n                collisions++\n            }\n        }\n    }\n \
    \   return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu92ko8__test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i, j) {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpof7jh04k_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision(i, j) == 1 {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt8x73nlw_test.go:20:38:\
    \ too many arguments in call to car_race_collision\n\thave (int, int)\n\twant\
    \ (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize a map of sets of cars.\n    collisions := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions2 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions2[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions3 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions3[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions4 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions4[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions5 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions5[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions6 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions6[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions7 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions7[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions8 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions8[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions9 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions9[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions10 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions10[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions11 := make(map[int][]int)\n\
    \    for i := 0; i < n; i++ {\n        collisions11[i] = make([]int, n)\n    }\n\
    \n    // Initialize a map of sets of cars.\n    collisions12 := make(map[int][]int)\n\
    \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprs8czq9t_test.go:86:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073453
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision(i, j) == 1 {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt8x73nlw_test.go:20:38:\
    \ too many arguments in call to car_race_collision\n\thave (int, int)\n\twant\
    \ (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision(i, j) == true {\n\
    \                collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmkgycd0q_test.go:20:38:\
    \ too many arguments in call to car_race_collision\n\thave (int, int)\n\twant\
    \ (int)\n/tmp/tmpmkgycd0q_test.go:20:44: invalid operation: car_race_collision(i,\
    \ j) == true (mismatched types int and untyped bool)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(i, j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jr3h3j__test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The first car will collide with the second car.\n    // The\
    \ second car will collide with the third car.\n    // The third car will collide\
    \ with the fourth car.\n    // The fourth car will collide with the fifth car.\n\
    \    // The fifth car will collide with the sixth car.\n    // The sixth car will\
    \ collide with the seventh car.\n    // The seventh car will collide with the\
    \ eighth car.\n    // The eighth car will collide with the ninth car.\n    //\
    \ The ninth car will collide with the tenth car.\n    // The tenth car will collide\
    \ with the eleventh car.\n    // The eleventh car will collide with the twelfth\
    \ car.\n    // The twelfth car will collide with the thirteenth car.\n    // The\
    \ thirteenth car will collide with the fourteenth car.\n    // The fourteenth\
    \ car will collide with the fifteenth car.\n    // The fifteenth car will collide\
    \ with the sixteenth car.\n    // The sixteenth car will collide with the seventeenth\
    \ car.\n    // The seventeenth car will collide with the eighteenth car.\n   \
    \ // The eighteenth car will collide with the nineteenth car.\n    // The nineteenth\
    \ car will collide with the twentieth car.\n    // The twentieth car will collide\
    \ with the thirtieth car.\n    // The thirtieth car will collide with the fourtieth\
    \ car.\n    // The fourtieth car will collide with the fiftieth car.\n    // The\
    \ fiftieth car will collide with the sixtieth car.\n    // The sixtieth car will\
    \ collide with the seventieth car.\n    // The seventieth car will collide with\
    \ the eightieth car.\n    // The eightieth car will collide with the ninetieth\
    \ car.\n    // The ninetieth car will collide with the twenty car.\n    // The\
    \ twenty car will collide with the thirty car.\n    // The thirty car will collide\
    \ with the forty car.\n    // The forty car will collide with the fifty car.\n\
    \    // The fifty c\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuh5ykpxj_test.go:48:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision_test(i) == car_race_collision_test(j)\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga3cw_se_test.go:20:16: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The first car will collide with the last car.\n    collisions\
    \ := 0\n    for i := 0; i < n; i++ {\n        // The second car will collide with\
    \ the first car.\n        if i == 0 {\n            collisions++\n            continue\n\
    \        }\n        // The third car will collide with the second car.\n     \
    \   if i == 1 {\n            collisions++\n            continue\n        }\n \
    \       // The fourth car will collide with the third car.\n        if i == 2\
    \ {\n            collisions++\n            continue\n        }\n        // The\
    \ fifth car will collide with the fourth car.\n        if i == 3 {\n         \
    \   collisions++\n            continue\n        }\n        // The sixth car will\
    \ collide with the fifth car.\n        if i == 4 {\n            collisions++\n\
    \            continue\n        }\n        // The seventh car will collide with\
    \ the sixth car.\n        if i == 5 {\n            collisions++\n            continue\n\
    \        }\n        // The eighth car will collide with the seventh car.\n   \
    \     if i == 6 {\n            collisions++\n            continue\n        }\n\
    \        // The ninth car will collide with the eighth car.\n        if i == 7\
    \ {\n            collisions++\n            continue\n        }\n        // The\
    \ tenth car will collide with the ninth car.\n        if i == 8 {\n          \
    \  collisions++\n            continue\n        }\n        // The eleventh car\
    \ will collide with the tenth car.\n        if i == 9 {\n            collisions++\n\
    \            continue\n        }\n        // The twelfth car will collide with\
    \ the eleventh car.\n        if i == 10 {\n            collisions++\n        \
    \    continue\n        }\n        // The thirteenth car will collide with the\
    \ twelfth car.\n        if i == 11 {\n            collisions++\n            continue\n\
    \        }\n        // The fourteenth car will collide with the thirteenth car.\n\
    \        if i == 12 {\n            collisions++\n            continue\n      \
    \  }\n        // The fifteenth car will collide with the fourteenth car.\n   \
    \     if i == 13 {\n            collisions++\n            continue\n        }\n\
    \        // The sixteenth car will collide with the fifteenth car.\n        if\
    \ i == 14 {\n            collisions++\n            continue\n        }\n     \
    \   // The seventeenth car will collide with the sixteenth car.\n        if i\
    \ == 15 {\n            collisions++\n            continue\n        }\n       \
    \ // The eighteenth c\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8gbcx_f_test.go:101:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if car_race_collision(i, j) == 1 {\n   \
    \             collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt8x73nlw_test.go:20:38:\
    \ too many arguments in call to car_race_collision\n\thave (int, int)\n\twant\
    \ (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf85751jh_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(i),\
    \ car_race_collision_test(j))\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi42pfrz_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(n,i,j,true)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsozgeoxi_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if i != j {\n                collisions\
    \ += car_race_collision_test(n,i,j)\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqtm6907_test.go:21:31: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,j)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabwh9jri_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(car_race_collision_test(car_race_collision_test(i,\
    \ j)))\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd42ydk39_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            collisions += car_race_collision_test(i,\
    \ j)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zxd2ugy_test.go:20:27: undefined: car_race_collision_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
