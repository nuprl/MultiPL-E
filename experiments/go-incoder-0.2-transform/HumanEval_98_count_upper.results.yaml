language: go_test.go
name: HumanEval_98_count_upper
results:
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    count := 0\n    for _, r := range s\
    \ {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n \
    \           count += vowels[int(r/2)]\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_oc0nw6_test.go:21:13: invalid operation: count += vowels[int(r / 2)]
    (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr102u6ip_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'e' {\n            evenIndices[i]\
    \ = 1\n        } else if s[i] == 'i' {\n            evenIndices[i] = 2\n     \
    \   } else if s[i] == 'o' {\n            evenIndices[i] = 3\n        } else if\
    \ s[i] == 'u' {\n            evenIndices[i] = 4\n        } else if s[i] == 'A'\
    \ {\n            evenIndices[i] = 5\n        } else if s[i] == 'E' {\n       \
    \     evenIndices[i] = 6\n        } else if s[i] == 'I' {\n            evenIndices[i]\
    \ = 7\n        } else if s[i] == 'O' {\n            evenIndices[i] = 8\n     \
    \   } else if s[i] == 'U' {\n            evenIndices[i] = 9\n        }\n    }\n\
    \    return len(vowels) - len(evenIndices)\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpps4lqp3o_test.go:62: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpps4lqp3o_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpps4lqp3o_test.go:62: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpps4lqp3o_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=9)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpps4lqp3o_test.go:62: expected '%!s(int=1)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpps4lqp3o_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpps4lqp3o_test.go:62: expected '%!s(int=2)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073371
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n        if r == 'B' || r == 'C' || r == 'D' || r ==\
    \ 'F' || r == 'G' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4xtmg32_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    evenIndices := make([]int, len(s))\n   \
    \ for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n            evenIndices[i] = 1\n   \
    \     }\n    }\n    return len(vowels[evenIndices])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpevk8188e_test.go:24:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmpevk8188e_test.go:24:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0, 2,\
    \ 4, 6}\n    count := 0\n    for _, r := range s {\n        if r == 'a' || r ==\
    \ 'e' || r == 'i' || r == 'o' || r == 'u' {\n            count += vowels[evenIndices[len(vowels)/2]]\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfkyf4tf1_test.go:22:13: invalid operation: count += vowels[evenIndices[len(vowels)
    / 2]] (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, c := range s {\n        if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpw8q577cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpw8q577cv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, c := range s {\n        if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpw8q577cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpw8q577cv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0, 2,\
    \ 4, 6, 8}\n    count := 0\n    for _, index := range evenIndices {\n        if\
    \ s[index] == 'a' || s[index] == 'e' || s[index] == 'i' || s[index] == 'o' ||\
    \ s[index] == 'u' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihtzhg3f_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' && s[i+1]\
    \ == 'A' {\n            evenIndices[i/2] = 1\n        }\n    }\n    return len(vowels)\
    \ - len(evenIndices)\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate :=\
    \ count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n\
    \     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpb0is9ynz_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpb0is9ynz_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpb0is9ynz_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpb0is9ynz_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpb0is9ynz_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpb0is9ynz_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpb0is9ynz_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073371
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    even_indices := make([]int,\
    \ len(s))\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            even_indices[i]\
    \ = 1\n        }\n    }\n    return len(vowels[even_indices])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2it4vpa_test.go:24:16: invalid argument: vowels[even_indices] (variable
    of type rune) for len

    /tmp/tmpc2it4vpa_test.go:24:23: invalid argument: index even_indices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count++\n        }\n    }\n    for _, v := range\
    \ vowels {\n        if s[i] == v {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83aq7toa_test.go:25:14: undefined: i

    /tmp/tmp83aq7toa_test.go:25:20: invalid operation: s[i] == v (mismatched types
    byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evenIndices := make([]int,\
    \ len(s))\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpvbfd0hnm_test.go:46: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpvbfd0hnm_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpvbfd0hnm_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpvbfd0hnm_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpvbfd0hnm_test.go:46: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpvbfd0hnm_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpvbfd0hnm_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073371
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count++\n        }\n        if s[i] == 'B' || s[i]\
    \ == 'D' || s[i] == 'F' || s[i] == 'G' {\n            count++\n        }\n   \
    \     if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp92ezrrns_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evenIndices := []int{0}\n\
    \    oddIndices := []int{0}\n    for _, r := range s {\n        if r == 'a' ||\
    \ r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            evenIndices = append(evenIndices,\
    \ 0)\n        } else {\n            evenIndices = append(evenIndices, 1)\n   \
    \     }\n    }\n    for _, r := range s {\n        if r == 'b' || r == 'c' ||\
    \ r == 'd' || r == 'f' || r == 'g' {\n            oddIndices = append(oddIndices,\
    \ 0)\n        } else {\n            oddIndices = append(oddIndices, 1)\n     \
    \   }\n    }\n    evenIndices = append(evenIndices, len(s))\n    oddIndices =\
    \ append(oddIndices, len(s))\n    evenIndices = append(evenIndices, len(s))\n\
    \    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    oddIndices = append(oddIndices, len(s))\n    evenIndices = append(evenIndices,\
    \ len(s))\n    odd\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuoznrnm5_test.go:68:6: expected ''('', found TestCount_Upper

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073369
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n    }\n    for _, r := range s {\n        if r ==\
    \ 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lqraorx_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            count++\n        }\n    }\n    for _, v := range\
    \ vowels {\n        if s[len(s)-1] == v {\n            count--\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4v2r7_k_test.go:25:27: invalid operation: s[len(s) - 1] == v (mismatched
    types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evens := make([]bool, len(s))\n   \
    \ for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evens[i] = true\n      \
    \  }\n    }\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if evens[i]\
    \ {\n            if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n                count++\n            }\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75q629n_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count += vowels[i / 2]\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9g7lwvru_test.go:21:13: invalid operation: count += vowels[i / 2] (mismatched
    types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    evenIndices := make([]int, len(s)/2)\n \
    \   for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            evenIndices[i/2] =\
    \ 1\n        }\n    }\n    return len(vowels[evenIndices])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k3vkcqi_test.go:24:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmp1k3vkcqi_test.go:24:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    even_indices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'B' || s[i]\
    \ == 'D' || s[i] == 'F' {\n            even_indices[i/2] = 1\n        }\n    }\n\
    \    return len(vowels[:]) - sum(even_indices)\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzywxrumg_test.go:24:29: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvbfl_qv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count += vowels[int(s[i] - 'a')]\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x7qgb8m_test.go:21:13: invalid operation: count += vowels[int(s[i] -
    ''a'')] (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s))\n    for i := range evenIndices {\n        if i%2 == 0 {\n         \
    \   evenIndices[i] = 0\n        } else {\n            evenIndices[i] = 1\n   \
    \     }\n    }\n    return len(vowels[evenIndices:])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc90kfd4f_test.go:26:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{}\n \
    \   for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices = append(evenIndices,\
    \ i)\n        }\n    }\n    return len(evenIndices) / len(vowels)\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmplm9gvsne_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmplm9gvsne_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmplm9gvsne_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073371
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            count++\n        }\n        if s[i] == 'B' || s[i]\
    \ == 'C' || s[i] == 'D' || s[i] == 'F' || s[i] == 'G' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg2wifgzp_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n    }\n    for _, r := range s {\n        if r ==\
    \ 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lqraorx_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count += vowels[int(s[i]-'a')]\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqz6o0uj_test.go:21:13: invalid operation: count += vowels[int(s[i] -
    ''a'')] (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOUaeiou\")\n    count := 0\n    for _, r := range s\
    \ {\n        if r >= 'A' && r <= 'Z' {\n            count += vowels[int(r-'A')]\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk492fkd6_test.go:21:13: invalid operation: count += vowels[int(r - ''A'')]
    (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOUaeiou\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count += vowels[int(s[i]) - 'a']\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqlvbqtk_test.go:21:13: invalid operation: count += vowels[int(s[i]) -
    ''a''] (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n    }\n    for _, r := range s {\n        if r ==\
    \ 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lqraorx_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, c := range s {\n        if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpw8q577cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpw8q577cv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvbfl_qv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, c := range s {\n        if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpw8q577cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpw8q577cv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvbfl_qv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ && s[i+1] == 'A' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm52jg4a9_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr102u6ip_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'e' {\n            evenIndices[i]\
    \ = 1\n        } else if s[i] == 'i' {\n            evenIndices[i] = 2\n     \
    \   } else if s[i] == 'o' {\n            evenIndices[i] = 3\n        } else if\
    \ s[i] == 'u' {\n            evenIndices[i] = 4\n        } else if s[i] == 'A'\
    \ {\n            evenIndices[i] = 5\n        } else if s[i] == 'E' {\n       \
    \     evenIndices[i] = 6\n        } else if s[i] == 'I' {\n            evenIndices[i]\
    \ = 7\n        } else if s[i] == 'O' {\n            evenIndices[i] = 8\n     \
    \   } else if s[i] == 'U' {\n            evenIndices[i] = 9\n        }\n    }\n\
    \    return len(vowels[evenIndices])\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7awrjg2h_test.go:40:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmp7awrjg2h_test.go:40:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            count++\n        }\n    }\n    for _, v := range\
    \ vowels {\n        if s[i] == v {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwp_l6an_test.go:25:14: undefined: i

    /tmp/tmppwp_l6an_test.go:25:20: invalid operation: s[i] == v (mismatched types
    byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count += vowels[r%len(vowels)]\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7dc7fmc_test.go:21:13: invalid operation: count += vowels[r % len(vowels)]
    (mismatched types int and rune)

    /tmp/tmpp7dc7fmc_test.go:21:29: invalid operation: r % len(vowels) (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{}\n \
    \   for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq2cc7m2u_test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpq2cc7m2u_test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i] = 1\n   \
    \     }\n    }\n    return len(vowels[evenIndices])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipilaa9c_test.go:24:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmpipilaa9c_test.go:24:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            count++\n        }\n        if s[i] == 'B' || s[i]\
    \ == 'C' || s[i] == 'D' || s[i] == 'F' || s[i] == 'G' {\n            count +=\
    \ 2\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql0dnppr_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    n := 0\n    for _, r := range s {\n    \
    \    if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n         \
    \   n += vowels[r%len(vowels)]\n        }\n    }\n    return n\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1ov230r_test.go:21:13: invalid operation: n += vowels[r % len(vowels)]
    (mismatched types int and rune)

    /tmp/tmpz1ov230r_test.go:21:25: invalid operation: r % len(vowels) (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073372
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, evenIndices[len(evenIndices)-1])\n\
    \        }\n    }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwobvyahu_test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpwobvyahu_test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOUaeiou\")\n    count := 0\n    for _, r := range s\
    \ {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n \
    \           count++\n        }\n        if r == 'B' || r == 'C' || r == 'D' ||\
    \ r == 'F' || r == 'G' {\n            count += 2\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7eg8brmw_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvbfl_qv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' && s[i+1]\
    \ == 'a' {\n            evenIndices[i/2] = 1\n        }\n    }\n    return len(vowels)\
    \ - len(evenIndices)\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate :=\
    \ count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n\
    \     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpssmw0pff_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpssmw0pff_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpssmw0pff_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpssmw0pff_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpssmw0pff_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpssmw0pff_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpssmw0pff_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, v := range s {\n        if v == 'A' || v == 'E' ||\
    \ v == 'I' || v == 'O' || v == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmp3y3ktpmg_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmp3y3ktpmg_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count++\n        }\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n        if s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'F'\
    \ || s[i] == 'G' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphguglr4l_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r >= 'A' && r <= 'Z' {\n            count += vowels[r-'A']\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y_j3cxm_test.go:21:13: invalid operation: count += vowels[r - ''A'']
    (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{2, 4,\
    \ 6, 8}\n    count := 0\n    for _, index := range evenIndices {\n        if s[index]\
    \ == 'a' || s[index] == 'e' || s[index] == 'i' || s[index] == 'o' || s[index]\
    \ == 'u' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr6zu9pz3_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'B' {\n\
    \            evenIndices[i/2] = 1\n        }\n    }\n    return len(vowels[evenIndices])\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn1et_par_test.go:24:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmpn1et_par_test.go:24:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpav8a6jz7_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n     \
    \       count += vowels[r%len(vowels)]\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpha2g_4e1_test.go:21:13: invalid operation: count += vowels[r % len(vowels)]
    (mismatched types int and rune)

    /tmp/tmpha2g_4e1_test.go:21:29: invalid operation: r % len(vowels) (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    count := 0\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwao4ejt6_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr102u6ip_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ti_7cvx_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, evenIndices[len(evenIndices)-1]+1)\n\
    \        }\n    }\n    return len(vowels[evenIndices[len(evenIndices)/2]%6:])\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpdarmhfmr_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpdarmhfmr_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpdarmhfmr_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpdarmhfmr_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpdarmhfmr_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpdarmhfmr_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpdarmhfmr_test.go:48: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ && s[i+1] == 'A' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm52jg4a9_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(filter(vowels, evenIndices))\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfga9egaa_test.go:24:16: undefined: filter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9ma8mj2_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvbfl_qv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' {\n            count++\n        }\n        if s[i] ==\
    \ 'B' || s[i] == 'D' || s[i] == 'F' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpktgw2fwl_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ && s[i+1] == 'A' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm52jg4a9_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmprnvrx6rk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmprnvrx6rk_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n        if r == 'B' || r == 'D' || r == 'F' || r ==\
    \ 'G' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm7ldhz69_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evens := []int{}\n    for\
    \ _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' ||\
    \ r == 'u' {\n            evens = append(evens, 0)\n        } else {\n       \
    \     evens = append(evens, 1)\n        }\n    }\n    return len(vowels[:]) -\
    \ len(evens)\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpbt91d2el_test.go:48: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpbt91d2el_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpbt91d2el_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpbt91d2el_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpbt91d2el_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpbt91d2el_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpbt91d2el_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels[:]) - sum(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuhbwz890_test.go:24:29: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for _, c := range s {\n        if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpw8q577cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpw8q577cv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i] = 1\n   \
    \     }\n    }\n    return len(vowels[evenIndices])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipilaa9c_test.go:24:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmpipilaa9c_test.go:24:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073370
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr102u6ip_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    even_indices := make([]int,\
    \ 0, len(s))\n    for _, r := range s {\n        if r == 'a' || r == 'e' || r\
    \ == 'i' || r == 'o' || r == 'u' {\n            even_indices = append(even_indices,\
    \ 0)\n        } else {\n            even_indices = append(even_indices, 1)\n \
    \       }\n    }\n    return len(vowels[even_indices%len(vowels)])\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6v8_sqlr_test.go:26:16: invalid argument: vowels[even_indices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmp6v8_sqlr_test.go:26:23: invalid operation: even_indices % len(vowels)
    (mismatched types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0}\n\
    \    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            evenIndices = append(evenIndices, 0)\n      \
    \  } else {\n            evenIndices = append(evenIndices, 1)\n        }\n   \
    \ }\n    return len(vowels[evenIndices%len(vowels)])\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_6m8ss__test.go:26:16: invalid argument: vowels[evenIndices % len(vowels)]
    (variable of type rune) for len

    /tmp/tmpk_6m8ss__test.go:26:23: invalid operation: evenIndices % len(vowels) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evens := make([]bool, len(s)/2)\n\
    \    for i := 0; i < len(s); i += 2 {\n        evens[i / 2] = true\n    }\n  \
    \  for _, v := range vowels {\n        if evens[v] {\n            evens[v] = false\n\
    \        }\n    }\n    return len(vowels) - len(evens)\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\npanic: runtime error: index out of range\
    \ [65] with length 3 [recovered]\n\tpanic: runtime error: index out of range [65]\
    \ with length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_upper(...)\n\t/tmp/tmpj0aknr0p_test.go:23\n\
    command-line-arguments_test.TestCount_Upper(0x0?)\n\t/tmp/tmpj0aknr0p_test.go:37\
    \ +0x25f\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r >= 'A' && r <= 'Z' {\n            count++\n        }\n        if\
    \ r >= 'a' && r <= 'z' {\n            count++\n        }\n        if r >= 'A'\
    \ && r <= 'Z' && r != ' ' {\n            count++\n        }\n        if r >= 'a'\
    \ && r <= 'z' && r != ' ' {\n            count++\n        }\n    }\n    for _,\
    \ r := range vowels {\n        if r >= 'A' && r <= 'Z' {\n            count++\n\
    \        }\n        if r >= 'a' && r <= 'z' {\n            count++\n        }\n\
    \        if r >= 'A' && r <= 'Z' && r != ' ' {\n            count++\n        }\n\
    \        if r >= 'a' && r <= 'z' && r != ' ' {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpp095_l_f_test.go:69: expected '%!s(int=1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpp095_l_f_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=24)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpp095_l_f_test.go:69: expected '%!s(int=0)', got '%!s(int=18)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpp095_l_f_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpp095_l_f_test.go:69: expected '%!s(int=1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmpp095_l_f_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpp095_l_f_test.go:69: expected '%!s(int=2)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n     \
    \       count++\n        }\n    }\n    for _, r := range s {\n        if r ==\
    \ 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpueih6psv_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'e' {\n            evenIndices[i]\
    \ = 1\n        } else if s[i] == 'i' {\n            evenIndices[i] = 2\n     \
    \   } else if s[i] == 'o' {\n            evenIndices[i] = 3\n        } else if\
    \ s[i] == 'u' {\n            evenIndices[i] = 4\n        } else if s[i] == 'A'\
    \ {\n            evenIndices[i] = 5\n        } else if s[i] == 'E' {\n       \
    \     evenIndices[i] = 6\n        } else if s[i] == 'I' {\n            evenIndices[i]\
    \ = 7\n        } else if s[i] == 'O' {\n            evenIndices[i] = 8\n     \
    \   } else if s[i] == 'U' {\n            evenIndices[i] = 9\n        } else {\n\
    \            evenIndices[i] = 0\n        }\n    }\n    return len(vowels[evenIndices])\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqudx5g8u_test.go:42:16: invalid argument: vowels[evenIndices] (variable
    of type rune) for len

    /tmp/tmpqudx5g8u_test.go:42:23: invalid argument: index evenIndices (variable
    of type []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ && s[i+1] == 'A' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm52jg4a9_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm52jg4a9_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := make([]int,\
    \ len(s))\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i]\
    \ = 1\n        }\n    }\n    return len(vowels) / 2 - len(evenIndices)\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl409trfk_test.go:46: expected '%!s(int=1)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmpl409trfk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=-5)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpl409trfk_test.go:46: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpl409trfk_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__5\
    \ (0.00s)\n        tmpl409trfk_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpl409trfk_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073373
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count += vowels[int(r/2)]\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2ef4_cz_test.go:21:13: invalid operation: count += vowels[int(r / 2)]
    (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    evenIndices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            evenIndices[i/2]\
    \ = 1\n        }\n    }\n    return len(vowels) - len(evenIndices)\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmp_iemdb09_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp_iemdb09_test.go:46: expected '%!s(int=2)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r >= 'A' && r <= 'Z' {\n            count += vowels[r-'A']\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y_j3cxm_test.go:21:13: invalid operation: count += vowels[r - ''A'']
    (mismatched types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3z5lvdj8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3z5lvdj8_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       count++\n        }\n        if r == 'B' || r == 'C' || r == 'D' || r ==\
    \ 'F' || r == 'G' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4xtmg32_test.go:17:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune(\"aeiouAEIOU\")\n    evenIndices := make([]int, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'e' {\n            evenIndices[i]\
    \ = 1\n        } else if s[i] == 'i' {\n            evenIndices[i] = 2\n     \
    \   } else if s[i] == 'o' {\n            evenIndices[i] = 3\n        } else if\
    \ s[i] == 'u' {\n            evenIndices[i] = 4\n        } else if s[i] == 'A'\
    \ {\n            evenIndices[i] = 5\n        } else if s[i] == 'E' {\n       \
    \     evenIndices[i] = 6\n        } else if s[i] == 'I' {\n            evenIndices[i]\
    \ = 7\n        } else if s[i] == 'O' {\n            evenIndices[i] = 8\n     \
    \   } else if s[i] == 'U' {\n            evenIndices[i] = 9\n        }\n    }\n\
    \    evenIndices = evenIndices[:len(evenIndices)/2]\n    evenIndices = append(evenIndices,\
    \ len(s)-len(evenIndices))\n    evenIndices = append(evenIndices, len(s)-1)\n\
    \    evenIndices = append(evenIndices, len(s)-2)\n    evenIndices = append(evenIndices,\
    \ len(s)-3)\n    evenIndices = append(evenIndices, len(s)-4)\n    evenIndices\
    \ = append(evenIndices, len(s)-5)\n    evenIndices = append(evenIndices, len(s)-6)\n\
    \    evenIndices = append(evenIndices, len(s)-7)\n    evenIndices = append(evenIndices,\
    \ len(s)-8)\n    evenIndices = append(evenIndices, len(s)-9)\n    evenIndices\
    \ = append(evenIndices, len(s)-10)\n    evenIndices = append(evenIndices, len(s)-11)\n\
    \    evenIndices = append(evenIndices, len(s)-12)\n    evenIndices = append(evenIndices,\
    \ len(s)-13)\n    evenIndices = append(evenIndices, len(s)-14)\n    evenIndices\
    \ = append(evenIndices, len(s)-15)\n    evenIndices = append(evenIndices, len(s)-16)\n\
    \    evenIndices = append(evenIndices, len(s)-17)\n    evenIndices = append(evenIndices,\
    \ len(s)-18)\n    evenIndices = append(evenIndices, len(s)-19)\n    evenIndices\
    \ = append(evenIndices, len(s)-20)\n    evenIndices = append(evenIndices, len(s)-21)\n\
    \    evenIndices = append(evenIndices, len(s)-22)\n    evenIndices = append(evenIndices,\
    \ len(s)-23)\n    evenIndices = append(evenIndices, \nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjygz9482_test.go:66:6: expected ''('', found TestCount_Upper

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpz562_pvc_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpz562_pvc_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073306
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    even_indices := make([]int,\
    \ len(s)/2)\n    for i := 0; i < len(s); i += 2 {\n        even_indices[i/2] =\
    \ 0\n    }\n    for _, v := range vowels {\n        for _, i := range even_indices\
    \ {\n            if s[i] == v {\n                even_indices[i]++\n         \
    \   }\n        }\n    }\n    return len(even_indices)\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k1z638v_test.go:24:24: invalid operation: s[i] == v (mismatched types
    byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073373
