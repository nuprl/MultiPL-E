name: HumanEval_18_how_many_times
language: go_test.go
prompt: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
  \ string, substring string) int {\n"
tests: "func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n    \
  \ { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"\
  cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"\
  john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring) - start\n            start\
    \ = len(myString)\n        }\n    }\n    return result\n}\n", "    result := 0\n\
    \    for _, letter := range myString {\n        if letter == substring {\n   \
    \         result += 1\n        }\n    }\n    return result\n}\n", "    start :=\
    \ 0\n    end := 0\n    found := false\n    for start < len(myString) {\n     \
    \   end = strings.Index(myString[start:], substring)\n        if end != -1 {\n\
    \            found = true\n            break\n        }\n        start += 1\n\
    \    }\n    if found {\n        return end - start\n    } else {\n        return\
    \ 0\n    }\n}\n", "    result := 0\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = len(myString)\n      \
    \  found = false\n        for end > start {\n            if myString[start] ==\
    \ substring[0] {\n                if myString[end-1] == substring[1] {\n     \
    \               found = true\n                    end--\n                } else\
    \ {\n                    end--\n                }\n            } else {\n    \
    \            end--\n            }\n        }\n        if found {\n           \
    \ result++\n        }\n        start = end\n    }\n    return result\n}\n", " \
    \   start := 0\n    end := 0\n    found := false\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[end] {\n            end++\n        }\n        if end > start {\n \
    \           found = true\n            break\n        }\n    }\n    if found {\n\
    \        return end - start + 1\n    }\n    return 0\n}\n", "    count := 0\n\
    \    start := 0\n    end := len(myString)\n    for start < end {\n        end\
    \ := strings.Index(myString[start:], substring)\n        if end != -1 {\n    \
    \        count += end - start\n            start = end + len(substring)\n    \
    \    } else {\n            start = end + 1\n        }\n    }\n    return count\n\
    }\n", "    result := 0\n    start := 0\n    end := 0\n    found := false\n   \
    \ for start < len(myString) {\n        end = len(myString)\n        for end >\
    \ start {\n            found = myString[start:end] == substring\n            if\
    \ found {\n                result += 1\n                start = end + 1\n    \
    \            break\n            }\n            end -= 1\n        }\n        if\
    \ found {\n            break\n        }\n        start += 1\n    }\n    return\
    \ result\n}\n", "    result := 0\n    start := 0\n    end := 0\n    for start\
    \ < len(myString) {\n        end = strings.Index(myString[start:], substring)\n\
    \        if end != -1 {\n            result += end - start\n            start\
    \ = end + len(substring)\n        } else {\n            result += len(substring)\n\
    \        }\n    }\n    return result\n}\n", "    result := 0\n    start := 0\n\
    \    end := 0\n    found := false\n    for start < len(myString) {\n        end\
    \ = len(myString)\n        for end > start {\n            if myString[start] ==\
    \ substring[0] {\n                if myString[end-1] == substring[1] {\n     \
    \               found = true\n                } else {\n                    found\
    \ = false\n                    break\n                }\n            } else {\n\
    \                found = false\n                break\n            }\n       \
    \     end--\n        }\n        if found {\n            result++\n        }\n\
    \        start = end\n        found = false\n    }\n    return result\n}\n", " \
    \   result := 0\n    start := 0\n    end := 0\n    for start < len(myString) {\n\
    \        end = strings.Index(myString[start:], substring)\n        if end != -1\
    \ {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n", "    count := 0\n    start := 0\n    end := 0\n    found\
    \ := false\n    for start < len(myString) {\n        end = len(myString)\n   \
    \     found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  count++\n                }\n            } else {\n                count++\n\
    \            }\n            end--\n        }\n        if !found {\n          \
    \  count++\n        }\n        start++\n    }\n    return count\n}\n", "    result\
    \ := 0\n    start := 0\n    end := 0\n    for start < len(myString) {\n      \
    \  end = strings.Index(myString[start:], substring)\n        if end != -1 {\n\
    \            result += end - start\n        }\n        start = end + len(substring)\n\
    \    }\n    return result\n}\n", "    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    result := 0\n    start := 0\n    end := 0\n    found\
    \ := false\n    for start < len(myString) {\n        end = len(myString)\n   \
    \     if end > start {\n            end = start\n        }\n        if myString[start]\
    \ == substring[0] {\n            found = true\n            for i := 0; i < len(substring);\
    \ i++ {\n                if myString[start+i] != substring[i] {\n            \
    \        found = false\n                    break\n                }\n       \
    \     }\n            if found {\n                result += 1\n            }\n\
    \        }\n        start = end + 1\n    }\n    return result\n}\n", "    result\
    \ := 0\n    for _, myChar := range myString {\n        if myChar == substring[0]\
    \ {\n            result += how_many_times(myString[1 : len(myString)-1], substring)\n\
    \        }\n    }\n    return result\n}\n", "    count := 0\n    for _, myChar\
    \ := range myString {\n        if myChar == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    result := 0\n    start := 0\n\
    \    end := 0\n    found := false\n    for start < len(myString) {\n        end\
    \ = len(myString)\n        for end > start {\n            middle1 := (start +\
    \ end) / 2\n            middle2 := middle1 + 1\n            if middle2 > len(myString)\
    \ {\n                middle2 = middle1\n            }\n            if myString[middle1]\
    \ == substring[0] {\n                if middle2 == end {\n                   \
    \ found = true\n                    break\n                }\n               \
    \ if myString[middle2] == substring[1] {\n                    found = true\n \
    \                   break\n                }\n            }\n            if myString[middle1]\
    \ != substring[0] {\n                end = middle1\n            } else {\n   \
    \             end = middle2\n            }\n        }\n        if found {\n  \
    \          break\n        }\n        start = end + 1\n    }\n    if found {\n\
    \        result = end - start\n    }\n    return result\n}\n", "    result :=\
    \ 0\n    start := 0\n    end := 0\n    found := false\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            break\n        }\n        if myString[start:end] == substring {\n\
    \            found = true\n            result++\n        }\n        start = end\
    \ + 1\n    }\n    if found {\n        return result\n    }\n    return 0\n}\n",
  "    result := 0\n    start := 0\n    end := 0\n    found := false\n    for start\
    \ < len(myString) {\n        end = start\n        found = false\n        for end\
    \ < len(myString) {\n            if myString[end] == substring[0] {\n        \
    \        if end < len(myString) {\n                    if myString[end] == substring[1]\
    \ {\n                        found = true\n                        break\n   \
    \                 }\n                }\n            }\n            end++\n   \
    \     }\n        if found {\n            result++\n        }\n        start++\n\
    \    }\n    return result\n}\n", "    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[start] {\n    \
    \        end++\n        }\n        if end == len(myString) {\n            found\
    \ = true\n            break\n        }\n        if myString[end] == substring[start]\
    \ {\n            found = true\n            end++\n        }\n        if end >\
    \ start {\n            result += end - start\n        }\n        start = end\n\
    \    }\n    if !found {\n        return 0\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
