language: go_test.go
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l\n  \
    \  l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l,\
    \ l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n\
    \    l := append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    l :=\
    \ append(l, l[len(l)-1]+1)\n    l := append(l, l[len(l)-1]+1)\n    \nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwufdab9v_test.go:62:6: expected ''('', found TestIncr_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, e := range l {\n        l[i] = e + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa56oxr34_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    l := make([]int, n)\n    for i := 0; i < n; i++ {\n        l[i] = l[i] +\
    \ 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmk5tsfrz_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41f3xflq_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := l[:0]\n\
    \    for _, v := range l {\n        l = append(l, v+1)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac75tfw1_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi4eo_mg_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoynwmc2b_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] += 1;\n    }\n    return l;\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        r[i] = l[i] +\
    \ 1\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
