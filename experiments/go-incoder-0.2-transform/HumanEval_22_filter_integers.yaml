name: HumanEval_22_filter_integers
language: go_test.go
prompt: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter given list of any python values only for integers\n// >>> filter_integers([]float64{\"\
  a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\"\
  , map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values\
  \ []interface{}) []int {\n"
tests: "func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
  \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
  \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
  \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    filtered := make([]int, 0)\n    for _, value := range values {\n\
    \        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(float64); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(float64); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    var filtered []int\n    for _, v := range values {\n    \
    \    if _, ok := v.(int); ok {\n            filtered = append(filtered, v)\n \
    \       }\n    }\n    return filtered\n}\n", "    result := make([]int, 0)\n \
    \   for _, value := range values {\n        if _, ok := value.(int); ok {\n  \
    \          result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if _, ok := v.(int); ok {\n            result =\
    \ append(result, int(v))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(float64);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case float64:\n            if\
    \ int(v) == v {\n                result = append(result, int(v))\n           \
    \ }\n        case string:\n            if v == fmt.Sprintf(\"%d\", v) {\n    \
    \            result = append(result, int(v))\n            }\n        case []interface{}:\n\
    \            for _, i := range v {\n                if i == fmt.Sprintf(\"%d\"\
    , i) {\n                    result = append(result, int(i))\n                }\n\
    \            }\n        case map[interface{}]interface{}:\n            for _,\
    \ i := range v {\n                if i == fmt.Sprintf(\"%d\", i) {\n         \
    \           result = append(result, int(i))\n                }\n            }\n\
    \        case []interface{}:\n            for _, i := range v {\n            \
    \    if i == fmt.Sprintf(\"%d\", i) {\n                    result = append(result,\
    \ int(i))\n                }\n            }\n        default:\n            result\
    \ = append(result, int(value))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        switch value := value.(type) {\n        case\
    \ int:\n            result = append(result, value)\n        case float64:\n  \
    \          result = append(result, int(value))\n        case string:\n       \
    \     if value, err := strconv.Atoi(value); err == nil {\n                result\
    \ = append(result, int(value))\n            }\n        case []interface{}:\n \
    \           result = append(result, filter_integers(value)...)\n        case map[interface{}]interface{}:\n\
    \            result = append(result, filter_integers(value)...)\n        case\
    \ []interface{}:\n            result = append(result, filter_integers(value)...)\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return result\n}\n", "    var filtered []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value.(int))\n        }\n    }\n    return filtered\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    var filtered []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n", "  \
    \  var result []int\n    for _, value := range values {\n        switch v := value.(type)\
    \ {\n        case int:\n            result = append(result, v)\n        case float64:\n\
    \            result = append(result, int(v))\n        case string:\n         \
    \   if v, err := strconv.ParseInt(v, 10, 64); err == nil {\n                result\
    \ = append(result, int(v))\n            }\n        case []interface{}:\n     \
    \       result = append(result, filter_integers(v)...)\n        default:\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, int(value))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, value := range values {\n        if _, ok :=\
    \ value.(int); ok {\n            result = append(result, value)\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, int(value))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value := value.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        case float64:\n            result = append(result, int(value))\n\
    \        case string:\n            i, err := strconv.Atoi(value)\n           \
    \ if err != nil {\n                result = append(result, 0)\n            } else\
    \ {\n                result = append(result, i)\n            }\n        case map[string]interface{}:\n\
    \            m := map[string]interface{}{}\n            for k, v := range value\
    \ {\n                switch v.(type) {\n                case int:\n          \
    \          m[k] = v\n                case float64:\n                    m[k] =\
    \ int(v)\n                case string:\n                    i, err := strconv.Atoi(v)\n\
    \                    if err != nil {\n                        m[k] = 0\n     \
    \               } else {\n                        m[k] = i\n                 \
    \   }\n                case map[string]interface{}:\n                    m[k]\
    \ = filter_integers(v.([]interface{}))\n                default:\n           \
    \         m[k] = 0\n                }\n            }\n            result = append(result,\
    \ filter_integers(m)...)\n        case []interface{}:\n            result = append(result,\
    \ filter_integers(v.([]interface{}))...)\n        default:\n            result\
    \ = append(result, 0)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if _, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v == nil {\n            continue\n\
    \        }\n        switch v := v.(type) {\n        case float64:\n          \
    \  if int(v) == v {\n                filtered = append(filtered, int(v))\n   \
    \         }\n        case string:\n            if v == fmt.Sprint(v) {\n     \
    \           filtered = append(filtered, int(v))\n            }\n        case []interface{}:\n\
    \            if v == nil || len(v) == 0 {\n                continue\n        \
    \    }\n            filtered = append(filtered, filter_integers(v)...)\n     \
    \   case map[interface{}]interface{}:\n            if v == nil || len(v) == 0\
    \ {\n                continue\n            }\n            filtered = append(filtered,\
    \ filter_integers(v)...)\n        case []interface{}:\n            if v == nil\
    \ || len(v) == 0 {\n                continue\n            }\n            filtered\
    \ = append(filtered, filter_integers(v)...)\n        default:\n            filtered\
    \ = append(filtered, int(v))\n        }\n    }\n    return filtered\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(float64); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if _, ok := v.(int); ok {\n            result =\
    \ append(result, int(v))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(float64);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    filtered := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            filtered = append(filtered, value)\n        }\n    }\n    return\
    \ filtered\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   for _, value := range values {\n        if _, ok := value.(int); ok {\n  \
    \          result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(float64); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    filtered :=\
    \ make([]int, 0)\n    for _, v := range values {\n        if v, ok := v.(float64);\
    \ ok {\n            if int(v) == v {\n                filtered = append(filtered,\
    \ int(v))\n            }\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var filtered []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    filtered := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            filtered = append(filtered, value)\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        switch value := value.(type) {\n\
    \        case int:\n            result = append(result, value)\n        case float64:\n\
    \            result = append(result, int(value))\n        case string:\n     \
    \       if value, err := strconv.ParseInt(value, 10, 64); err == nil {\n     \
    \           result = append(result, int(value))\n            }\n        case bool:\n\
    \            if value {\n                result = append(result, 1)\n        \
    \    } else {\n                result = append(result, 0)\n            }\n   \
    \     case map[string]interface{}:\n            for key, value := range value\
    \ {\n                if value, err := strconv.ParseInt(value, 10, 64); err ==\
    \ nil {\n                    result = append(result, int(value))\n           \
    \     }\n            }\n        case []interface{}:\n            for _, value\
    \ := range value {\n                if value, err := strconv.ParseInt(value, 10,\
    \ 64); err == nil {\n                    result = append(result, int(value))\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    filtered := make([]int, 0)\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            filtered = append(filtered, v)\n        }\n  \
    \  }\n    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   for _, value := range values {\n        if _, ok := value.(int); ok {\n  \
    \          result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch value := value.(type) {\n        case int:\n            result\
    \ = append(result, value)\n        case float64:\n            result = append(result,\
    \ int(value))\n        case string:\n            if value, err := strconv.ParseInt(value,\
    \ 10, 64); err == nil {\n                result = append(result, int(value))\n\
    \            }\n        case []interface{}:\n            for _, item := range\
    \ value {\n                switch item := item.(type) {\n                case\
    \ int:\n                    result = append(result, item)\n                }\n\
    \            }\n        case map[interface{}]interface{}:\n            for _,\
    \ item := range value {\n                switch item := item.(type) {\n      \
    \          case int:\n                    result = append(result, item)\n    \
    \            }\n            }\n        case []interface{}:\n            for _,\
    \ item := range value {\n                switch item := item.(type) {\n      \
    \          case int:\n                    result = append(result, item)\n    \
    \            }\n            }\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ for _, value := range values {\n        if _, ok := value.(int); ok {\n    \
    \        result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value := value.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        case float64:\n            result = append(result, int(value))\n\
    \        case string:\n            i, err := strconv.Atoi(value)\n           \
    \ if err != nil {\n                result = append(result, 0)\n            } else\
    \ {\n                result = append(result, i)\n            }\n        case []interface{}:\n\
    \            result = append(result, filter_integers(value)...)\n        default:\n\
    \            result = append(result, 0)\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            filtered = append(filtered, v)\n   \
    \     }\n    }\n    return filtered\n}\n", "    filtered := make([]int, 0)\n \
    \   for _, value := range values {\n        if _, ok := value.(int); ok {\n  \
    \          filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    filtered :=\
    \ make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            filtered = append(filtered, value.(int))\n        }\n    }\n\
    \    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            result =\
    \ append(result, value)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            filtered = append(filtered, v)\n        case float64:\n\
    \            filtered = append(filtered, int(v))\n        default:\n         \
    \   filtered = append(filtered, 0)\n        }\n    }\n    return filtered\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var filtered []int\n    for _, value := range values {\n        if\
    \ _, ok := value.(int); ok {\n            filtered = append(filtered, value.(int))\n\
    \        }\n    }\n    return filtered\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(float64); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(float64); ok {\n       \
    \     result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            filtered = append(filtered, v)\n   \
    \     }\n    }\n    return filtered\n}\n", "    result := make([]int, 0)\n   \
    \ for _, value := range values {\n        if _, ok := value.(int); ok {\n    \
    \        result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                result = append(result, int(v))\n   \
    \         } else {\n                result = append(result, i)\n            }\n\
    \        case []interface{}:\n            for _, item := range v {\n         \
    \       switch item := item.(type) {\n                case int:\n            \
    \        result = append(result, item)\n                case float64:\n      \
    \              result = append(result, int(item))\n                case string:\n\
    \                    i, err := strconv.Atoi(item)\n                    if err\
    \ != nil {\n                        result = append(result, int(item))\n     \
    \               } else {\n                        result = append(result, i)\n\
    \                    }\n                case []interface{}:\n                \
    \    for _, item2 := range item {\n                        switch item2 := item2.(type)\
    \ {\n                        case int:\n                            result = append(result,\
    \ item2)\n                        case float64:\n                            result\
    \ = append(result, int(item2))\n                        case string:\n       \
    \                     i, err := strconv.Atoi(item2)\n                        \
    \    if err != nil {\n                                result = append(result,\
    \ int(item2))\n                            } else {\n                        \
    \        result = append(result, i)\n                            }\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        switch v := value.(type) {\n        case int:\n \
    \           result = append(result, v)\n        case float64:\n            result\
    \ = append(result, int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n\
    \            if err == nil {\n                result = append(result, int(i))\n\
    \            }\n        case map[string]interface{}:\n            result := filter_integers(v.(map[string]interface{}))\n\
    \            result = append(result, result...)\n        case []interface{}:\n\
    \            result := filter_integers(v.([]interface{}))\n            result\
    \ = append(result, result...)\n        default:\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      switch v := value.(type) {\n        case int:\n            result = append(result,\
    \ v)\n        case float64:\n            result = append(result, int(v))\n   \
    \     default:\n            result = append(result, 0)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    var filtered []int\n    for _, value := range values {\n\
    \        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, int(value))\n        }\n    }\n    return result\n}\n",
  "    filtered := make([]int, 0)\n    for _, value := range values {\n        if\
    \ _, ok := value.(int); ok {\n            filtered = append(filtered, value.(int))\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, int(value))\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ values {\n        if v == nil {\n            continue\n        }\n        switch\
    \ v.(type) {\n        case float64, int64:\n            result = append(result,\
    \ int(v.(int)))\n        case string:\n            result = append(result, int(v.(string)))\n\
    \        case []interface{}:\n            result = append(result, filter_integers(v.([]interface{})))\n\
    \        default:\n            result = append(result, int(v.(int)))\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value := value.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        case float64:\n            result = append(result, int(value))\n\
    \        default:\n            result = append(result, 0)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v := range values\
    \ {\n        if _, ok := v.(int); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    var filtered []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ filtered = append(filtered, value.(int))\n        }\n    }\n    return filtered\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if v, ok := v.(float64);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(float64); ok {\n            filtered = append(filtered,\
    \ int(value))\n        }\n    }\n    return filtered\n}\n", "    filtered := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            filtered = append(filtered, value.(int))\n        }\n    }\n\
    \    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            result =\
    \ append(result, value.(int))\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                result = append(result, int(v))\n   \
    \         } else {\n                result = append(result, i)\n            }\n\
    \        case []interface{}:\n            result = append(result, filter_integers(v)...)\n\
    \        default:\n            result = append(result, int(value))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(float64);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            result = append(result, v)\n        case float64:\n\
    \            result = append(result, int(v))\n        case string:\n         \
    \   i, err := strconv.Atoi(v)\n            if err != nil {\n                result\
    \ = append(result, int(v))\n            } else {\n                result = append(result,\
    \ i)\n            }\n        case map[interface{}]interface{}:\n            for\
    \ key, value := range v {\n                switch key {\n                case\
    \ \"__builtins__\":\n                    result = append(result, int(value))\n\
    \                default:\n                    result = append(result, filter_integers([]interface{}{value}))\n\
    \                }\n            }\n        case []interface{}:\n            result\
    \ = append(result, filter_integers([]interface{}{v}))\n        default:\n    \
    \        result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        switch v := value.(type) {\n      \
    \  case int:\n            result = append(result, v)\n        case float64:\n\
    \            result = append(result, int(v))\n        case string:\n         \
    \   if v == \"\" {\n                continue\n            }\n            i, err\
    \ := strconv.Atoi(v)\n            if err != nil {\n                continue\n\
    \            }\n            result = append(result, i)\n        case map[string]interface{}:\n\
    \            for k, v := range v {\n                if _, ok := v.(int); !ok {\n\
    \                    continue\n                }\n                result = append(result,\
    \ int(k))\n            }\n        case []interface{}:\n            for _, v :=\
    \ range v {\n                if _, ok := v.(int); !ok {\n                    continue\n\
    \                }\n                result = append(result, int(v))\n        \
    \    }\n        default:\n            continue\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value := value.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        case float64:\n            result = append(result, int(value))\n\
    \        case string:\n            if value, err := strconv.ParseInt(value, 10,\
    \ 64); err == nil {\n                result = append(result, int(value))\n   \
    \         }\n        case map[string]interface{}:\n            for key, value\
    \ := range value {\n                switch key {\n                case \"__builtins__\"\
    :\n                    result = append(result, 0)\n                default:\n\
    \                    result = append(result, filter_integers([]interface{}{value}))\n\
    \                }\n            }\n        case []interface{}:\n            result\
    \ = append(result, filter_integers([]interface{}{value}))\n        default:\n\
    \            result = append(result, 0)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            filtered = append(filtered, v)\n   \
    \     }\n    }\n    return filtered\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
