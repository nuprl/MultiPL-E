name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n//\
  \ []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
  \ []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest +=\
    \ 1.0\n    largest += 1.0\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = numbers[i] / largest\n    }\n    for\
    \ i := range result {\n        result[i] *= smallest\n    }\n    return result\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range result {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if smallest > number {\n            smallest = number\n        }\n\
    \        if largest < number {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = smallest +\
    \ (numbers[i] - smallest) * (largest - smallest) / (numbers[i] - numbers[0])\n\
    \    }\n    return numbers\n}\n", "    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = numbers[i] / max - min\n    }\n\
    \    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = ((numbers[i]\
    \ - smallest) / (largest - smallest)) * (1.0 + 1.0/(len(numbers)-1))\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return result\n}\n", " \
    \   min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        result[i] = (n - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n   \
    \ return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n   \
    \ return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest -= 1.0\n    largest += 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = ((numbers[i]\
    \ - smallest) / (largest - smallest))\n    }\n    return numbers\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest += 1.0\n    largest += 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest)) * (largest - smallest) +\
    \ smallest\n    }\n    return numbers\n}\n", "    if len(numbers) < 2 {\n    \
    \    return numbers\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    smallest /= largest\n    largest\
    \ /= largest\n\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) + smallest\n    }\n\n    return numbers\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    numbers :=\
    \ make([]float64, len(numbers))\n    for index, number := range numbers {\n  \
    \      numbers[index] = number * (largest - smallest) + smallest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return result\n}\n", "    if len(numbers) < 2\
    \ {\n        return numbers\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        rescaled[i] = (number\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        minVal = math.Min(minVal, number)\n        maxVal = math.Max(maxVal,\
    \ number)\n    }\n    for _, number := range numbers {\n        number *= (maxVal\
    \ - minVal) / (len(numbers) - 1)\n    }\n    return numbers\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = ((numbers[i]\
    \ - min) / (max - min)) * 2.0\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\
    \ * largest / smallest + smallest / largest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if smallest > number {\n            smallest = number\n \
    \       }\n        if largest < number {\n            largest = number\n     \
    \   }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest -= (largest - numbers[0]) / (largest - numbers[0])\n    smallest\
    \ += numbers[0]\n    largest += numbers[0]\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / (largest - numbers[0])\n       \
    \ number += smallest\n    }\n    return numbers\n}\n", "    if len(numbers) <\
    \ 2 {\n        return numbers\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := make([]float64,\
    \ len(numbers))\n    for i := range result {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    min := numbers[0]\n    max := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < min {\n            min\
    \ = number\n        }\n        if number > max {\n            max = number\n \
    \       }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n   \
    \ return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest) / (largest -\
    \ smallest))\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - min) / (max -\
    \ min)\n    }\n    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * (largest - smallest) + smallest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return rescaled\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    min\
    \ -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return rescaled\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n   \
    \ return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return result\n}\n", " \
    \   if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - min) / (max -\
    \ min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if smallest > number\
    \ {\n            smallest = number\n        }\n        if largest < number {\n\
    \            largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])\
    \ / (largest - numbers[0])\n    largest -= (largest - numbers[0]) / (smallest\
    \ - numbers[0])\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = smallest + (number - smallest) * (largest\
    \ - smallest) / (largest - numbers[0])\n    }\n    return numbers\n}\n", "   \
    \ if len(numbers) < 2 {\n        return numbers\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    smallest /=\
    \ largest\n    largest /= largest\n\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - min) / (max -\
    \ min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = numbers[i] * largest / smallest + smallest / largest\n    }\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest -=\
    \ 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        numbers[index] = number * largest\
    \ + smallest\n    }\n    return numbers\n}\n", "    var minVal float64\n    var\
    \ maxVal float64\n    for _, number := range numbers {\n        minVal = math.Min(minVal,\
    \ number)\n        maxVal = math.Max(maxVal, number)\n    }\n    rescaledNumbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaledNumbers[i]\
    \ = ((numbers[i] - minVal) / (maxVal - minVal)) * 1.0\n    }\n    return rescaledNumbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= (smallest - largest) / 2.0\n    largest += (largest\
    \ - smallest) / 2.0\n    return []float64{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    var\
    \ rescaledNumbers []float64\n    var smallestNumber float64\n    var largestNumber\
    \ float64\n    var smallestIndex int\n    var largestIndex int\n\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        smallestNumber = numbers[i]\n        largestNumber\
    \ = numbers[i]\n        smallestIndex = i\n        largestIndex = i\n\n      \
    \  for j := i + 1; j < len(numbers); j++ {\n            if numbers[j] < smallestNumber\
    \ {\n                smallestNumber = numbers[j]\n                smallestIndex\
    \ = j\n            }\n            if numbers[j] > largestNumber {\n          \
    \      largestNumber = numbers[j]\n                largestIndex = j\n        \
    \    }\n        }\n\n        rescaledNumbers = append(rescaledNumbers, smallestNumber/(largestNumber-smallestNumber))\n\
    \    }\n\n    return rescaledNumbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest / smallest + smallest / largest\n    }\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\
    \ * largest / smallest + smallest / largest\n    }\n    return numbers\n}\n",
  "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers[1:] {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range rescaled {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n\n    return rescaled\n}\n", "    if len(numbers) < 2 {\n   \
    \     return numbers\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        rescaled[i] = (number\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n \
    \   max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    min -= 0.5\n    max += 0.5\n  \
    \  numbers = make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     numbers[i] = ((numbers[i] - min) / (max - min)) * 2.0\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if smallest > number {\n            smallest = number\n        }\n\
    \        if largest < number {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest /= 1.0\n\
    \    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i]-smallest)/(largest-smallest))*1.0\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if smallest > number {\n            smallest = number\n        }\n\
    \        if largest < number {\n            largest = number\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       result[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n  \
    \  return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, n := range numbers {\n        if n < min {\n            min = n\n       \
    \ }\n        if n > max {\n            max = n\n        }\n    }\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        rescaled[i]\
    \ = (n - min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= largest\n  \
    \  smallest /= largest\n    smallest += largest\n    smallest /= largest\n   \
    \ smallest += largest\n    return []float64{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = number\n    }\n    for i, number := range numbers {\n\
    \        numbers[i] = number * largest / smallest + smallest / largest\n    }\n\
    \    return numbers\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n\n   \
    \ min /= max - min\n    max /= max - min\n\n    for _, number := range numbers\
    \ {\n        number *= max - min\n        number += min\n    }\n\n    return numbers\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return result\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n   \
    \     rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return result\n}\n", " \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if smallest > number {\n            smallest = number\n \
    \       }\n        if largest < number {\n            largest = number\n     \
    \   }\n    }\n    smallest /= (largest - smallest)\n    largest /= (largest -\
    \ smallest)\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest)\n        number += smallest\n    }\n    return numbers\n}\n", " \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if smallest > number {\n            smallest = number\n \
    \       }\n        if largest < number {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n \
    \   smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i := range result {\n  \
    \      result[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n   \
    \ return result\n}\n", "    if len(numbers) < 2 {\n        return numbers\n  \
    \  }\n\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < min {\n            min = number\n       \
    \ }\n        if number > max {\n            max = number\n        }\n    }\n\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest -=\
    \ 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + 1.0\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest + smallest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) + smallest\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * (largest - smallest) + smallest\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    numbers := make([]float64,\
    \ len(numbers))\n    for index, number := range numbers {\n        numbers[index]\
    \ = ((number - min) / (max - min)) * 2.0\n    }\n    return numbers\n}\n", " \
    \   min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (numbers[1] - numbers[0])\n    largest\
    \ -= (largest - numbers[0]) / (numbers[1] - numbers[0])\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = smallest +\
    \ (numbers[i] - smallest) * (largest - smallest) / (numbers[1] - numbers[0])\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    numbers :=\
    \ make([]float64, len(numbers))\n    for i, number := range numbers {\n      \
    \  numbers[i] = number * largest + smallest\n    }\n    return numbers\n}\n",
  "    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    rescaled := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        rescaled[i] = (number - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.5\n    largest\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number * largest / smallest + 0.5\n    }\n \
    \   return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    result := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    smallest /= largest\n    largest /= largest\n\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + 0.5\n    }\n    return result\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if smallest > number {\n      \
    \      smallest = number\n        }\n        if largest < number {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    for _, number := range numbers {\n        number *= (largest -\
    \ smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if smallest > number {\n            smallest = number\n        }\n\
    \        if largest < number {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (numbers[0] - numbers[1])\n    largest\
    \ -= (largest - numbers[0]) / (numbers[0] - numbers[1])\n    smallest += numbers[0]\n\
    \    largest += numbers[0]\n    numbers := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        numbers[i] = smallest + (numbers[i] - smallest)\
    \ * (largest - smallest) / (numbers[i] - numbers[1])\n    }\n    return numbers\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    min :=\
    \ numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n  \
    \      if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n\n    return rescaled\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest -= 1.0\n    largest += 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\
    \ * largest / smallest + 1.0\n    }\n    return numbers\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n   \
    \ return numbers\n}\n", "    if len(numbers) < 2 {\n        return numbers\n \
    \   }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) + smallest\n    }\n    return numbers\n}\n", "    var\
    \ rescaledNumbers []float64\n    var smallestNumber float64\n    var largestNumber\
    \ float64\n    for _, number := range numbers {\n        if smallestNumber ==\
    \ 0 {\n            smallestNumber = number\n        }\n        if largestNumber\
    \ == 0 {\n            largestNumber = number\n        }\n        rescaledNumbers\
    \ = append(rescaledNumbers, ((number-smallestNumber)/(largestNumber-smallestNumber))*100)\n\
    \    }\n    return rescaledNumbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n   \
    \ return result\n}\n", "    if len(numbers) < 2 {\n        return numbers\n  \
    \  }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < min {\n            min = number\n       \
    \ }\n        if number > max {\n            max = number\n        }\n    }\n \
    \   min -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    var\
    \ smallest float64\n    var largest float64\n    for _, number := range numbers\
    \ {\n        if smallest > number {\n            smallest = number\n        }\n\
    \        if largest < number {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return result\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n \
    \   max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       result[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n  \
    \  return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - min) / (max -\
    \ min)\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ numbers\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n\n    return\
    \ rescaled\n}\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n\
    \    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n   \
    \     rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest + smallest\n    }\n    return numbers\n}\n",
  "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n\n    return rescaled\n}\n", "    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    result := make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       result[i] = numbers[i] * largest / smallest + smallest / largest\n   \
    \ }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest -= largest\n    largest += largest\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ * smallest + largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = numbers[i]/largest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = number\n    }\n    for i := range numbers {\n      \
    \  numbers[i] /= (largest - smallest)\n        numbers[i] *= (1.0 + smallest)\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     rescaled[i] = (number - smallest) / (largest - smallest)\n    }\n    return\
    \ rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest\
    \ % 1.0\n    smallest += 1.0\n    largest += 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = ((number\
    \ - smallest) / (largest - smallest)) * (number + 1.0) - 1.0\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] - smallest\n   \
    \ }\n    for i := range result {\n        result[i] = result[i]/largest\n    }\n\
    \    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    result := make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       result[i] = numbers[i] * largest / smallest + smallest / largest\n   \
    \ }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest) / (largest -\
    \ smallest))\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := range result {\n        result[i] = (numbers[i] - min) / (max -\
    \ min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= (largest - smallest)\n\
    \    largest /= (largest - smallest)\n    for _, number := range numbers {\n \
    \       number *= (largest - smallest)\n        number += smallest\n    }\n  \
    \  return numbers\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i := range result {\n  \
    \      result[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n   \
    \ return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if smallest > number {\n      \
    \      smallest = number\n        }\n        if largest < number {\n         \
    \   largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])\
    \ / (numbers[len(numbers)-1] - numbers[0])\n    largest -= (largest - numbers[0])\
    \ / (numbers[len(numbers)-1] - numbers[0])\n    return []float64{smallest, largest}\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest +=\
    \ smallest % 1.0\n    largest += largest % 1.0\n    smallest /= 1.0\n    largest\
    \ /= 1.0\n    numbers := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] * largest / smallest + smallest / largest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest))\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest += largest % 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] / largest\
    \ - smallest / smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * largest / smallest + smallest / largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if smallest > number {\n            smallest = number\n\
    \        }\n        if largest < number {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) + smallest\n    }\n\
    \    return numbers\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = ((numbers[i] - smallest) / (largest - smallest))\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest += 0.5\n    largest += 0.5\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    for i := range numbers {\n        numbers[i] *= (largest - smallest)\
    \ / (largest - numbers[i])\n        numbers[i] += smallest\n    }\n    return\
    \ numbers\n}\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    smallest -= (smallest - numbers[0]) / (numbers[1] - numbers[0])\n\
    \    largest -= (largest - numbers[0]) / (numbers[1] - numbers[0])\n\n    return\
    \ []float64{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if smallest > number\
    \ {\n            smallest = number\n        }\n        if largest < number {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ (largest - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = number*(largest-smallest)+smallest\n    }\n    return numbers\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n\n    min :=\
    \ numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n  \
    \      if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    result := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i] * largest / smallest + smallest / largest\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    min\
    \ -= 0.5\n    max += 0.5\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = ((number - min) / (max -\
    \ min)) * 2.0\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest / smallest + smallest / largest\n    }\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest += smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest -= largest % 1.0\n    smallest += 1.0\n    largest += 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    var result []float64\n    var smallestNum float64\n    var largestNum\
    \ float64\n    for _, num := range numbers {\n        if smallestNum == 0 {\n\
    \            smallestNum = num\n        } else {\n            if num < smallestNum\
    \ {\n                smallestNum = num\n            }\n        }\n        if largestNum\
    \ == 0 {\n            largestNum = num\n        } else {\n            if num >\
    \ largestNum {\n                largestNum = num\n            }\n        }\n \
    \   }\n    for _, num := range numbers {\n        if num == 0 {\n            result\
    \ = append(result, 0)\n        } else {\n            if num < smallestNum {\n\
    \                result = append(result, 0)\n            } else {\n          \
    \      if num > largestNum {\n                    result = append(result, 1)\n\
    \                } else {\n                    result = append(result, ((num -\
    \ smallestNum) / (largestNum - smallestNum)) * 100)\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    if len(numbers) < 2\
    \ {\n        return numbers\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i\
    \ := 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest))\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest += largest % 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = ((number - smallest)\
    \ / (largest - smallest)) % 1.0\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = numbers[i]*((largest - smallest)/float64(len(numbers)))\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  numbers[0] = smallest + largest / 2.0\n    numbers[len(numbers)-1] = largest\
    \ - smallest / 2.0\n    return numbers\n}\n", "    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest += 0.5\n    largest += 0.5\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i, number := range numbers {\n     \
    \   numbers[i] *= (largest - smallest) / (largest - number)\n        numbers[i]\
    \ /= (largest - smallest)\n    }\n    return numbers\n}\n", "    var rescaledNumbers\
    \ []float64\n    for _, number := range numbers {\n        rescaledNumbers = append(rescaledNumbers,\
    \ number/min(number))\n    }\n    return rescaledNumbers\n}\n", "    var rescaledNumbers\
    \ []float64\n    var smallestNumber float64\n    var largestNumber float64\n \
    \   for _, number := range numbers {\n        if smallestNumber == 0 {\n     \
    \       smallestNumber = number\n        }\n        if largestNumber == 0 {\n\
    \            largestNumber = number\n        }\n        rescaledNumbers = append(rescaledNumbers,\
    \ ((number - smallestNumber) / (largestNumber - smallestNumber)) * 100)\n    }\n\
    \    return rescaledNumbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return result\n}\n", " \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest -=\
    \ 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + 1.0\n    }\n    return numbers\n}\n", "    var minVal float64\n    var maxVal\
    \ float64\n    for _, number := range numbers {\n        if number < minVal {\n\
    \            minVal = number\n        }\n        if number > maxVal {\n      \
    \      maxVal = number\n        }\n    }\n    rescaledNumbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaledNumbers[i] = ((numbers[i]\
    \ - minVal) / (maxVal - minVal)) * 1.0\n    }\n    return rescaledNumbers\n}\n",
  "    var rescaled []float64\n    var smallest_number float64\n    var largest_number\
    \ float64\n    var smallest_index int\n    var largest_index int\n    for _, number\
    \ := range numbers {\n        if smallest_number == 0 {\n            smallest_number\
    \ = number\n            smallest_index = 0\n        }\n        if largest_number\
    \ == 1 {\n            largest_number = number\n            largest_index = 1\n\
    \        }\n        if number < smallest_number {\n            smallest_number\
    \ = number\n            smallest_index = 0\n        }\n        if number > largest_number\
    \ {\n            largest_number = number\n            largest_index = 1\n    \
    \    }\n    }\n    smallest_index++\n    largest_index++\n    for _, number :=\
    \ range numbers {\n        rescaled = append(rescaled, number/largest_number)\n\
    \        rescaled = append(rescaled, number/smallest_number)\n    }\n    return\
    \ rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    smallest /= largest\n    largest /= largest\n\
    \    for _, number := range numbers {\n        number *= (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    var\
    \ minVal float64\n    var maxVal float64\n    for _, n := range numbers {\n  \
    \      if n < minVal {\n            minVal = n\n        }\n        if n > maxVal\
    \ {\n            maxVal = n\n        }\n    }\n    var newNumbers []float64\n\
    \    for _, n := range numbers {\n        newNumbers = append(newNumbers, minVal+(n-minVal)/(maxVal-minVal)*float64(len(numbers))-1)\n\
    \    }\n    return newNumbers\n}\n", "    var smallest float64\n    var largest\
    \ float64\n    for _, number := range numbers {\n        if smallest > number\
    \ {\n            smallest = number\n        }\n        if largest < number {\n\
    \            largest = number\n        }\n    }\n    smallest -= largest\n   \
    \ smallest /= 2\n    largest /= 2\n    numbers = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n", "    var result []float64\n    var min float64\n\
    \    var max float64\n    for _, number := range numbers {\n        if min ==\
    \ 0 {\n            min = number\n        }\n        if max == 0 {\n          \
    \  max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    for _, number := range numbers {\n        if number < min {\n     \
    \       number = min - number\n        }\n        if number > max {\n        \
    \    number = max - number\n        }\n        result = append(result, number/max-min)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] -\
    \ smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = number * largest / smallest + smallest / largest\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest -= 1.0\n    largest += 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ numbers[i] * largest / smallest + 1.0\n    }\n    return result\n}\n", "   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest +=\
    \ 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        numbers[index] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = number * largest / smallest + smallest / largest\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest -= 1.0\n    largest += 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + 1.0\n    }\n    return result\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.5\n    largest\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number * largest / smallest + 0.5\n    }\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number*(largest-smallest)+smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 1.0\n    largest += 1.0\n    numbers :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = numbers[i]*largest/smallest + 1.0\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        result[i] = (number - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i] = (numbers[i] - min)\
    \ / (max - min)\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest -= 1.0\n    largest += 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i, number := range numbers {\n     \
    \   numbers[i] *= (largest - smallest) / (number - smallest)\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = number * largest / smallest + smallest / largest\n \
    \   }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    min := numbers[0]\n    max :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    min -= 0.5\n    max += 0.5\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = ((numbers[i]\
    \ - min) / (max - min))\n    }\n    return numbers\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
