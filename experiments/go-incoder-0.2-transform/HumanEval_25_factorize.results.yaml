language: go_test.go
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmptqmlug6w_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmptqmlug6w_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmptqmlug6w_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmptqmlug6w_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmptqmlug6w_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074473
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074473
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpuebs6iz0_test.go:54: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpuebs6iz0_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpuebs6iz0_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpuebs6iz0_test.go:54: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpuebs6iz0_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074289
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    p := 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4sddp7n_test.go:19:5: p declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%j == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpxvcsf6us_test.go:20\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpxvcsf6us_test.go:35\
    \ +0xc8a\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4zeri1bu_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4zeri1bu_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmph8oadf5p_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmph8oadf5p_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmph8oadf5p_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmph8oadf5p_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmph8oadf5p_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i] * j\n                n =\
    \ n / i\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpce1tvhk8_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpce1tvhk8_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpce1tvhk8_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpce1tvhk8_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpce1tvhk8_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp217o_orr_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp217o_orr_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp217o_orr_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp217o_orr_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp217o_orr_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s"
  timestamp: 1660074462
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4zeri1bu_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4zeri1bu_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int"
  timestamp: 1660074462
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    factors[2] = 2\n    factors[3] = 1\n    factors[4] =\
    \ 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7] = 1\n    factors[8]\
    \ = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11] = 1\n    factors[12]\
    \ = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15] = 1\n    factors[16]\
    \ = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19] = 1\n    factors[20]\
    \ = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23] = 1\n    factors[24]\
    \ = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27] = 1\n    factors[28]\
    \ = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31] = 1\n    factors[32]\
    \ = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35] = 1\n    factors[36]\
    \ = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39] = 1\n    factors[40]\
    \ = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43] = 1\n    factors[44]\
    \ = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47] = 1\n    factors[48]\
    \ = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51] = 1\n    factors[52]\
    \ = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55] = 1\n    factors[56]\
    \ = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59] = 1\n    factors[60]\
    \ = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63] = 1\n    factors[64]\
    \ = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67] = 1\n    factors[68]\
    \ = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71] = 1\n    factors[72]\
    \ = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75] = 1\n    factors[76]\
    \ = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79] = 1\n    factors[80]\
    \ = 1\n    factors[81] = 1\n    factor\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4zz3rl01_test.go:102:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074461
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for i\
    \ := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ factor)\n            factor *= i\n        }\n    }\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmplgdpleq0_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n\
    \        tmplgdpleq0_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=16)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplgdpleq0_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=2) %!s(int=6) %!s(int=114)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmplgdpleq0_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=2) %!s(int=6) %!s(int=54) %!s(int=1026) %!s(int=58482)\
    \ %!s(int=10000422) %!s(int=3610152342) %!s(int=3909794986386)]'\n    --- FAIL:\
    \ TestFactorize/test_num__5 (0.00s)\n        tmplgdpleq0_test.go:49: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got\
    \ '[%!s(int=2) %!s(int=6) %!s(int=54) %!s(int=1026) %!s(int=27702) %!s(int=1579014)\
    \ %!s(int=270011394) %!s(int=97474113234) %!s(int=50004220089042) %!s(int=54154570356432486)\
    \ %!s(int=-8519241649046369146) %!s(int=5806754702813547074) %!s(int=3827270182738972390)\
    \ %!s(int=4588099553759020326) %!s(int=-3334954638371767758)]'\n    --- FAIL:\
    \ TestFactorize/test_num__6 (0.00s)\n        tmplgdpleq0_test.go:49: expected\
    \ '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=6)\
    \ %!s(int=114) %!s(int=6498) %!s(int=2345778) %!s(int=2540477574) %!s(int=17425135680066)]'\n\
    \    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmplgdpleq0_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=4) %!s(int=12)\
    \ %!s(int=72) %!s(int=648)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpd9hnxg0a_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpd9hnxg0a_test.go:39\
    \ +0x53\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    n /= 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpy4463q4j_test.go:49: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=7) %!s(int=29)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=7) %!s(int=3307)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=643)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpy4463q4j_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp40lkj7aw_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp40lkj7aw_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp40lkj7aw_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 && n%j == 0 {\n                factors[i] = factors[i] * j\n      \
    \          break\n            }\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074304
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        for j := i * i; j < n; j += i {\n            factors[j] =\
    \ i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074473
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%j == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]+1\n                n = n/i\n\
    \                break\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpej3a3gme_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpej3a3gme_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpej3a3gme_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpej3a3gme_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpej3a3gme_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if i%j == 0 {\n                factors[i*j] = factors[i*j]\
    \ + 1\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpymg_phqh_test.go:24\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpymg_phqh_test.go:38\
    \ +0x959\ntesting.tRunner(0xc0000d04e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    i := 2\n    for i < n {\n        if n % i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = i\n        }\n        i++\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpqhras9b1_test.go:54: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpqhras9b1_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpqhras9b1_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpqhras9b1_test.go:54: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpqhras9b1_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48)"
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]*j\n                factors[j]\
    \ = factors[j]*i\n            }\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074473
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i <= n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp9imma0dr_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpd9hnxg0a_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpd9hnxg0a_test.go:39\
    \ +0x53\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]*j\n                n /=\
    \ i\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9l3nyh_b_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9l3nyh_b_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9l3nyh_b_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9l3nyh_b_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9l3nyh_b_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074289
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                n /= i\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074288
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074301
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j <= i/2;\
    \ j++ {\n            if i%j == 0 {\n                factors[i] += factors[j]\n\
    \                factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmphv1m6gh4_test.go:24\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmphv1m6gh4_test.go:40\
    \ +0xaa5\ntesting.tRunner(0xc0001991e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphct_0yqg_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                n /= i\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074288
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i <= n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp9imma0dr_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i < n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplwqn62i7_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplwqn62i7_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmplwqn62i7_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmplwqn62i7_test.go:50: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplwqn62i7_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmplwqn62i7_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmplwqn62i7_test.go:50: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmplwqn62i7_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpd9hnxg0a_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpd9hnxg0a_test.go:39\
    \ +0x53\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 1\n    for i\
    \ := 2; i <= n; i++ {\n        if n%i == 0 {\n            factor *= i\n      \
    \      factors = append(factors, factor)\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n\
    \        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=8) %!s(int=64)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=57) %!s(int=3249)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=27) %!s(int=513) %!s(int=29241) %!s(int=5000211)\
    \ %!s(int=1805076171) %!s(int=1954897493193) %!s(int=6351461955384057)]'\n   \
    \ --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmphd7gmsyt_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=27) %!s(int=513) %!s(int=13851) %!s(int=789507) %!s(int=135005697)\
    \ %!s(int=48737056617) %!s(int=25002110044521) %!s(int=27077285178216243) %!s(int=-4259620824523184573)\
    \ %!s(int=2903377351406773537) %!s(int=1913635091369486195) %!s(int=-6929322259975265645)\
    \ %!s(int=7555894717668891929) %!s(int=2591993943355624001)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=57) %!s(int=3249) %!s(int=1172889) %!s(int=1270238787)\
    \ %!s(int=8712567840033) %!s(int=179278508444359041)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=6) %!s(int=36) %!s(int=324) %!s(int=5832)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmptvj6w9hm_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmptvj6w9hm_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]*j\n                n = n/i\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp70lkr3tt_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp70lkr3tt_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp70lkr3tt_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp70lkr3tt_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp70lkr3tt_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if i%j == 0 {\n                factors[j*i] ++\n        \
    \        break\n            }\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp463kwvcz_test.go:24\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp463kwvcz_test.go:39\
    \ +0xa32\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4zeri1bu_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4zeri1bu_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpd9hnxg0a_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpd9hnxg0a_test.go:39\
    \ +0x53\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074473
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[j] = factors[j]*i\n                n /=\
    \ i\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp2st5o4o9_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp2st5o4o9_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074289
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i <= n; i++ {\n   \
    \     for j := 1; j < i; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i]*j\n                break\n            }\n        }\n    }\n   \
    \ return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp_104vd8f_test.go:25\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp_104vd8f_test.go:40\
    \ +0xa89\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i] * j\n                n /=\
    \ i\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7rtktmsh_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7rtktmsh_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7rtktmsh_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7rtktmsh_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7rtktmsh_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074289
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5rua431u_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5rua431u_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5rua431u_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5rua431u_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5rua431u_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5qaz_r23_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5qaz_r23_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5qaz_r23_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5qaz_r23_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5qaz_r23_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp40lkj7aw_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp40lkj7aw_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp_45cc0iv_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp_45cc0iv_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    factors[2] = 2\n    factors[3] = 1\n    factors[4] =\
    \ 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7] = 1\n    factors[8]\
    \ = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11] = 1\n    factors[12]\
    \ = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15] = 1\n    factors[16]\
    \ = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19] = 1\n    factors[20]\
    \ = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23] = 1\n    factors[24]\
    \ = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27] = 1\n    factors[28]\
    \ = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31] = 1\n    factors[32]\
    \ = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35] = 1\n    factors[36]\
    \ = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39] = 1\n    factors[40]\
    \ = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43] = 1\n    factors[44]\
    \ = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47] = 1\n    factors[48]\
    \ = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51] = 1\n    factors[52]\
    \ = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55] = 1\n    factors[56]\
    \ = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59] = 1\n    factors[60]\
    \ = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63] = 1\n    factors[64]\
    \ = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67] = 1\n    factors[68]\
    \ = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71] = 1\n    factors[72]\
    \ = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75] = 1\n    factors[76]\
    \ = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79] = 1\n    factors[80]\
    \ = 1\n    factors[81] = 1\n    factor\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4zz3rl01_test.go:102:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074461
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpd9hnxg0a_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpd9hnxg0a_test.go:39\
    \ +0x53\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    n /= 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpy4463q4j_test.go:49: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=7) %!s(int=29)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpy4463q4j_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=7) %!s(int=3307)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpy4463q4j_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=643)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpy4463q4j_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074286
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for n\
    \ > 1 {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxetqsu5a_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxetqsu5a_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074462
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074303
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i*2] = i\n            factors[i*2+1] = 1\n            for j\
    \ := i*2; j < n; j += i {\n                factors[j] = factors[j/2]\n       \
    \     }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpsq7noryv_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpsq7noryv_test.go:40\
    \ +0xcfe\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i <= n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp9imma0dr_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074287
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i <= n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp9imma0dr_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp9imma0dr_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp9imma0dr_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    i := 2\n    for i < n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpszjfiuz8_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpszjfiuz8_test.go:53: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpszjfiuz8_test.go:53: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpszjfiuz8_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                n /= i\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9v1kgda1_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9v1kgda1_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074288
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%j == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ i%j == 0 {\n                factors[i] += factors[j]\n            }\n      \
    \  }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074477
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpqu_b0g9m_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpqu_b0g9m_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp01tyc8uz_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp01tyc8uz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                factors[j]\
    \ = 0\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074477
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i <= n; i++ {\n   \
    \     for j := 1; j < i; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i] * j\n                break\n            }\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpz7x2cksv_test.go:25\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpz7x2cksv_test.go:40\
    \ +0xa89\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjqbcuffn_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjqbcuffn_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5scy3h1r_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5scy3h1r_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074298
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppvg1log__test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppvg1log__test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074288
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 1\n    for i\
    \ := 2; i <= n; i++ {\n        if n%i == 0 {\n            factor *= i\n      \
    \      factors = append(factors, factor)\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n\
    \        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=8) %!s(int=64)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=57) %!s(int=3249)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=27) %!s(int=513) %!s(int=29241) %!s(int=5000211)\
    \ %!s(int=1805076171) %!s(int=1954897493193) %!s(int=6351461955384057)]'\n   \
    \ --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmphd7gmsyt_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=27) %!s(int=513) %!s(int=13851) %!s(int=789507) %!s(int=135005697)\
    \ %!s(int=48737056617) %!s(int=25002110044521) %!s(int=27077285178216243) %!s(int=-4259620824523184573)\
    \ %!s(int=2903377351406773537) %!s(int=1913635091369486195) %!s(int=-6929322259975265645)\
    \ %!s(int=7555894717668891929) %!s(int=2591993943355624001)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=57) %!s(int=3249) %!s(int=1172889) %!s(int=1270238787)\
    \ %!s(int=8712567840033) %!s(int=179278508444359041)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmphd7gmsyt_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=6) %!s(int=36) %!s(int=324) %!s(int=5832)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 2; i*j < n; j++ {\n          \
    \  if n%(i*j) == 0 {\n                factors[i*j] = factors[i*j] + 1\n      \
    \          break\n            }\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpr3bmpr2__test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpr3bmpr2__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpr3bmpr2__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpr3bmpr2__test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpr3bmpr2__test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074464
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7stepeay_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7stepeay_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[j] = factors[j]*i\n                n /=\
    \ i\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp2st5o4o9_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp2st5o4o9_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp2st5o4o9_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074289
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmprye_n6mz_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmprye_n6mz_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmprye_n6mz_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpi7n0mcox_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpi7n0mcox_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074286
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpyv13dm7g_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpyv13dm7g_test.go:36\
    \ +0x906\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074290
