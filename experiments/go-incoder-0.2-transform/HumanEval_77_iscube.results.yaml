language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 36 {\n   \
    \     return true\n    }\n    if a > 36 && a < 54 {\n        return true\n   \
    \ }\n    if a > 54 && a < 90 {\n        return true\n    }\n    if a > 90 && a\
    \ < 180 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp1tnz9tlv_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp1tnz9tlv_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp1tnz9tlv_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp1tnz9tlv_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvyjdsp4_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n\
    \    }\n    \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n  \
    \  if a > 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 &&\
    \ a <= 9999 {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999\
    \ {\n        return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n   \
    \     return true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return\
    \ true\n    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n\
    \    }\n    \n    if a > 999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 9999999999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999 {\n    \
    \    return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpff3w9wx8_test.go:130:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvc4s0046_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a <= 180 {\n        return true\n\
    \    }\n    \n    if a > 180 && a <= 360 {\n        return true\n    }\n    \n\
    \    if a > 360 && a <= 720 {\n        return true\n    }\n    \n    if a > 720\
    \ && a <= 1080 {\n        return true\n    }\n    \n    if a > 1080 && a <= 2160\
    \ {\n        return true\n    }\n    \n    if a > 2160 && a <= 4320 {\n      \
    \  return true\n    }\n    \n    if a > 4320 && a <= 8640 {\n        return true\n\
    \    }\n    \n    if a > 8640 && a <= 17280 {\n        return true\n    }\n  \
    \  \n    if a > 17280 && a <= 35280 {\n        return true\n    }\n    \n    if\
    \ a > 35280 && a <= 70480 {\n        return true\n    }\n    \n    if a > 70480\
    \ && a <= 140880 {\n        return true\n    }\n    \n    if a > 140880 && a <=\
    \ 281680 {\n        return true\n    }\n    \n    if a > 281680 && a <= 563680\
    \ {\n        return true\n    }\n    \n    if a > 563680 && a <= 1126480 {\n \
    \       return true\n    }\n    \n    if a > 1126480 && a <= 1750480 {\n     \
    \   return true\n    }\n    \n    if a > 1750480 && a <= 3456000 {\n        return\
    \ true\n    }\n    \n    if a > 3456000 && a <= 7168000 {\n        return true\n\
    \    }\n    \n    if a > 7168000 && a <= 14336000 {\n        return true\n   \
    \ }\n    \n    if a > 14336000 && a <= 28640000 {\n        return true\n    }\n\
    \    \n    if a > 28640000 && a <= 56896000 {\n        return true\n    }\n  \
    \  \n    if a > 56896000 && a <= 119920000 {\n        return true\n    }\n   \
    \ \n    if a > 119920000 && a <= 175980000 {\n        return true\n    }\n   \
    \ \n    if a > 175980000 && a <= 346720000 {\n        return true\n    }\n   \
    \ \n    if a > 346720000 && a <= 725760000 {\n        return true\n    }\n   \
    \ \n    if a > 725760000 && a <= 1440640000 {\n        return true\n    }\n  \
    \  \n    if a > 1440640000\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl_vwqozw_test.go:130:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 128 {\n        return true\n    }\n    if a > 128 && a <\
    \ 192 {\n        return true\n    }\n    if a > 192 && a < 256 {\n        return\
    \ true\n    }\n    if a > 256 && a < 320 {\n        return true\n    }\n    if\
    \ a > 320 && a < 384 {\n        return true\n    }\n    if a > 384 && a < 448\
    \ {\n        return true\n    }\n    if a > 448 && a < 512 {\n        return true\n\
    \    }\n    if a > 512 && a < 576 {\n        return true\n    }\n    if a > 576\
    \ && a < 640 {\n        return true\n    }\n    if a > 640 && a < 704 {\n    \
    \    return true\n    }\n    if a > 704 && a < 768 {\n        return true\n  \
    \  }\n    if a > 768 && a < 832 {\n        return true\n    }\n    if a > 832\
    \ && a < 896 {\n        return true\n    }\n    if a > 896 && a < 960 {\n    \
    \    return true\n    }\n    if a > 960 && a < 1024 {\n        return true\n \
    \   }\n    if a > 1024 && a < 1088 {\n        return true\n    }\n    if a > 1088\
    \ && a < 1152 {\n        return true\n    }\n    if a > 1152 && a < 1216 {\n \
    \       return true\n    }\n    if a > 1216 && a < 1280 {\n        return true\n\
    \    }\n    if a > 1280 && a < 1344 {\n        return true\n    }\n    if a >\
    \ 1344 && a < 1408 {\n        return true\n    }\n    if a > 1408 && a < 1480\
    \ {\n        return true\n    }\n    if a > 1480 && a < 1536 {\n        return\
    \ true\n    }\n    if a > 1536 && a < 1600 {\n        return true\n    }\n   \
    \ if a > 1600 && a < 1664 {\n        return true\n    }\n    if a > 1664 && a\
    \ < 1728 {\n        return true\n    }\n    if a > 1728 && a < 1792{\n       \
    \ return true\n    }\n    if a > 1792 && a < 1856 {\n        return true\n   \
    \ }\n    if a > 1856 && a < 1920 {\n        return true\n    }\n    if a > 1920\
    \ && a < 1984 {\n        return true\n    }\n    if a > 1984 && a \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppyj42zen_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 128 {\n        return true\n    }\n    if a > 128 && a <\
    \ 192 {\n        return true\n    }\n    if a > 192 && a < 256 {\n        return\
    \ true\n    }\n    if a > 256 && a < 320 {\n        return true\n    }\n    if\
    \ a > 320 && a < 384 {\n        return true\n    }\n    if a > 384 && a < 448\
    \ {\n        return true\n    }\n    if a > 448 && a < 512 {\n        return true\n\
    \    }\n    if a > 512 && a < 576 {\n        return true\n    }\n    if a > 576\
    \ && a < 640 {\n        return true\n    }\n    if a > 640 && a < 704 {\n    \
    \    return true\n    }\n    if a > 704 && a < 768 {\n        return true\n  \
    \  }\n    if a > 768 && a < 832 {\n        return true\n    }\n    if a > 832\
    \ && a < 896 {\n        return true\n    }\n    if a > 896 && a < 960 {\n    \
    \    return true\n    }\n    if a > 960 && a < 1024 {\n        return true\n \
    \   }\n    if a > 1024 && a < 1088 {\n        return true\n    }\n    if a > 1088\
    \ && a < 1152 {\n        return true\n    }\n    if a > 1152 && a < 1216 {\n \
    \       return true\n    }\n    if a > 1216 && a < 1280 {\n        return true\n\
    \    }\n    if a > 1280 && a < 1344 {\n        return true\n    }\n    if a >\
    \ 1344 && a < 1408 {\n        return true\n    }\n    if a > 1408 && a < 1480\
    \ {\n        return true\n    }\n    if a > 1480 && a < 1536 {\n        return\
    \ true\n    }\n    if a > 1536 && a < 1600 {\n        return true\n    }\n   \
    \ if a > 1600 && a < 1664 {\n        return true\n    }\n    if a > 1664 && a\
    \ < 1728 {\n        return true\n    }\n    if a > 1728 && a < 1792{\n       \
    \ return true\n    }\n    if a > 1792 && a < 1856 {\n        return true\n   \
    \ }\n    if a > 1856 && a < 1920 {\n        return true\n    }\n    if a > 1920\
    \ && a < 1984 {\n        return true\n    }\n    if a > 1984 && a < \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps_74yfga_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 128 {\n        return true\n    }\n    if a > 128 && a <\
    \ 192 {\n        return true\n    }\n    if a > 192 && a < 256 {\n        return\
    \ true\n    }\n    if a > 256 && a < 320 {\n        return true\n    }\n    if\
    \ a > 320 && a < 384 {\n        return true\n    }\n    if a > 384 && a < 448\
    \ {\n        return true\n    }\n    if a > 448 && a < 512 {\n        return true\n\
    \    }\n    if a > 512 && a < 576 {\n        return true\n    }\n    if a > 576\
    \ && a < 640 {\n        return true\n    }\n    if a > 640 && a < 704 {\n    \
    \    return true\n    }\n    if a > 704 && a < 768 {\n        return true\n  \
    \  }\n    if a > 768 && a < 832 {\n        return true\n    }\n    if a > 832\
    \ && a < 896 {\n        return true\n    }\n    if a > 896 && a < 960 {\n    \
    \    return true\n    }\n    if a > 960 && a < 1024 {\n        return true\n \
    \   }\n    if a > 1024 && a < 1088 {\n        return true\n    }\n    if a > 1088\
    \ && a < 1152 {\n        return true\n    }\n    if a > 1152 && a < 1216 {\n \
    \       return true\n    }\n    if a > 1216 && a < 1280 {\n        return true\n\
    \    }\n    if a > 1280 && a < 1344 {\n        return true\n    }\n    if a >\
    \ 1344 && a < 1408 {\n        return true\n    }\n    if a > 1408 && a < 1480\
    \ {\n        return true\n    }\n    if a > 1480 && a < 1536 {\n        return\
    \ true\n    }\n    if a > 1536 && a < 1600 {\n        return true\n    }\n   \
    \ if a > 1600 && a < 1664 {\n        return true\n    }\n    if a > 1664 && a\
    \ < 1728 {\n        return true\n    }\n    if a > 1728 && a < 1792{\n       \
    \ return true\n    }\n    if a > 1792 && a < 1856 {\n        return true\n   \
    \ }\n    if a > 1856 && a < 1920 {\n        return true\n    }\n    if a > 1920\
    \ && a < 1984 {\n        return true\n    }\n    if a > 1984 && a \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppyj42zen_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvyjdsp4_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpgtttysqu_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpgtttysqu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpgtttysqu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpgtttysqu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a == 0 {\n        return true\n\
    \    }\n    if a > 180 {\n        return false\n    }\n    if a > 36 {\n     \
    \   return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a\
    \ > 36 {\n        return false\n    }\n    if a > 9 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n       \
    \ return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 9 {\n        return false\n    }\n    if a > 36 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a >\
    \ 36 {\n        return false\n    }\n    if a > 9 {\n        return false\n  \
    \  }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n        return\
    \ false\n    }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n\
    \        return false\n    }\n    if a > 36 {\n        return false\n    }\n \
    \   if a > 9 {\n        return false\n    }\n    if a > 36 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a >\
    \ 36 {\n        return false\n    }\n    if a > 9 {\n        return false\n  \
    \  }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n        return\
    \ false\n    }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n\
    \        return false\n    }\n    if a > 36 {\n        return false\n    }\n \
    \   if a > 9 {\n        return false\n    }\n    if a > 36 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a >\
    \ 36 {\n        return false\n    }\n    if a > 9 {\n        return false\n  \
    \  }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n        return\
    \ false\n    }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n\
    \        return false\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqew9h835_test.go:167:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a < 9 {\n        return true\n    }\n    \n    if a % 3 == 0 {\n\
    \        return true\n    }\n    \n    if a % 5 == 0 {\n        return true\n\
    \    }\n    \n    if a % 7 == 0 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmprmbejpzo_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmprmbejpzo_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmprmbejpzo_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmprmbejpzo_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmprmbejpzo_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprmbejpzo_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 9 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzo17t0xl_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a == 1 {\n        return true\n\
    \    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n       \
    \ return true\n    }\n    if a == 4 {\n        return true\n    }\n    if a ==\
    \ 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n    }\n\
    \    if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return\
    \ true\n    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n\
    \        return true\n    }\n    if a == 11 {\n        return true\n    }\n  \
    \  if a == 12 {\n        return true\n    }\n    if a == 13 {\n        return\
    \ true\n    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n\
    \        return true\n    }\n    if a == 16 {\n        return true\n    }\n  \
    \  if a == 17 {\n        return true\n    }\n    if a == 18 {\n        return\
    \ true\n    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n\
    \        return true\n    }\n    if a == 21 {\n        return true\n    }\n  \
    \  if a == 22 {\n        return true\n    }\n    if a == 23 {\n        return\
    \ true\n    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n\
    \        return true\n    }\n    if a == 26 {\n        return true\n    }\n  \
    \  if a == 27 {\n        return true\n    }\n    if a == 28 {\n        return\
    \ true\n    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n\
    \        return true\n    }\n    if a == 31 {\n        return true\n    }\n  \
    \  if a == 32 {\n        return true\n    }\n    if a == 33 {\n        return\
    \ true\n    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n\
    \        return true\n    }\n    if a == 36 {\n        return true\n    }\n  \
    \  if a == 37 {\n        return true\n    }\n    if a == 38 {\n        return\
    \ true\n    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n\
    \        return true\n    }\n    if a == 41 {\n        return true\n    }\n  \
    \  if a == 42 {\n        return true\n    }\n    if a == 43 {\n        return\
    \ true\n    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n\
    \        return true\n    }\n    if a == 46 {\n        return true\n    }\n  \
    \  if a == 47 {\n        return true\n    }\n    if a == 48 {\n        return\
    \ true\n    }\n    if a == 49 {\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmurnxemu_test.go:179:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfu3o8ey8_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    if a > 1 {\n        return true\n    }\n    if a > 2 {\n        return\
    \ true\n    }\n    if a > 3 {\n        return true\n    }\n    if a > 4 {\n  \
    \      return true\n    }\n    if a > 5 {\n        return true\n    }\n    if\
    \ a > 6 {\n        return true\n    }\n    if a > 7 {\n        return true\n \
    \   }\n    if a > 8 {\n        return true\n    }\n    if a > 9 {\n        return\
    \ true\n    }\n    if a > 10 {\n        return true\n    }\n    if a > 11 {\n\
    \        return true\n    }\n    if a > 12 {\n        return true\n    }\n   \
    \ if a > 13 {\n        return true\n    }\n    if a > 14 {\n        return true\n\
    \    }\n    if a > 15 {\n        return true\n    }\n    if a > 16 {\n       \
    \ return true\n    }\n    if a > 17 {\n        return true\n    }\n    if a >\
    \ 18 {\n        return true\n    }\n    if a > 19 {\n        return true\n   \
    \ }\n    if a > 20 {\n        return true\n    }\n    if a > 21 {\n        return\
    \ true\n    }\n    if a > 22 {\n        return true\n    }\n    if a > 23 {\n\
    \        return true\n    }\n    if a > 24 {\n        return true\n    }\n   \
    \ if a > 25 {\n        return true\n    }\n    if a > 26 {\n        return true\n\
    \    }\n    if a > 27 {\n        return true\n    }\n    if a > 28 {\n       \
    \ return true\n    }\n    if a > 29 {\n        return true\n    }\n    if a >\
    \ 30 {\n        return true\n    }\n    if a > 31 {\n        return true\n   \
    \ }\n    if a > 32 {\n        return true\n    }\n    if a > 33 {\n        return\
    \ true\n    }\n    if a > 34 {\n        return true\n    }\n    if a > 35 {\n\
    \        return true\n    }\n    if a > 36 {\n        return true\n    }\n   \
    \ if a > 37 {\n        return true\n    }\n    if a > 38 {\n        return true\n\
    \    }\n    if a > 39 {\n        return true\n    }\n    if a > 40 {\n       \
    \ return true\n    }\n    if a > 41 {\n        return true\n    }\n    if a >\
    \ 42 {\n        return true\n    }\n    if a > 43 {\n        return true\n   \
    \ }\n    if \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpar_xcknk_test.go:167:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvc4s0046_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 1 && a < 64 {\n        return true\n    }\n    if a > 64 {\n        return\
    \ false\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpdwv51ztq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdwv51ztq_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpdwv51ztq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpdwv51ztq_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpdwv51ztq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvyjdsp4_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a <= 9 {\n        return true\n    }\n    if a <= 36 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 126 {\n    \
    \    return true\n    }\n    if a <= 253 {\n        return true\n    }\n    if\
    \ a <= 510 {\n        return true\n    }\n    if a <= 1022 {\n        return true\n\
    \    }\n    if a <= 2045 {\n        return true\n    }\n    if a <= 4090 {\n \
    \       return true\n    }\n    if a <= 8191 {\n        return true\n    }\n \
    \   if a <= 16383 {\n        return true\n    }\n    if a <= 32767 {\n       \
    \ return true\n    }\n    if a <= 65535 {\n        return true\n    }\n    if\
    \ a <= 131071 {\n        return true\n    }\n    if a <= 262143 {\n        return\
    \ true\n    }\n    if a <= 524287 {\n        return true\n    }\n    if a <= 1048573\
    \ {\n        return true\n    }\n    if a <= 2097151 {\n        return true\n\
    \    }\n    if a <= 4194303 {\n        return true\n    }\n    if a <= 8388607\
    \ {\n        return true\n    }\n    if a <= 16777215 {\n        return true\n\
    \    }\n    if a <= 33554431 {\n        return true\n    }\n    if a <= 67108863\
    \ {\n        return true\n    }\n    if a <= 134217727 {\n        return true\n\
    \    }\n    if a <= 268435455 {\n        return true\n    }\n    if a <= 536870911\
    \ {\n        return true\n    }\n    if a <= 1073741823 {\n        return true\n\
    \    }\n    if a <= 2147483647 {\n        return true\n    }\n    if a <= 4294967291\
    \ {\n        return true\n    }\n    if a <= 8589934591 {\n        return true\n\
    \    }\n    if a <= 17179869183 {\n        return true\n    }\n    if a <= 34359738367\
    \ {\n        return true\n    }\n    if a <= 68719476735 {\n        return true\n\
    \    }\n    if a <= 137438953473 {\n        return true\n    }\n    if a <= 274877906973\
    \ {\n        return true\n    }\n    if a <= 549755813887 {\n        return true\n\
    \    }\n    if a <= 1099511627775 {\n        return true\n    }\n    if a <= 21990232\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmcisld_4_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 128 {\n        return true\n    }\n    if a > 128 && a <\
    \ 192 {\n        return true\n    }\n    if a > 192 && a < 256 {\n        return\
    \ true\n    }\n    if a > 256 && a < 384 {\n        return true\n    }\n    if\
    \ a > 384 && a < 512 {\n        return true\n    }\n    if a > 512 && a < 640\
    \ {\n        return true\n    }\n    if a > 640 && a < 768 {\n        return true\n\
    \    }\n    if a > 768 && a < 896 {\n        return true\n    }\n    if a > 896\
    \ && a < 1024 {\n        return true\n    }\n    if a > 1024 && a < 1280 {\n \
    \       return true\n    }\n    if a > 1280 && a < 1536 {\n        return true\n\
    \    }\n    if a > 1536 && a < 1792 {\n        return true\n    }\n    if a >\
    \ 1792 && a < 2048 {\n        return true\n    }\n    if a > 2048 && a < 3072\
    \ {\n        return true\n    }\n    if a > 3072 && a < 4096 {\n        return\
    \ true\n    }\n    if a > 4096 && a < 5120 {\n        return true\n    }\n   \
    \ if a > 5120 && a < 6144 {\n        return true\n    }\n    if a > 6144 && a\
    \ < 7168 {\n        return true\n    }\n    if a > 7168 && a < 8192 {\n      \
    \  return true\n    }\n    if a > 8192 && a < 9216 {\n        return true\n  \
    \  }\n    if a > 9216 && a < 10240 {\n        return true\n    }\n    if a > 10240\
    \ && a < 11264 {\n        return true\n    }\n    if a > 11264 && a < 12288 {\n\
    \        return true\n    }\n    if a > 12288 && a < 14336 {\n        return true\n\
    \    }\n    if a > 14336 && a < 16384 {\n        return true\n    }\n    if a\
    \ > 16384 && a < 17920 {\n        return true\n    }\n    if a > 17920 && a <\
    \ 20480 {\n        return true\n    }\n    if a > 20480 && a < 30720 {\n     \
    \   return true\n    }\n    if a > 30720 && a < 40960 {\n        return true\n\
    \    }\n    if a > 40960 && a < 51200 {\n        return true\n    }\n    if a\
    \ > 51200 && a < 6144\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppw88c1m8_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 1 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp9e3b_4bf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp9e3b_4bf_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmp9e3b_4bf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp9e3b_4bf_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp9e3b_4bf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 180 {\n        return true\n    }\n    if a >= 180 && a <= 360\
    \ {\n        return true\n    }\n    if a >= 360 && a <= 720 {\n        return\
    \ true\n    }\n    if a >= 720 && a <= 1440 {\n        return true\n    }\n  \
    \  if a >= 1440 && a <= 2160 {\n        return true\n    }\n    if a >= 2160 &&\
    \ a <= 2880 {\n        return true\n    }\n    if a >= 2880 && a <= 3600 {\n \
    \       return true\n    }\n    if a >= 3600 && a <= 7200 {\n        return true\n\
    \    }\n    if a >= 7200 && a <= 14400 {\n        return true\n    }\n    if a\
    \ >= 14400 && a <= 21600 {\n        return true\n    }\n    if a >= 21600 && a\
    \ <= 28800 {\n        return true\n    }\n    if a >= 28800 && a <= 36000 {\n\
    \        return true\n    }\n    if a >= 36000 && a <= 72000 {\n        return\
    \ true\n    }\n    if a >= 72000 && a <= 144000 {\n        return true\n    }\n\
    \    if a >= 144000 && a <= 216000 {\n        return true\n    }\n    if a >=\
    \ 216000 && a <= 288000 {\n        return true\n    }\n    if a >= 288000 && a\
    \ <= 36000 {\n        return true\n    }\n    if a >= 36000 && a <= 72000 {\n\
    \        return true\n    }\n    if a >= 72000 && a <= 144000 {\n        return\
    \ true\n    }\n    if a >= 144000 && a <= 216000 {\n        return true\n    }\n\
    \    if a >= 216000 && a <= 288000 {\n        return true\n    }\n    if a >=\
    \ 288000 && a <= 36000 {\n        return true\n    }\n    if a >= 36000 && a <=\
    \ 72000 {\n        return true\n    }\n    if a >= 72000 && a <= 144000 {\n  \
    \      return true\n    }\n    if a >= 144000 && a <= 216000 {\n        return\
    \ true\n    }\n    if a >= 216000 && a <= 288000 {\n        return true\n    }\n\
    \    if a >= 288000 && a <= 36000 {\n        return true\n    }\n    if a >= 36000\
    \ && a <= 72000 {\n        return true\n    }\n    if a >= 72000 && a <= 144000\
    \ {\n        return true\n    }\n    if a >= 144000 && a <= 216000 {\n       \
    \ return true\n    }\n    if a >= 21600\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2yrjctoy_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgd7txn_y_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgd7txn_y_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    if a == 1 {\n       \
    \ return true\n    }\n    if a == 2 {\n        return true\n    }\n    if a ==\
    \ 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n    }\n\
    \    if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return\
    \ true\n    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n\
    \        return true\n    }\n    if a == 9 {\n        return true\n    }\n   \
    \ if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n\
    \    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n     \
    \   return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a\
    \ == 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n\
    \    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n     \
    \   return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a\
    \ == 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n\
    \    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n     \
    \   return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a\
    \ == 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n\
    \    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n     \
    \   return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a\
    \ == 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n\
    \    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n     \
    \   return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a\
    \ == 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n\
    \    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n     \
    \   return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a\
    \ == 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n\
    \    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n     \
    \   return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a\
    \ == 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n\
    \    }\n    if a == 47 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq18bame0_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 1 {\n        return\
    \ true\n    }\n    if a > 0 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpz2qc2t5t_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpz2qc2t5t_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmpz2qc2t5t_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpz2qc2t5t_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpz2qc2t5t_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 180 {\n        return true\n    }\n    if a > 180 && a < 360 {\n\
    \        return true\n    }\n    if a > 360 && a < 540 {\n        return true\n\
    \    }\n    if a > 540 && a < 720 {\n        return true\n    }\n    if a > 720\
    \ && a < 1080 {\n        return true\n    }\n    if a > 1080 && a < 2160 {\n \
    \       return true\n    }\n    if a > 2160 && a < 4320 {\n        return true\n\
    \    }\n    if a > 4320 && a < 8640 {\n        return true\n    }\n    if a >\
    \ 8640 && a < 17280 {\n        return true\n    }\n    if a > 17280 && a < 35280\
    \ {\n        return true\n    }\n    if a > 35280 && a < 576000 {\n        return\
    \ true\n    }\n    if a > 576000 && a < 1152000 {\n        return true\n    }\n\
    \    if a > 1152000 && a < 20000000 {\n        return true\n    }\n    if a >\
    \ 20000000 && a < 40000000 {\n        return true\n    }\n    if a > 40000000\
    \ && a < 80000000 {\n        return true\n    }\n    if a > 80000000 && a < 160000000\
    \ {\n        return true\n    }\n    if a > 160000000 && a < 320000000 {\n   \
    \     return true\n    }\n    if a > 320000000 && a < 640000000 {\n        return\
    \ true\n    }\n    if a > 640000000 && a < 1280000000 {\n        return true\n\
    \    }\n    if a > 1280000000 && a < 2560000000 {\n        return true\n    }\n\
    \    if a > 2560000000 && a < 5120000000 {\n        return true\n    }\n    if\
    \ a > 5120000000 && a < 10240000000 {\n        return true\n    }\n    if a >\
    \ 10240000000 && a < 20480000000 {\n        return true\n    }\n    if a > 20480000000\
    \ && a < 40960000000 {\n        return true\n    }\n    if a > 40960000000 &&\
    \ a < 81920000000 {\n        return true\n    }\n    if a > 81920000000 && a <\
    \ 163840000000 {\n        return true\n    }\n    if a > 163840000000 && a < 327680000000\
    \ {\n        return true\n    }\n    if a > 327680000000 && a < 655360000000 {\n\
    \        return true\n    }\n    if a > 655360000000 && a < 1310720000000 {\n\
    \        return true\n    }\n    if a > 131072\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj0173zo4_test.go:119:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 100 {\n        return false\n    }\n   \
    \ if a > 1000 {\n        return false\n    }\n    if a > 10000 {\n        return\
    \ false\n    }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000\
    \ {\n        return false\n    }\n    if a > 10000000 {\n        return false\n\
    \    }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpguz4k43s_test.go:144:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 18 {\n   \
    \     return true\n    }\n    if a > 18 && a < 27 {\n        return true\n   \
    \ }\n    if a > 27 && a < 36 {\n        return true\n    }\n    if a > 36 && a\
    \ < 45 {\n        return true\n    }\n    if a > 45 && a < 54 {\n        return\
    \ true\n    }\n    if a > 54 && a < 63 {\n        return true\n    }\n    if a\
    \ > 63 && a < 72 {\n        return true\n    }\n    if a > 72 && a < 81 {\n  \
    \      return true\n    }\n    if a > 81 && a < 90 {\n        return true\n  \
    \  }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpgbjgkx92_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpgbjgkx92_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpgbjgkx92_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpgbjgkx92_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a > 0 {\n        for i := 0; i\
    \ < a; i++ {\n            if iscube(i) {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpnts7dkhe_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpnts7dkhe_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpnts7dkhe_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpnts7dkhe_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 0 && a <= 9 {\n        return true\n   \
    \ }\n    if a > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a\
    \ <= 999 {\n        return true\n    }\n    if a > 999 && a <= 9999 {\n      \
    \  return true\n    }\n    if a > 9999 && a <= 99999 {\n        return true\n\
    \    }\n    if a > 99999 && a <= 999999 {\n        return true\n    }\n    if\
    \ a > 999999 && a <= 9999999 {\n        return true\n    }\n    if a > 9999999\
    \ && a <= 999999999 {\n        return true\n    }\n    if a > 999999999 && a <=\
    \ 99999999999 {\n        return true\n    }\n    if a > 99999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1orsivsf_test.go:113:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd23g1clt_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 1 {\n        return false\n    }\n    if a < 6 {\n        return false\n\
    \    }\n    if a > 6 {\n        return true\n    }\n    if a < 9 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return true\n    }\n    if a < 18 {\n\
    \        return false\n    }\n    if a > 18 {\n        return true\n    }\n  \
    \  if a < 36 {\n        return false\n    }\n    if a > 36 {\n        return true\n\
    \    }\n    if a < 54 {\n        return false\n    }\n    if a > 54 {\n      \
    \  return true\n    }\n    if a < 90 {\n        return false\n    }\n    if a\
    \ > 90 {\n        return true\n    }\n    if a < 180 {\n        return false\n\
    \    }\n    if a > 180 {\n        return true\n    }\n    return false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpwf38r40e_test.go:99: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwf38r40e_test.go:99:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpwf38r40e_test.go:99: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpwf38r40e_test.go:99:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n\
    \    }\n    \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n  \
    \  if a > 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 &&\
    \ a <= 9999 {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999\
    \ {\n        return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n   \
    \     return true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return\
    \ true\n    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n\
    \    }\n    \n    if a > 999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 9999999999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999 {\n    \
    \    return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcawj0k0j_test.go:130:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a%2 == 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n\
    \    }\n    if a%5 == 0 {\n        return false\n    }\n    if a%7 == 0 {\n  \
    \      return false\n    }\n    if a%11 == 0 {\n        return false\n    }\n\
    \    if a%13 == 0 {\n        return false\n    }\n    if a%17 == 0 {\n       \
    \ return false\n    }\n    if a%19 == 0 {\n        return false\n    }\n    if\
    \ a%23 == 0 {\n        return false\n    }\n    if a%29 == 0 {\n        return\
    \ false\n    }\n    if a%31 == 0 {\n        return false\n    }\n    if a%37 ==\
    \ 0 {\n        return false\n    }\n    if a%41 == 0 {\n        return false\n\
    \    }\n    if a%47 == 0 {\n        return false\n    }\n    if a%53 == 0 {\n\
    \        return false\n    }\n    if a%59 == 0 {\n        return false\n    }\n\
    \    if a%61 == 0 {\n        return false\n    }\n    if a%67 == 0 {\n       \
    \ return false\n    }\n    if a%71 == 0 {\n        return false\n    }\n    if\
    \ a%77 == 0 {\n        return false\n    }\n    if a%81 == 0 {\n        return\
    \ false\n    }\n    if a%87 == 0 {\n        return false\n    }\n    if a%93 ==\
    \ 0 {\n        return false\n    }\n    if a%99 == 0 {\n        return false\n\
    \    }\n    if a%103 == 0 {\n        return false\n    }\n    if a%107 == 0 {\n\
    \        return false\n    }\n    if a%111 == 0 {\n        return false\n    }\n\
    \    if a%117 == 0 {\n        return false\n    }\n    if a%121 == 0 {\n     \
    \   return false\n    }\n    if a%127 == 0 {\n        return false\n    }\n  \
    \  if a%131 == 0 {\n        return false\n    }\n    if a%137 == 0 {\n       \
    \ return false\n    }\n    if a%141 == 0 {\n        return false\n    }\n    if\
    \ a%147 == 0 {\n        return false\n    }\n    if a%151 == 0 {\n        return\
    \ false\n    }\n    if a%157 == 0 {\n        return false\n    }\n    if a%161\
    \ == 0 {\n        return false\n    }\n    if a%167 == 0 {\n        return false\n\
    \    }\n    if a%171 == 0 {\n        return false\n    }\n    if a%177 == 0 {\n\
    \        return false\n    }\n    if a%181 == 0 {\n        return false\n    }\n\
    \    if \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpskvqyal6_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 64 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgytdgnko_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp3hnmg9jv_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp3hnmg9jv_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp3hnmg9jv_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp3hnmg9jv_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 100 {\n        return false\n    }\n   \
    \ if a > 1000 {\n        return false\n    }\n    if a > 10000 {\n        return\
    \ false\n    }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000\
    \ {\n        return false\n    }\n    if a > 10000000 {\n        return false\n\
    \    }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpguz4k43s_test.go:144:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgd7txn_y_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    x := a\n    y := a\n    z := a\n    \n  \
    \  for {\n        if x%y == 0 {\n            if x%z == 0 {\n                return\
    \ true\n            }\n        }\n        \n        if y%z == 0 {\n          \
    \  return true\n        }\n        \n        if z%x == 0 {\n            return\
    \ true\n        }\n        \n        x /= 3\n        y /= 3\n        z /= 3\n\
    \    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp4urd6sj5_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp4urd6sj5_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmp4urd6sj5_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp4urd6sj5_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmp4urd6sj5_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a <= 180 {\n        return true\n\
    \    }\n    \n    if a > 180 && a <= 360 {\n        return true\n    }\n    \n\
    \    if a > 360 && a <= 720 {\n        return true\n    }\n    \n    if a > 720\
    \ && a <= 1080 {\n        return true\n    }\n    \n    if a > 1080 && a <= 2160\
    \ {\n        return true\n    }\n    \n    if a > 2160 && a <= 4320 {\n      \
    \  return true\n    }\n    \n    if a > 4320 && a <= 8640 {\n        return true\n\
    \    }\n    \n    if a > 8640 && a <= 17280 {\n        return true\n    }\n  \
    \  \n    if a > 17280 && a <= 35280 {\n        return true\n    }\n    \n    if\
    \ a > 35280 && a <= 70480 {\n        return true\n    }\n    \n    if a > 70480\
    \ && a <= 140880 {\n        return true\n    }\n    \n    if a > 140880 && a <=\
    \ 281680 {\n        return true\n    }\n    \n    if a > 281680 && a <= 563280\
    \ {\n        return true\n    }\n    \n    if a > 563280 && a <= 1126480 {\n \
    \       return true\n    }\n    \n    if a > 1126480 && a <= 172880 {\n      \
    \  return true\n    }\n    \n    if a > 172880 && a <= 352880 {\n        return\
    \ true\n    }\n    \n    if a > 352880 && a <= 704880 {\n        return true\n\
    \    }\n    \n    if a > 704880 && a <= 1408880 {\n        return true\n    }\n\
    \    \n    if a > 1408880 && a <= 2816880 {\n        return true\n    }\n    \n\
    \    if a > 2816880 && a <= 5632880 {\n        return true\n    }\n    \n    if\
    \ a > 5632880 && a <= 11264880 {\n        return true\n    }\n    \n    if a >\
    \ 11264880 && a <= 1728880 {\n        return true\n    }\n    \n    if a > 1728880\
    \ && a <= 3528880 {\n        return true\n    }\n    \n    if a > 3528880 && a\
    \ <= 7048880 {\n        return true\n    }\n    \n    if a > 7048880 && a <= 14088880\
    \ {\n        return true\n    }\n    \n    if a > 14088880 && a <= 28\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp798p2_5x_test.go:130:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 36 {\n   \
    \     return true\n    }\n    if a > 36 && a < 90 {\n        return true\n   \
    \ }\n    if a > 90 && a < 270 {\n        return true\n    }\n    if a > 270 &&\
    \ a < 90 {\n        return true\n    }\n    if a > 90 && a < 360 {\n        return\
    \ true\n    }\n    if a > 360 && a < 270 {\n        return true\n    }\n    if\
    \ a > 270 && a < 90 {\n        return true\n    }\n    if a > 90 && a < 540 {\n\
    \        return true\n    }\n    if a > 540 && a < 360 {\n        return true\n\
    \    }\n    if a > 360 && a < 540 {\n        return true\n    }\n    if a > 540\
    \ && a < 90 {\n        return true\n    }\n    if a > 90 && a < 1080 {\n     \
    \   return true\n    }\n    if a > 1080 && a < 540 {\n        return true\n  \
    \  }\n    if a > 540 && a < 90 {\n        return true\n    }\n    if a > 90 &&\
    \ a < 2160 {\n        return true\n    }\n    if a > 2160 && a < 1080 {\n    \
    \    return true\n    }\n    if a > 1080 && a < 90 {\n        return true\n  \
    \  }\n    if a > 90 && a < 4320 {\n        return true\n    }\n    if a > 4320\
    \ && a < 2160 {\n        return true\n    }\n    if a > 2160 && a < 1080 {\n \
    \       return true\n    }\n    if a > 1080 && a < 90 {\n        return true\n\
    \    }\n    if a > 90 && a < 8640 {\n        return true\n    }\n    if a > 8640\
    \ && a < 4320 {\n        return true\n    }\n    if a > 4320 && a < 2160 {\n \
    \       return true\n    }\n    if a > 2160 && a < 1080 {\n        return true\n\
    \    }\n    if a > 1080 && a < 90 {\n        return true\n    }\n    if a > 90\
    \ && a < 17280 {\n        return true\n    }\n    if a > 17280 && a < 8640 {\n\
    \        return true\n    }\n    if a > 8640 && a < 4320 {\n        return true\n\
    \    }\n    if a > 4320 && a < 2160 {\n        return true\n    }\n    if a >\
    \ 2160 && a < 1080 {\n        return true\n    }\n    if a > 1080 && a < 90 {\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7svrwx0m_test.go:129:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073946
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    if a < 0 {\n        return false\n    }\n    if a < 2 {\n        return\
    \ true\n    }\n    if a < 4 {\n        return true\n    }\n    if a < 8 {\n  \
    \      return true\n    }\n    if a < 16 {\n        return true\n    }\n    if\
    \ a < 32 {\n        return true\n    }\n    if a < 64 {\n        return true\n\
    \    }\n    if a < 128 {\n        return true\n    }\n    if a < 256 {\n     \
    \   return true\n    }\n    if a < 512 {\n        return true\n    }\n    if a\
    \ < 1024 {\n        return true\n    }\n    if a < 2048 {\n        return true\n\
    \    }\n    if a < 4096 {\n        return true\n    }\n    if a < 8192 {\n   \
    \     return true\n    }\n    if a < 16384 {\n        return true\n    }\n   \
    \ if a < 32768 {\n        return true\n    }\n    if a < 65536 {\n        return\
    \ true\n    }\n    if a < 131072 {\n        return true\n    }\n    if a < 262144\
    \ {\n        return true\n    }\n    if a < 524288 {\n        return true\n  \
    \  }\n    if a < 1048576 {\n        return true\n    }\n    if a < 2097152 {\n\
    \        return true\n    }\n    if a < 4194304 {\n        return true\n    }\n\
    \    if a < 8388608 {\n        return true\n    }\n    if a < 16777216 {\n   \
    \     return true\n    }\n    if a < 33554432 {\n        return true\n    }\n\
    \    if a < 67108864 {\n        return true\n    }\n    if a < 134217728 {\n \
    \       return true\n    }\n    if a < 268435456 {\n        return true\n    }\n\
    \    if a < 536870912 {\n        return true\n    }\n    if a < 1073741824 {\n\
    \        return true\n    }\n    if a < 2147483648 {\n        return true\n  \
    \  }\n    if a < 4294967296 {\n        return true\n    }\n    if a < 8589934592\
    \ {\n        return true\n    }\n    if a < 17179869184 {\n        return true\n\
    \    }\n    if a < 34359738368 {\n        return true\n    }\n    if a < 68719476736\
    \ {\n        return true\n    }\n    if a < 137438953472 {\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_aum0enl_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirt_kxu7_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 {\n        return false\n    }\n    if a > 180 {\n        return\
    \ false\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpba75fepx_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpba75fepx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpba75fepx_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpba75fepx_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 36 {\n   \
    \     return true\n    }\n    if a > 36 && a < 54 {\n        return true\n   \
    \ }\n    if a > 54 && a < 90 {\n        return true\n    }\n    if a > 90 && a\
    \ < 180 {\n        return true\n    }\n    if a > 180 && a < 360 {\n        return\
    \ true\n    }\n    if a > 360 && a < 540 {\n        return true\n    }\n    if\
    \ a > 540 && a < 900 {\n        return true\n    }\n    if a > 900 && a < 1800\
    \ {\n        return true\n    }\n    if a > 1800 && a < 3600 {\n        return\
    \ true\n    }\n    if a > 3600 && a < 5400 {\n        return true\n    }\n   \
    \ if a > 5400 && a < 9000 {\n        return true\n    }\n    if a > 9000 && a\
    \ < 18000 {\n        return true\n    }\n    if a > 18000 && a < 36000 {\n   \
    \     return true\n    }\n    if a > 36000 && a < 54000 {\n        return true\n\
    \    }\n    if a > 54000 && a < 90000 {\n        return true\n    }\n    if a\
    \ > 90000 && a < 180000 {\n        return true\n    }\n    if a > 180000 && a\
    \ < 360000 {\n        return true\n    }\n    if a > 360000 && a < 540000 {\n\
    \        return true\n    }\n    if a > 540000 && a < 900000 {\n        return\
    \ true\n    }\n    if a > 900000 && a < 1800000 {\n        return true\n    }\n\
    \    if a > 1800000 && a < 3600000 {\n        return true\n    }\n    if a > 3600000\
    \ && a < 5400000 {\n        return true\n    }\n    if a > 5400000 && a < 9000000\
    \ {\n        return true\n    }\n    if a > 9000000 && a < 18000000 {\n      \
    \  return true\n    }\n    if a > 18000000 && a < 36000000 {\n        return true\n\
    \    }\n    if a > 36000000 && a < 54000000 {\n        return true\n    }\n  \
    \  if a > 54000000 && a < 90000000  {\n        return true\n    }\n    if a >\
    \ 90000000 && a < 180000000 {\n        return true\n    }\n    if a > 180000000\
    \ && a < 360000000 {\n        return true\n    }\n    if a > 360000000 && a <\
    \ 54\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7s3gez2k_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 9 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxk0wuk2u_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 0 && a <= 9 {\n        return true\n   \
    \ }\n    if a > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a\
    \ <= 999 {\n        return true\n    }\n    if a > 999 && a <= 9999 {\n      \
    \  return true\n    }\n    if a > 9999 && a <= 99999 {\n        return true\n\
    \    }\n    if a > 99999 && a <= 999999 {\n        return true\n    }\n    if\
    \ a > 999999 && a <= 9999999 {\n        return true\n    }\n    if a > 9999999\
    \ && a <= 999999999 {\n        return true\n    }\n    if a > 999999999 && a <=\
    \ 99999999999 {\n        return true\n    }\n    if a > 99999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1orsivsf_test.go:113:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    \n    if a > 9 && a < 99 {\n        return true\n    }\n    \n   \
    \ if a > 99 && a < 999 {\n        return true\n    }\n    \n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    \n    if a > 9999 && a < 99999 {\n\
    \        return true\n    }\n    \n    if a > 99999 && a < 999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999 && a < 9999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999 && a < 999999999 {\n        return true\n   \
    \ }\n    \n    if a > 999999999 && a < 99999999999 {\n        return true\n  \
    \  }\n    \n    if a > 99999999999 && a < 9999999999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999999999 && a < 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999 {\n     \
    \   return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 99999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6mr0hmyl_test.go:130:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ge783n_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 1 {\n        for i := 2; i <= a; i++ {\n            if i*i == a {\n    \
    \            return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp72f4xv68_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp72f4xv68_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp72f4xv68_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe14qb6kl_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd23g1clt_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbff5og58_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
