name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary\
  \ had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"\
  simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n\
  // []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"\
  }\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    words := []string{}\n    words := append(words, s)\n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  \n}\n", "    \n}\n", "    // TODO: Write your solution here\n    return []string{}\n\
    }\n", "    // TODO: Write your code here\n    return []string{}\n}\n", "    //\
    \ TODO: Write your code here\n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return nil\n\
    }\n", "    // Write your code here\n    \n    \n    \n    return []string{}\n\
    }\n", "    // TODO: Write your code here\n    return nil\n}\n", "    words :=\
    \ []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    words := []string{}\n\
    \    words := append(words, select_words_test.select_words(s, n)...)\n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    // TODO: Write your solution here\n    \n    return nil\n}\n", "    //\
    \ TODO: Write your solution here\n    return []string{}\n}\n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    words := []string{}\n    for _,\
    \ word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // Write your code here\n\
    \    \n    return nil\n}\n", "    \n}\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    \n    words := make([]string, 0)\n    \n    if len(s) == 0 {\n        return\
    \ words\n    }\n    \n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n  \
    \  for _, letter := range s {\n        if !contains(vowels, letter) {\n      \
    \      words = append(words, letter)\n        }\n    }\n    \n    return words\n\
    }\n", "    // Your code here\n    words := []string{}\n    for _, word := range\
    \ strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Write\
    \ your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == \" \" {\n            continue\n        }\n\
    \        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(strings.Repeat(\"\
    bcdfghjklmnpqrstvwxyz\", n))) == true {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    return words\n}\n", "    \n}\n", "    // TODO: Write\
    \ your code here\n    return []string{}\n}\n", "    \n    // Write your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    words :=\
    \ []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // TODO: Write your solution here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    \n}\n", "    words := []string{}\n    if len(s) ==\
    \ 0 {\n        return words\n    }\n    words := select_words_helper(s, n, words)\n\
    \    return words\n}\n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    \n}\n",
  "    // TODO: Write your code here\n    return []string{}\n}\n", "    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, word\
    \ := range strings.Split(s, \" \") {\n        if strings.Contains(word, strings.ToUpper(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    \n    return\
    \ words\n}\n", "    \n}\n", "    // TODO: Write your code here\n    \n    return\
    \ []string{}\n}\n", "    words := []string{}\n    \n    if len(s) == 0 {\n   \
    \     return words\n    }\n    \n    for _, letter := range s {\n        if letter\
    \ == \" \" {\n            continue\n        }\n        \n        if n == 0 {\n\
    \            words = append(words, letter)\n            continue\n        }\n\
    \        \n        if letter == \"a\" || letter == \"e\" || letter == \"i\" ||\
    \ letter == \"o\" || letter == \"u\" {\n            n -= 1\n            continue\n\
    \        }\n        \n        if letter == \"y\" || letter == \"u\" || letter\
    \ == \"i\" || letter == \"o\" {\n            n -= 1\n            continue\n  \
    \      }\n        \n        if letter == \"o\" || letter == \"u\" || letter ==\
    \ \"i\" || letter == \"a\" {\n            n -= 1\n            continue\n     \
    \   }\n        \n        if letter == \"e\" || letter == \"i\" || letter == \"\
    a\" || letter == \"o\" {\n            n -= 1\n            continue\n        }\n\
    \        \n        if letter == \"a\" || letter == \"e\" || letter == \"i\" ||\
    \ letter == \"o\" {\n            n -= 1\n            continue\n        }\n   \
    \     \n        if letter == \"y\" || letter == \"u\" || letter == \"i\" || letter\
    \ == \"a\" {\n            n -= 1\n            continue\n        }\n        \n\
    \        if letter == \"u\" || letter == \"i\" || letter == \"a\" || letter ==\
    \ \"o\" {\n            n -= 1\n            continue\n        }\n        \n   \
    \     if letter == \"i\" || letter == \"a\" || letter == \"o\" || letter == \"\
    u\" {\n            n -= 1\n            continue\n        }\n        \n       \
    \ if letter == \"y\" || letter == \"u\" || letter == \"i\" || letter == \"a\"\
    \ {\n            n -= 1\n            continue\n        }\n        \n        if\
    \ letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" {\n\
    \            n -= 1\n            continue\n        }\n        \n        if letter\
    \ == \"y\" || letter == \"u\" || letter == \"i\" || letter == \"a\" {\n      \
    \      n -= 1\n            continue\n        }\n        \n        if letter ==\
    \ \"u\" || letter == \"i\" || letter == \"a\" || letter == \"o\" {\n         \
    \   n -= 1\n            continue\n        }\n        \n        if letter == \"\
    i\" || letter == \"a\" || letter == \"o\" || letter == \"u\" {\n            n\
    \ -= 1\n            continue\n        }\n        \n        if letter == \"y\"\
    \ || letter == \"u\" || letter == \"i\" || letter == \"a\" {\n            n -=\
    \ 1\n            continue\n        }\n        \n        if letter == \"a\" ||\
    \ letter == \"e\" || letter == \"i\" || letter == \"o\" {\n            n -= 1\n\
    \            continue\n        }\n        \n        if letter == \"y\" || letter\
    \ == \"u\" || letter == \"i\" || letter == \"a", "    // Your code here\n    \n\
    \    return nil\n}\n", "    words := []string{}\n    \n    if s == \"\" {\n  \
    \      return words\n    }\n    \n    for _, letter := range s {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    return\
    \ words\n}\n", "    \n    // TODO: Write your code here\n    \n    return nil\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    words := []string{}\n   \
    \ words := select_words_test.select_words(s, n, words)\n    return words\n}\n",
  "    // Your code here\n    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // Write your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    \n}\n", "    \n}\n",
  "    \n}\n", "    words := []string{}\n    \n    if len(s) == 0 {\n        return\
    \ words\n    }\n    \n    for _, letter := range s {\n        if letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n    \
    \        words = append(words, letter)\n        }\n    }\n    \n    return words\n\
    }\n", "    words := []string{}\n    \n    if s == \"\" {\n        return words\n\
    \    }\n    \n    for _, letter := range s {\n        if letter == \" \" {\n \
    \           words = append(words, \"\")\n        } else {\n            count :=\
    \ 0\n            for _, letter := range s {\n                if letter == letter\
    \ {\n                    count++\n                }\n            }\n         \
    \   if count == n {\n                words = append(words, s)\n            }\n\
    \        }\n    }\n    \n    return words\n}\n", "    // Your code here\n    words\
    \ := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if\
    \ strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\")) {\n           \
    \ words = append(words, word)\n        }\n    }\n    return words\n}\n", "   \
    \ // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    \n    if s == \"\" {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == \" \" {\n            continue\n        }\n\
    \        \n        for _, word := range select_words_test.select_words(s, n) {\n\
    \            if word == letter {\n                words = append(words, word)\n\
    \            }\n        }\n    }\n    \n    return words\n}\n", "    words :=\
    \ []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n\
    \        }\n        \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u' {\n            continue\n        }\n        \n  \
    \      if s[i] == 'y' {\n            if i+1 < len(s) && s[i+1] == 'e' {\n    \
    \            continue\n            }\n        }\n        \n        if s[i] ==\
    \ 's' {\n            if i+1 < len(s) && s[i+1] == 'a' {\n                continue\n\
    \            }\n        }\n        \n        if s[i] == 't' {\n            if\
    \ i+1 < len(s) && s[i+1] == 'a' {\n                continue\n            }\n \
    \       }\n        \n        if s[i] == 'h' || s[i] == 'o' || s[i] == 'w' {\n\
    \            if i+1 < len(s) && s[i+1] == 'l' {\n                continue\n  \
    \          }\n        }\n        \n        if s[i] == 'l' || s[i] == 'l' || s[i]\
    \ == 'e' {\n            if i+1 < len(s) && s[i+1] == 'l' {\n                continue\n\
    \            }\n        }\n        \n        if s[i] == 'd' || s[i] == 'o' ||\
    \ s[i] == 'm' {\n            if i+1 < len(s) && s[i+1] == 'a' {\n            \
    \    continue\n            }\n        }\n        \n        if s[i] == 'c' || s[i]\
    \ == 'a' || s[i] == 's' {\n            if i+1 < len(s) && s[i+1] == 'a' {\n  \
    \              continue\n            }\n        }\n        \n        if s[i] ==\
    \ 'm' || s[i] == 'a' || s[i] == 'm' {\n            if i+1 < len(s) && s[i+1] ==\
    \ 'a' {\n                continue\n            }\n        }\n        \n      \
    \  if s[i] == 'p' || s[i] == 'a' || s[i] == 'p' {\n            if i+1 < len(s)\
    \ && s[i+1] == 'a' {\n                continue\n            }\n        }\n   \
    \     \n        if s[i] == 'f' || s[i] == 'a' || s[i] == 'f' {\n            if\
    \ i+1 < len(s) && s[i+1] == 'a' {\n                continue\n            }\n \
    \       }\n        \n        if s[i] == 'b' || s[i] == 'e' || s[i] == 'b' {\n\
    \            if i+1 < len(s) && s[i+1] == 'e' {\n                continue\n  \
    \          }\n        }\n        \n        if s[i] == 'r' || s[i] == 'e' || s[i]\
    \ == 'r' {\n            if i+1 < len(s) && s[i+1] == 'e' {\n                continue\n\
    \            }\n        }\n        \n        if s[i] == 'k' || s[i] == 'e' ||\
    \ s[i] == 'k' {\n            if i+1 < len(s) && s[i+1] == 'e' {\n            \
    \    continue\n            }\n        }", "    words := []string{}\n    words\
    \ := strings.Split(s, \" \")\n    for _, word := range words {\n        if strings.Contains(word,\
    \ \"a\") {\n            fmt.Println(\"a\")\n        }\n    }\n    return words\n\
    }\n</code>\n<|/ q tags=go |>\n<| c |>\nWhat is the question?\n<|/ c |>\n<| c |>\n\
    The question is how do I get the program to return a list of words that contain\
    \ the letter \"a\" in the string\n<|/ c |>\n<| c |>\nThe question is not clear.\
    \ Do you want to find all words that contain \"a\" in the string? Or do you want\
    \ to find all words that contain \"a\" in the first n characters of the string?\
    \ Or do you want to find all words that contain \"a\" in the first n characters\
    \ of the first n characters of the string? Or do you want to find all words that\
    \ contain \"a\" in the first n characters of the first n characters of the first\
    \ n characters of the string? Or do you want to find all words that contain \"\
    a\" in the first n characters of the first n characters of the first n characters\
    \ of the first n characters of the string? Or do you want to find all words that\
    \ contain \"a\" in the first n characters of the first n characters of the first\
    \ n characters of the first n characters of the first n characters of the first\
    \ n characters of the string?\n<|/ c |>\n<| c |>\nI want to find all words that\
    \ contain \"a\" in the first n characters of the string\n<|/ c |>\n<| c |>\nI\
    \ edited the question to make it clearer\n<|/ c |>\n<| a tags=go |>\nThe question\
    \ is not clear. Do you want to find all words that contain \"a\" in the string?\
    \ Or do you want to find all words that contain \"a\" in the first n characters\
    \ of the string? Or do you want to find all words that contain \"a\" in the first\
    \ n characters of the first n characters of the string? Or do you want to find\
    \ all words that contain \"a\" in the first n characters of the first n characters\
    \ of the first n characters of the string? Or do you want to find all words that\
    \ contain \"a\" in the first n characters of the first n characters of the first\
    \ n characters of the first n characters of the string? Or do you want to find\
    \ all words that contain \"a\" in the first n characters of the first n characters\
    \ of the first n characters of the first n characters of the first n characters\
    \ of the string?\nI assume you want to find all words that contain \"a\" in the\
    \ first n characters of the string. \nThe function select_words returns a slice\
    \ of strings. A slice is a view of a slice of elements. A slice is like a pointer\
    \ to a pointer to a pointer to a pointer to a pointer to a pointer to a pointer\
    \ to a pointer to a pointer to a ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    words := []string{}\n   \
    \ \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    return words\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    // TODO: Write your solution here\n    return\
    \ []string{}\n}\n", "    \n}\n", "    // TODO: Write your code here\n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return nil\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return nil\n}\n", "    \n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    \n}\n", "    // TODO: Write your code here\n    return\
    \ []string{}\n}\n", "    // TODO: Write your solution here\n    return []string{}\n\
    }\n", "    // TODO: Write your code here\n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // TODO: Write your\
    \ code here\n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    words := make([]string, 0)\n    if len(s) == 0 {\n  \
    \      return words\n    }\n    words := select_words_helper(s, n, words)\n  \
    \  return words\n}\n", "    words := []string{}\n    \n    if s == \"\" {\n  \
    \      return words\n    }\n    \n    for _, letter := range s {\n        if letter\
    \ == \" \" {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(fmt.Sprintf(\"%c\", letter))) {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n\
    \    }\n    \n    for _, letter := range s {\n        if letter == \" \" {\n \
    \           continue\n        }\n        \n        if letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" {\n      \
    \      continue\n        }\n        \n        if letter == \"y\" {\n         \
    \   if n == 1 {\n                continue\n            }\n            \n     \
    \       if n == 2 {\n                continue\n            }\n            \n \
    \           if n == 3 {\n                continue\n            }\n           \
    \ \n            if n == 4 {\n                continue\n            }\n       \
    \     \n            if n == 5 {\n                continue\n            }\n   \
    \         \n            if n == 6 {\n                continue\n            }\n\
    \            \n            if n == 7 {\n                continue\n           \
    \ }\n            \n            if n == 8 {\n                continue\n       \
    \     }\n            \n            if n == 9 {\n                continue\n   \
    \         }\n            \n            if n == 10 {\n                continue\n\
    \            }\n            \n            if n == 11 {\n                continue\n\
    \            }\n            \n            if n == 12 {\n                continue\n\
    \            }\n            \n            if n == 13 {\n                continue\n\
    \            }\n            \n            if n == 14 {\n                continue\n\
    \            }\n            \n            if n == 15 {\n                continue\n\
    \            }\n            \n            if n == 16 {\n                continue\n\
    \            }\n            \n            if n == 17 {\n                continue\n\
    \            }\n            \n            if n == 18 {\n                continue\n\
    \            }\n            \n            if n == 19 {\n                continue\n\
    \            }\n            \n            if n == 20 {\n                continue\n\
    \            }\n            \n            if n == 21 {\n                continue\n\
    \            }\n            \n            if n == 22 {\n                continue\n\
    \            }\n            \n            if n == 23 {\n                continue\n\
    \            }\n            \n            if n == 24 {\n                continue\n\
    \            }\n            \n            if n == 25 {\n                continue\n\
    \            }\n            \n            if n == 26 {\n                continue\n\
    \            }\n            \n            if n == 27 {\n                continue\n\
    \            }\n            \n            if n == 28 {\n                continue\n\
    \            }\n            \n            if n == 29 {\n                continue\n\
    \            }\n            \n            if n == 30 {\n                continue\n\
    \            }\n            \n            if n == 31 {\n                continue\n\
    \            }\n            \n            if n == 32 {\n                continue\n\
    \            }\n            \n            if n == 33 {\n                continue\n\
    \            }\n            \n            if n == 34 {\n                continue\n\
    \            }\n            \n            if n == 35 {\n                continue\n\
    \            }\n            \n            if n == 36 {\n                continue\n\
    \            }\n            \n            if n == 37 {\n                continue\n\
    \            }\n            \n            if n == 38 {\n                continue\n\
    \            }\n            \n            if n == 39 {\n                continue\n\
    \            }\n            \n            if n == 40 {\n                continue\n\
    \            }\n            \n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // TODO: Write your solution here\n    \n    return []string{}\n}\n",
  "    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n   \
    \ }\n    \n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n    for _, letter\
    \ := range s {\n        if !contains(vowels, letter) {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your solution here\n \
    \   return []string{}\n}\n", "    \n    // Your code here\n    \n    return []string{}\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    words :=\
    \ []string{}\n    for _, word := range strings.Split(s, \" \") {\n        letters\
    \ := strings.Split(word, \"\")\n        if len(letters) == n {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    words := []string{}\n   \
    \ for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    words := make([]string, 0)\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune(\"\
    bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n       \
    \ }\n    }\n    return words\n}\n", "    \n}\n", "    // Your code here\n    \n\
    \    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    \n}\n", "    words := []string{}\n    words := append(words, s)\n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  // Write your code here\n    \n    \n    return []string{}\n}\n", "    words\
    \ := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for _,\
    \ word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ vowels) {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // Your code here\n    words := []string{}\n    \n    if len(s)\
    \ == 0 {\n        return words\n    }\n    \n    vowels := []rune{'a', 'e', 'i',\
    \ 'o', 'u'}\n    \n    for _, letter := range s {\n        if letter == 'a' ||\
    \ letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n       \
    \     continue\n        }\n        \n        for _, vowel := range vowels {\n\
    \            if letter == vowel {\n                continue \n            }\n\
    \        }\n        \n        words = append(words, letter)\n    }\n    \n   \
    \ return words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // TODO: Write your solution here\n    return []string{}\n}\n", "    \n}\n",
  "    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n   \
    \ }\n    \n    for _, letter := range s {\n        if letter == \" \" {\n    \
    \        continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+strings.ToLower(letter)+",
  "    words := make([]string, 0)\n    words := append(words, s)\n    return words\n\
    }\n", "    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n\
    \    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n  \
    \          continue\n        }\n        \n        for j := 0; j < len(s); j++\
    \ {\n            if s[i] == s[j] {\n                continue \n            }\n\
    \        }\n        \n        words = append(words, s[i])\n    }\n    \n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  // Your code here\n    \n    return []string{}\n}\n", "    // TODO: Write your\
    \ code here\n    return nil\n}\n", "    // Your code here\n    words := make([]string,\
    \ 0)\n    if len(s) == 0 {\n        return words\n    }\n    vowels := []rune(\"\
    aeiou\")\n    for _, letter := range s {\n        if !contains(vowels, letter)\
    \ {\n            words = append(words, letter)\n        }\n    }\n    return words\n\
    }\n", "    // Write your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    words := []string{}\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, letter := range s {\n        if strings.Contains(vowels,\
    \ letter) {\n            continue\n        }\n        if strings.Contains(consonants,\
    \ letter) {\n            words = append(words, letter)\n        }\n    }\n   \
    \ return words\n}\n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    \n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    \n    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    \n    for _, letter := range\
    \ s {\n        if letter == \" \" {\n            continue\n        }\n       \
    \ \n        if strings.Contains(vowels, letter) {\n            continue\n    \
    \    }\n        \n        if strings.Contains(consonants, letter) {\n        \
    \    words = append(words, letter)\n        }\n    }\n    \n    return words\n\
    }\n", "    words := []string{}\n    if len(s) == 0 {\n        return words\n \
    \   }\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    for _, r := range s\
    \ {\n        if !contains(vowels, r) {\n            words = append(words, string(r))\n\
    \        }\n    }\n    return words\n}\n", "    words := []string{}\n    for _,\
    \ word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return nil\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your code here\n    return\
    \ nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n\
    \        \n        for j := 0; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                continue \n            }\n        }\n        \n        words\
    \ = append(words, s[:i])\n    }\n    \n    return words\n}\n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // TODO: Write your solution here\n    return []string{}\n\
    }\n", "    words := []string{}\n    \n    // TODO: Write your solution here\n\
    \    \n    return words\n}\n", "    words := []string{}\n    for _, word := range\
    \ strings.Split(s, \" \") {\n        if strings.ContainsAny(word, consonants)\
    \ {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    words := []string{}\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if strings.ContainsAny(word, consonants) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    // TODO: Write your solution\
    \ here\n    return []string{}\n}\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    \n    // Write your\
    \ code here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    words := []string{}\n    \n    if len(s) ==\
    \ 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] == ' ' {\n            words = append(words, s[:i])\n        \
    \    s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] == ' ' || s[i] == ' ' {\n            words = append(words, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n            words = append(words,\
    \ s[:i])\n            s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n            words =\
    \ append(words, s[:i])\n            s = s[i+1:]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n       \
    \     words = append(words, s[:i])\n            s = s[i+1:]\n        }\n    }\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == '\
    \ ' {\n            words = append(words, s[:i])\n            s = s[i+1:]\n   \
    \     }\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == '\
    \ ' || s[i] == ' ' {\n            words = append(words, s[:i])\n            s\
    \ = s[i+1:]\n        }\n    }\n    \n    for i := 0; i < len(s); i++ {\n     \
    \   if s[i] == ' ' || s[i] == ' ' {\n            words = append(words, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n            words = append(words,\
    \ s[:i])\n            s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n            words =\
    \ append(words, s[:i])\n            s = s[i+1:]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == ' ' {\n       \
    \     words = append(words, s[:i])\n            s = s[i+1:]\n        }\n    }\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == '\
    \ ' {\n            words = append(words, s[:i])\n            s = s[i+1:]\n   \
    \     }\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == '\
    \ ' || ", "    // Your code here\n    \n    return []string{}\n}\n", "    words\
    \ := []string{}\n    \n    if s == \"\" {\n        return words\n    }\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n\
    \        }\n        \n        for j := 0; j < len(s); j++ {\n            if s[i]\
    \ == s[j] {\n                words = []string{s[i:j+1]}\n                break\n\
    \            }\n        }\n    }\n    \n    return words\n}\n", "    words :=\
    \ []string{}\n    words := append(words, s)\n    return words\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    \n}\n", "    // TODO: Write your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your solution here\n \
    \   return nil\n}\n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    \n}\n", "    // Your code\
    \ here\n    words := make([]string, 0)\n    words := append(words, s)\n    return\
    \ words\n}\n", "    // TODO: Write your solution here\n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    \n    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    // TODO:\
    \ Write your solution here\n    return nil\n}\n", "    words := []string{}\n \
    \   \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    return words\n}\n", "    words := []string{}\n  \
    \  \n    if s == \"\" {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == \" \" {\n            continue\n        }\n\
    \        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter[:len(letter)-n]))\
    \ {\n            words = append(words, letter)\n        }\n    }\n    \n    return\
    \ words\n}\n", "    words := []string{}\n    \n    if len(s) == 0 {\n        return\
    \ words\n    }\n    \n    for _, char := range s {\n        if char == ' ' ||\
    \ char == '\\t' || char == '\\n' || char == '\\r' || char == '\\v' || char ==\
    \ '\\f' || char == '\\a' {\n            continue\n        }\n        \n      \
    \  if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\
    \ {\n            words = append(words, char)\n            continue\n        }\n\
    \        \n        if char == 'y' || char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' {\n            words = append(words, char)\n \
    \           continue\n        }\n        \n        if char == 'h' || char == 'e'\
    \ || char == 'l' || char == 'l' || char == 'o' || char == 'r' || char == 's' ||\
    \ char == 't' || char == 'w' || char == 'y' {\n            words = append(words,\
    \ char)\n            continue\n        }\n        \n        if char == 'd' ||\
    \ char == 'o' || char == 'm' || char == 'p' || char == 'r' || char == 't' || char\
    \ == 'w' || char == 'y' {\n            words = append(words, char)\n         \
    \   continue\n        }\n        \n        if char == 'b' || char == 'a' || char\
    \ == 'l' || char == 'l' || char == 'o' || char == 'r' || char == 's' || char ==\
    \ 't' || char == 'w' || char == 'y' {\n            words = append(words, char)\n\
    \            continue\n        }\n        \n        if char == 'c' || char ==\
    \ 'h' || char == 'e' || char == 'l' || char == 'l' || char == 'o' || char == 'r'\
    \ || char == 's' || char == 't' || char == 'w' || char == 'y' {\n            words\
    \ = append(words, char)\n            continue\n        }\n        \n        if\
    \ char == 'f' || char == 'i' || char == 'l' || char == 'l' || char == 'o' || char\
    \ == 'r' || char == 's' || char == 't' || char == 'w' || char == 'y' {\n     \
    \       words = append(words, char)\n            continue\n        }\n       \
    \ \n        if char == 'g' || char == 'l' || char == 'l' || char == 'o' || char\
    \ == 'r' || char == 's' || char == 't' || char == 'w' || char == 'y' {\n     \
    \       words = append(words, char)\n            continue\n        }\n       \
    \ \n        if char == 'k' || char == 'l' || char == 'l' || char == 'o' || char\
    \ == 'r' || char == 's' || char == 't' || char == 'w' || char == 'y' {\n     \
    \       words = append(words, char)\n            continue\n        }\n        ",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // TODO: Write your\
    \ code here\n    return []string{}\n}\n", "    words := []string{}\n    for _,\
    \ word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // TODO: Write your solution\
    \ here\n    return []string{}\n}\n", "    words := []string{}\n    \n    if len(s)\
    \ == 0 {\n        return words\n    }\n    \n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    \n    return words\n}\n", "   \
    \ words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n\
    \    \n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return nil\n}\n", "    // Your code here\n\
    \    words := make([]string, 0)\n    for _, v := range s {\n        if v == 'a'\
    \ || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            words = append(words,\
    \ v)\n        }\n    }\n    return words\n}\n", "    // TODO: Write your solution\
    \ here\n    return []string{}\n}\n", "    words := []string{}\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        count := 0\n        for _, letter\
    \ := range word {\n            if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n                count++\n         \
    \   }\n        }\n        if count == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    \n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    \n    // TODO: Write your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Write your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    words := []string{}\n    \n    if s == \"\" {\n \
    \       return words\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y' {\n            words = append(words, char)\n        }\n    }\n    \n   \
    \ for _, char := range s {\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' || char == 'y' {\n            words = append(words,\
    \ char)\n        }\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y' {\n            words = append(words, char)\n        }\n    }\n    \n   \
    \ for _, char := range s {\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' || char == 'y' {\n            words = append(words,\
    \ char)\n        }\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y' {\n            words = append(words, char)\n        }\n    }\n    \n   \
    \ for _, char := range s {\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' || char == 'y' {\n            words = append(words,\
    \ char)\n        }\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y' {\n            words = append(words, char)\n        }\n    }\n    \n   \
    \ for _, char := range s {\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' || char == 'y' {\n            words = append(words,\
    \ char)\n        }\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y' {\n            words = append(words, char)\n        }\n    }\n    \n   \
    \ for _, char := range s {\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' || char == 'y' {\n            words = append(words,\
    \ char)\n        }\n    }\n    \n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char ==\
    \ 'y"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
