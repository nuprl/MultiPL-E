language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]rune(letter)[0])\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ttt074c_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp5ttt074c_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter != ' ' {\n            result\
    \ += string(letter)\n        } else {\n            result += string(letter)\n\
    \        }\n    }\n    for _, vowel := range vowels {\n        result += string(vowel)\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpzwl2pgj7_test.go:51: expected 'tgst', got 'TESTaeiou'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpzwl2pgj7_test.go:51: expected 'mWDCSKR',\
    \ got 'Mudasiraeiou'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzwl2pgj7_test.go:51:\
    \ expected 'ygs', got 'YESaeiou'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmpzwl2pgj7_test.go:51: expected 'tHKS KS C MGSSCGG', got 'This is a\
    \ messageaeiou'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzwl2pgj7_test.go:51:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEaeiou'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075832
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]rune(letter)[0])\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string([]rune(letter)[1])\n\
    \        } else {\n            result += string([]rune(letter)[2])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_43ttib7_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_43ttib7_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    /tmp/tmp_43ttib7_test.go:29:37: cannot convert letter (variable of type rune)
    to type []rune

    /tmp/tmp_43ttib7_test.go:31:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message += \"A\"\n    message +=\
    \ \"A\"\n    message += \"A\"\n    message += \"A\"\n    message += \"A\"\n  \
    \  message += \"A\"\n    message += \"A\"\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6f6jfmp__test.go:105:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5s4t4wv7_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string([]rune(letter)[0])\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5puv61e9_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp5puv61e9_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter != ' ' {\n            result\
    \ += string(letter)\n        } else {\n            result += string(letter)\n\
    \        }\n    }\n    for _, vowel := range vowels {\n        result += string(vowel)\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpzwl2pgj7_test.go:51: expected 'tgst', got 'TESTaeiou'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpzwl2pgj7_test.go:51: expected 'mWDCSKR',\
    \ got 'Mudasiraeiou'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzwl2pgj7_test.go:51:\
    \ expected 'ygs', got 'YESaeiou'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmpzwl2pgj7_test.go:51: expected 'tHKS KS C MGSSCGG', got 'This is a\
    \ messageaeiou'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzwl2pgj7_test.go:51:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEaeiou'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075832
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"/\"\n    message +=\
    \ \"\\\\\"\n    message += \"@\"\n    message += \"=\"\n    message += \"+\"\n\
    \    message += \"$\"\n    message += \"%\"\n    message += \"&\"\n    message\
    \ += \"(\"\n    message += \")\"\n    message += \"*\"\n    message += \"+\"\n\
    \    message += \"%\"\n    message += \"!\"\n    message += \"?\"\n    message\
    \ += \"~\"\n    message += \"^\"\n    message += \"_\"\n    message += \"-\"\n\
    \    message += \"_\"\n    message += \"/\"\n    message += \"\\\\\"\n    message\
    \ += \"@\"\n    message += \"=\"\n    message += \"+\"\n    message += \"$\"\n\
    \    message += \"%\"\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxfq_0c36_test.go:110:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5s4t4wv7_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"tHKS KS C MGSSCGG\"\n    \
    \    for _, vowel := range vowels {\n            if letter == vowel {\n      \
    \          result += fmt.Sprintf(\"%c\", letter)\n            }\n        }\n \
    \   }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpdoucg3y9_test.go:49: expected 'tgst', got 'tHKS KS C MGSSCGGtHKS KS\
    \ C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGG'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpdoucg3y9_test.go:49: expected 'mWDCSKR', got 'tHKS KS C\
    \ MGSSCGGtHKS KS C MGSSCGGutHKS KS C MGSSCGGtHKS KS C MGSSCGGatHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGitHKS KS C MGSSCGG'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n\
    \        tmpdoucg3y9_test.go:49: expected 'ygs', got 'tHKS KS C MGSSCGGtHKS KS\
    \ C MGSSCGGtHKS KS C MGSSCGG'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmpdoucg3y9_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHKS KS C\
    \ MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGitHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGitHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGatHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGetHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGatHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGe'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpdoucg3y9_test.go:49: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'tHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGotHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS\
    \ KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGGtHKS KS C MGSSCGG'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075832
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        result += string(swapCase(letter))\n    }\n    for _, vowel := range\
    \ vowels {\n        result = result[:vowel] + result[vowel+1:]\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9hbt5da_test.go:21:26: undefined: swapCase

    /tmp/tmpu9hbt5da_test.go:23:27: undefined: vowels

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptuqta_ub_test.go:62:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            continue\n        }\n        result +=\
    \ \"K\"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2s2a23m4_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2s2a23m4_test.go:24:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 2)\n    message := strings.Replace(message, \"e\", \"E\", 2)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 2)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 2)\n    message := strings.Replace(message, \"u\", \"U\", 2)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 2)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 3)\n    message := strings.Replace(message, \"e\", \"E\", 3)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 3)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 3)\n    message := strings.Replace(message, \"u\", \"U\", 3)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 3)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 4)\n    message := strings.Replace(message, \"e\", \"E\", 4)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 4)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 4)\n    message := strings.Replace(message, \"u\", \"U\", 4)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 4)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 5)\n    message := strings.Replace(message, \"e\", \"E\", 5)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 5)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 5)\n    message := strings.Replace(message, \"u\", \"U\", 5)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 5)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 6)\n    message := strings.Replace(message, \"e\", \"E\", 6)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 6)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 6)\n    message := strings.Replace(message, \"u\", \"U\", 6)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 6)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 7)\n    message := strings.Replace(message, \"e\", \"E\", 7)\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedkj8vnu_test.go:59:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := []rune(\"aeiouy\")\n\
    \    for _, letter := range message {\n        result += \"t\"\n        for i\
    \ := 0; i < len(letter); i++ {\n            result += \"k\"\n            if letter[i]\
    \ >= 'a' && letter[i] <= 'z' {\n                result += letter[i] - 'a'\n  \
    \          } else {\n                result += letter[i]\n            }\n    \
    \    }\n        result += \"s\"\n    }\n    for _, vowel := range vowels {\n \
    \       result = result[:len(result)-len(vowel)] + vowel + result[len(result)-len(vowel):]\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0nzw_sb_test.go:23:29: invalid argument: letter (variable of type rune)
    for len

    /tmp/tmpy0nzw_sb_test.go:25:22: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmpy0nzw_sb_test.go:26:33: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmpy0nzw_sb_test.go:28:33: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmpy0nzw_sb_test.go:34:24: invalid operation: result[:len(result) - len(vowel)]
    + vowel (mismatched types string and rune)

    /tmp/tmpy0nzw_sb_test.go:34:42: invalid argument: vowel (variable of type rune)
    for len

    /tmp/tmpy0nzw_sb_test.go:34:83: invalid argument: vowel (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7pcverv_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string(letter)\n    }\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += string(letter)\n            continue\n\
    \        }\n        result += \"K\"\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3ons4v1_test.go:50: expected 'tgst', got 'TESTKKKK'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpo3ons4v1_test.go:50: expected 'mWDCSKR',\
    \ got 'MudasirKuKaKiK'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n       \
    \ tmpo3ons4v1_test.go:50: expected 'ygs', got 'YESKKK'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpo3ons4v1_test.go:50: expected 'tHKS KS C MGSSCGG', got 'This\
    \ is a messageKKiKKiKKaKKeKKaKe'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpo3ons4v1_test.go:50: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I\
    \ DoNt KnOw WhAt tO WrItEKKKoKKKKKKKKKKKKKKKKKKKKK'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075832
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp602clko__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp602clko__test.go:24:30: undefined: unicode

    /tmp/tmp602clko__test.go:29:30: undefined: unicode

    /tmp/tmp602clko__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxh0suj6w_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxh0suj6w_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter + string(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavyr9nqu_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpavyr9nqu_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        result += string(letter)\n    }\n\
    \    for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string(vowels[len(vowels)-1])\n        } else {\n            result += string(vowels[len(vowels)-1])\n\
    \            result += string(vowels[len(vowels)-2])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp9rxakrbn_test.go:52: expected 'tgst', got 'TESTyuyuyuyu'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmp9rxakrbn_test.go:52: expected\
    \ 'mWDCSKR', got 'Mudasiryuyyuyyuyyu'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n\
    \        tmp9rxakrbn_test.go:52: expected 'ygs', got 'YESyuyuyu'\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmp9rxakrbn_test.go:52: expected 'tHKS\
    \ KS C MGSSCGG', got 'This is a messageyuyuyyuyuyyuyuyyuyuyyuyuyyuy'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmp9rxakrbn_test.go:52: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEyuyuyuyyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyuyu'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075832
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter != ' ' {\n            result\
    \ += string(letter)\n        } else {\n            result += string(letter)\n\
    \        }\n    }\n    for _, vowel := range vowels {\n        result += \"A\"\
    \n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8kfoln0_test.go:28:12: vowel declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[int(letter-65)])\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmaot35q_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"@\"\n    message +=\
    \ \"$\"\n    message += \"%\"\n    message += \"&\"\n    message += \"(\"\n  \
    \  message += \")\"\n    message += \"[\"\n    message += \"]\"\n    message +=\
    \ \"{\"\n    message += \"}\"\n    message += \"~\"\n    message += \"\\\"\"\n\
    \    message += \"'\"\n    message += \"<\"\n    message += \">\"\n    message\
    \ += \"|\"\n    message += \"\\\\\"\n    message += \"^\"\n    message += \"_\"\
    \n    message += \"|\"\n    message += \"-\"\n    message += \"_\"\n    message\
    \ += \"|\"\n    message += \"-\"\n    message += \"_\"\n    message += \"|\"\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8xdqtev2_test.go:109:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"A\", \"a\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"e\", 1)\n    message := strings.Replace(message, \"I\", \"i\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"o\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"u\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"A\", \"a\", 1)\n    message := strings.Replace(message, \"E\", \"e\", 1)\n\
    \    message := strings.Replace(message, \"I\", \"i\", 1)\n    message := strings.Replace(message,\
    \ \"O\", \"o\", 1)\n    message := strings.Replace(message, \"U\", \"u\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"A\", \"a\", 1)\n\
    \    message := strings.Replace(message, \"E\", \"e\", 1)\n    message := strings.Replace(message,\
    \ \"I\", \"i\", 1)\n    message := strings.Replace(message, \"O\", \"o\", 1)\n\
    \    message := strings.Replace(message, \"U\", \"u\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"A\", \"a\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"e\", 1)\n    message := strings.Replace(message, \"I\", \"i\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"o\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"u\", 1)\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ka9an08_test.go:60:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"t\"\n        for _, vowel\
    \ := range vowels {\n            if letter == vowel {\n                result\
    \ += letter\n                result += letter\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz0ptk5f_test.go:25:17: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmppz0ptk5f_test.go:26:17: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ vowel := range \"aeiou\" {\n        result += string(unicode.ToLower(vowel))\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprizp3g88_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmprizp3g88_test.go:24:30: undefined: unicode

    /tmp/tmprizp3g88_test.go:28:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"T\"\n        result += \"\
    K\"\n        result += \"S\"\n        result += \"C\"\n        result += \"M\"\
    \n        result += \"G\"\n        result += \"S\"\n        result += \"C\"\n\
    \        result += \"G\"\n        result += \"S\"\n        result += \"C\"\n \
    \       result += \"G\"\n        result += \"S\"\n        result += \"C\"\n  \
    \      result += \"G\"\n        result += \"S\"\n        result += \"C\"\n   \
    \     result += \"G\"\n        result += \"S\"\n        result += \"C\"\n    \
    \    result += \"G\"\n        result += \"S\"\n        result += \"C\"\n     \
    \   result += \"G\"\n        result += \"S\"\n        result += \"C\"\n      \
    \  result += \"G\"\n        result += \"S\"\n        result += \"C\"\n       \
    \ result += \"G\"\n        result += \"S\"\n        result += \"C\"\n        result\
    \ += \"G\"\n        result += \"S\"\n        result += \"C\"\n        result +=\
    \ \"G\"\n        result += \"S\"\n        result += \"C\"\n        result += \"\
    G\"\n        result += \"S\"\n        result += \"C\"\n        result += \"G\"\
    \n        result += \"S\"\n        result += \"C\"\n        result += \"G\"\n\
    \        result += \"S\"\n        result += \"C\"\n        result += \"G\"\n \
    \       result += \"S\"\n        result += \"C\"\n        result += \"G\"\n  \
    \      result += \"S\"\n        result += \"C\"\n        result += \"G\"\n   \
    \     result += \"S\"\n        result += \"C\"\n        result += \"G\"\n    \
    \    result += \"S\"\n        result += \"C\"\n        result += \"G\"\n     \
    \   result += \"S\"\n        result += \"C\"\n        result += \"G\"\n      \
    \  result += \"S\"\n        result += \"C\"\n        result += \"G\"\n       \
    \ result += \"S\"\n        result += \"C\"\n        result += \"G\"\n        result\
    \ += \"S\"\n        result += \"C\"\n        result += \"G\"\n        result +=\
    \ \"S\"\n        result += \"C\"\n        result += \"G\"\n        result += \"\
    S\"\n        result += \"C\"\n        result += \"G\"\n        result += \"S\"\
    \n        result += \"C\"\n        result += \"G\"\n        \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpll496bgg_test.go:104:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"0\"\n    message += \"1\"\n    message +=\
    \ \"2\"\n    message += \"3\"\n    message += \"4\"\n    message += \"5\"\n  \
    \  message += \"6\"\n    message += \"7\"\n    message += \"8\"\n    message +=\
    \ \"9\"\n    message += \"-\"\n    message += \"0\"\n    message += \"1\"\n  \
    \  message += \"2\"\n    message += \"3\"\n    message += \"4\"\n    message +=\
    \ \"5\"\n    message += \"6\"\n    message += \"7\"\n    message += \"8\"\n  \
    \  message += \"9\"\n    message += \"-\"\n    message += \"0\"\n    message +=\
    \ \"1\"\n    message += \"2\"\n    message += \"3\"\n    message += \"4\"\n  \
    \  message += \"5\"\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnfkswegx_test.go:111:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string([]byte{letter})\n        }\n    }\n    for _, letter :=\
    \ range result {\n        for i := 0; i < len(letter); i++ {\n            if letter[i]\
    \ == 'a' || letter[i] == 'e' || letter[i] == 'i' || letter[i] == 'o' || letter[i]\
    \ == 'u' {\n                letter[i] = letter[i] - 'a'\n                letter[i]\
    \ += 'A'\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4a57loa_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpd4a57loa_test.go:24:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpd4a57loa_test.go:28:29: invalid argument: letter (variable of type rune)
    for len

    /tmp/tmpd4a57loa_test.go:29:22: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmpd4a57loa_test.go:30:35: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmpd4a57loa_test.go:31:23: invalid operation: cannot index letter (variable
    of type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphvnl8xxf_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075830
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[int(letter)\
    \ - 1])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw109gjm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"A\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"F\", 1)\n    message := strings.Replace(message, \"I\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"Q\", 1)\n    message := strings.Replace(message, \"Y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"F\", 1)\n    message := strings.Replace(message, \"i\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"Q\", 1)\n    message := strings.Replace(message, \"y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"B\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"F\", \"E\", 1)\n    message := strings.Replace(message, \"J\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"P\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"Q\", \"U\", 1)\n    message := strings.Replace(message, \"R\", \"Y\", 1)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldvbm4u0_test.go:19:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:21:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:21:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:22:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:22:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:23:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:23:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += \"b\"\n        } else if letter == 'e' {\n            result += \"f\"\n \
    \       } else if letter == 'i' {\n            result += \"g\"\n        } else\
    \ if letter == 'o' {\n            result += \"h\"\n        } else if letter ==\
    \ 'u' {\n            result += \"j\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    for _, vowel := range vowels {\n        result\
    \ += \"a\"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvl93jyv_test.go:33:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxvl93jyv_test.go:36:12: vowel declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[int(letter-65)])\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmaot35q_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        result += \"A\"\n    }\n    for _, letter := range message {\n  \
    \      if letter != \"A\" {\n            result += \"B\"\n        }\n    }\n \
    \   for _, letter := range message {\n        if letter != \"A\" && letter !=\
    \ \"B\" {\n            result += \"C\"\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter != \"A\" && letter != \"B\" && letter !=\
    \ \"C\" {\n            result += \"D\"\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter != \"A\" && letter != \"B\" && letter !=\
    \ \"C\" && letter != \"D\" {\n            result += \"E\"\n        }\n    }\n\
    \    for _, letter := range message {\n        if letter != \"A\" && letter !=\
    \ \"B\" && letter != \"C\" && letter != \"D\" && letter != \"E\" {\n         \
    \   result += \"F\"\n        }\n    }\n    for _, letter := range message {\n\
    \        if letter != \"A\" && letter != \"B\" && letter != \"C\" && letter !=\
    \ \"D\" && letter != \"E\" && letter != \"F\" {\n            result += \"G\"\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter !=\
    \ \"A\" && letter != \"B\" && letter != \"C\" && letter != \"D\" && letter !=\
    \ \"E\" && letter != \"F\" && letter != \"G\" {\n            result += \"H\"\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter !=\
    \ \"A\" && letter != \"B\" && letter != \"C\" && letter != \"D\" && letter !=\
    \ \"E\" && letter != \"F\" && letter != \"G\" && letter != \"H\" {\n         \
    \   result += \"I\"\n        }\n    }\n    for _, letter := range message {\n\
    \        if letter != \"A\" && letter != \"B\" && letter != \"C\" && letter !=\
    \ \"D\" && letter != \"E\" && letter != \"F\" && letter != \"G\" && letter !=\
    \ \"H\" && letter != \"I\" {\n            result += \"J\"\n        }\n    }\n\
    \    for _, letter := range message {\n        if letter != \"A\" && letter !=\
    \ \"B\" && letter != \"C\" && letter != \"D\" && letter != \"E\" && letter !=\
    \ \"F\" && letter != \"G\" && letter != \"H\" && letter != \"I\" && letter !=\
    \ \"J\" {\n            result += \"K\"\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter != \"A\" && letter != \"B\" && letter !=\
    \ \"C\" && letter != \"D\" && letter != \"E\" && letter != \"F\" && letter !=\
    \ \"G\" && letter != \"H\" && letter != \"I\" && letter != \"J\" && letter !=\
    \ \"K\" {\n            result += \"L\"\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpct4syeq7_test.go:77:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075832
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    message := strings.ToLower(message)\n\
    \    for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(unicode.ToLower(letter))\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string(unicode.ToUpper(letter))\n        } else {\n   \
    \         result += string(unicode.ToLower(letter))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf32ek0t4_test.go:20:13: no new variables on left side of :=

    /tmp/tmpf32ek0t4_test.go:20:16: undefined: strings

    /tmp/tmpf32ek0t4_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpf32ek0t4_test.go:25:30: undefined: unicode

    /tmp/tmpf32ek0t4_test.go:30:30: undefined: unicode

    /tmp/tmpf32ek0t4_test.go:32:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += string(letter)\n    }\n    for\
    \ _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += string(vowels[2])\n        } else if letter == 'e' {\n            result\
    \ += string(vowels[1])\n        } else if letter == 'i' {\n            result\
    \ += string(vowels[0])\n        } else if letter == 'o' {\n            result\
    \ += string(vowels[3])\n        } else if letter == 'u' {\n            result\
    \ += string(vowels[4])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp77bk4ppa_test.go:57: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp77bk4ppa_test.go:57: expected 'mWDCSKR', got 'Mudasiruia'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp77bk4ppa_test.go:57:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp77bk4ppa_test.go:57: expected 'tHKS KS C MGSSCGG', got 'This is a messageaaieie'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp77bk4ppa_test.go:57:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEo'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwad8k7u__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpwad8k7u__test.go:24:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:29:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        result += \"tHKS KS C MGSSCGG\"[letter]\n\
    \    }\n    for _, vowel := range vowels {\n        result += \"tHKS KS C MGSSCGG\"\
    [vowel]\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcxaob70_test.go:22:9: invalid operation: result += "tHKS KS C MGSSCGG"[letter]
    (mismatched types string and byte)

    /tmp/tmppcxaob70_test.go:25:9: invalid operation: result += "tHKS KS C MGSSCGG"[vowel]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp602clko__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp602clko__test.go:24:30: undefined: unicode

    /tmp/tmp602clko__test.go:29:30: undefined: unicode

    /tmp/tmp602clko__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"A\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"F\", 1)\n    message := strings.Replace(message, \"I\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"Q\", 1)\n    message := strings.Replace(message, \"Y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"F\", 1)\n    message := strings.Replace(message, \"i\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"Q\", 1)\n    message := strings.Replace(message, \"y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"B\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"F\", \"E\", 1)\n    message := strings.Replace(message, \"J\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"P\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"Q\", \"U\", 1)\n    message := strings.Replace(message, \"R\", \"Y\", 1)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldvbm4u0_test.go:19:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:21:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:21:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:22:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:22:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:23:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:23:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpopkl_kpo_test.go:62:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075832
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"A\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"F\", 1)\n    message := strings.Replace(message, \"I\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"Q\", 1)\n    message := strings.Replace(message, \"Y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"F\", 1)\n    message := strings.Replace(message, \"i\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"Q\", 1)\n    message := strings.Replace(message, \"y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"B\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"F\", \"E\", 1)\n    message := strings.Replace(message, \"J\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"P\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"Q\", \"U\", 1)\n    message := strings.Replace(message, \"R\", \"Y\", 1)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldvbm4u0_test.go:19:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:21:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:21:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:22:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:22:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:23:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:23:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOUaeiou\")\n\
    \    for _, letter := range message {\n        result += string(letter)\n    }\n\
    \    for _, vowel := range vowels {\n        result += string(vowel)\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp1fd7mwj9_test.go:47: expected 'tgst', got 'TESTAEIOUaeiou'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmp1fd7mwj9_test.go:47: expected\
    \ 'mWDCSKR', got 'MudasirAEIOUaeiou'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n\
    \        tmp1fd7mwj9_test.go:47: expected 'ygs', got 'YESAEIOUaeiou'\n    ---\
    \ FAIL: TestEncode/test_num__3 (0.00s)\n        tmp1fd7mwj9_test.go:47: expected\
    \ 'tHKS KS C MGSSCGG', got 'This is a messageAEIOUaeiou'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp1fd7mwj9_test.go:47: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'I DoNt KnOw WhAt tO WrItEAEIOUaeiou'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7i1voxgi_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := []rune(\"aeiouy\")\n\
    \    for _, letter := range message {\n        result += \"T\"\n        for i\
    \ := 0; i < len(letter); i++ {\n            if letter[i] >= 'a' && letter[i] <=\
    \ 'z' {\n                result += string(letter[i] - 'a' + 1)\n            }\
    \ else {\n                result += letter[i]\n            }\n        }\n    \
    \    result += \"S\"\n    }\n    for _, vowel := range vowels {\n        result\
    \ = result[:len(result)-len(vowel)] + vowel + result[len(result)-len(vowel):]\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbx6u4hc_test.go:23:29: invalid argument: letter (variable of type rune)
    for len

    /tmp/tmplbx6u4hc_test.go:24:22: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmplbx6u4hc_test.go:25:40: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmplbx6u4hc_test.go:27:33: invalid operation: cannot index letter (variable
    of type rune)

    /tmp/tmplbx6u4hc_test.go:33:24: invalid operation: result[:len(result) - len(vowel)]
    + vowel (mismatched types string and rune)

    /tmp/tmplbx6u4hc_test.go:33:42: invalid argument: vowel (variable of type rune)
    for len

    /tmp/tmplbx6u4hc_test.go:33:83: invalid argument: vowel (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        index := letter - 'a'\n\
    \        if index < 0 || index >= len(vowels) {\n            result += letter\n\
    \            continue\n        }\n        result += vowels[index+2]\n    }\n \
    \   return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9d6tlc0_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpb9d6tlc0_test.go:27:34: invalid operation: index >= len(vowels) (mismatched
    types rune and int)

    /tmp/tmpb9d6tlc0_test.go:28:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpb9d6tlc0_test.go:31:9: invalid operation: result += vowels[index + 2]
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[letter-'a'])\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoen5150g_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[int(letter) - 1])\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcmxm5lhk_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpketyi8p1_test.go:108:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOU\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[int(letter) - 1])\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd0azk_lq_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result = result + letter\n        } else {\n\
    \            result = result + string(unicode.ToLower(letter))\n        }\n  \
    \  }\n    for _, letter := range result {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ = result + string(unicode.ToUpper(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqbffw3q_test.go:22:22: invalid operation: result + letter (mismatched
    types string and rune)

    /tmp/tmpmqbffw3q_test.go:24:38: undefined: unicode

    /tmp/tmpmqbffw3q_test.go:29:38: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter\
    \ + 2 - 'a')\n        } else {\n            result += string(letter)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpqlrsdjzx_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpqlrsdjzx_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpqlrsdjzx_test.go:47: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ vowel := range \"aeiou\" {\n        result = result[:len(result)-len(vowel)]\
    \ + string(unicode.ToUpper(vowel)) + result[len(result)-len(vowel):]\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2bhva_j_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpr2bhva_j_test.go:24:30: undefined: unicode

    /tmp/tmpr2bhva_j_test.go:28:42: invalid argument: vowel (variable of type rune)
    for len

    /tmp/tmpr2bhva_j_test.go:28:59: undefined: unicode

    /tmp/tmpr2bhva_j_test.go:28:108: invalid argument: vowel (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"T\"\n        if letter ==\
    \ 'a' {\n            result += \"G\"\n        } else if letter == 'e' {\n    \
    \        result += \"K\"\n        } else if letter == 'i' {\n            result\
    \ += \"S\"\n        } else if letter == 'o' {\n            result += \"C\"\n \
    \       } else if letter == 'u' {\n            result += \"M\"\n        } else\
    \ if letter == 'y' {\n            result += \"G\"\n        } else {\n        \
    \    result += letter\n        }\n    }\n    for _, vowel := range vowels {\n\
    \        result += \"C\"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ob_lden_test.go:36:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp9ob_lden_test.go:39:12: vowel declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        result += string(letter)\n    }\n    for _, letter := range result\
    \ {\n        if letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O'\
    \ || letter == 'U' {\n            letter = string(letter)\n            letter\
    \ = letter + string(letter)\n            letter = letter + string(letter)\n  \
    \          letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = letter + string(letter)\n            letter = letter + string(letter)\n\
    \            letter = \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpibvs8_rg_test.go:77:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[int(letter-65)])\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmaot35q_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075831
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n            continue\n      \
    \  }\n        result += string(letter + letter)\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67vga3hj_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter+1)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwthoxbug_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075834
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += string(letter)\n    }\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(letter)\n\
    \            continue\n        }\n        result += string(letter)\n        for\
    \ _, vowel := range vowels {\n            if letter == vowel {\n             \
    \   result += string(letter)\n                result += string(letter)\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz36yrrij_test.go:57: expected 'tgst', got 'TESTTEST'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpz36yrrij_test.go:57: expected 'mWDCSKR',\
    \ got 'MudasirMudasir'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n       \
    \ tmpz36yrrij_test.go:57: expected 'ygs', got 'YESYES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpz36yrrij_test.go:57: expected 'tHKS KS C MGSSCGG', got 'This\
    \ is a messageThis is a message'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpz36yrrij_test.go:57: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I\
    \ DoNt KnOw WhAt tO WrItEI DoNt KnOw WhAt tO WrItE'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075834
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(letter)\n    }\n   \
    \ for _, letter := range result {\n        result := result[:letter] + string(letter)\
    \ + result[letter+1:]\n    }\n    for _, vowel := range vowels {\n        result\
    \ := result[:vowel] + string(vowel) + result[vowel+1:]\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz68sn_58_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpz68sn_58_test.go:29:9: result declared but not used

    /tmp/tmpz68sn_58_test.go:32:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075834
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]rune(letter)[0])\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ttt074c_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp5ttt074c_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ybvoxq4_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp602clko__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp602clko__test.go:24:30: undefined: unicode

    /tmp/tmp602clko__test.go:29:30: undefined: unicode

    /tmp/tmp602clko__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ result {\n        if letter == 'A' || letter == 'E' || letter == 'I' || letter\
    \ == 'O' || letter == 'U' {\n            result += 'A'\n        } else {\n   \
    \         result += 'a'\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp419yq8l6_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp419yq8l6_test.go:24:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmp419yq8l6_test.go:29:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmp419yq8l6_test.go:31:13: invalid operation: result += ''a'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075834
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwad8k7u__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpwad8k7u__test.go:24:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:29:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        result += \"t\"\n      \
    \  for _, vowel := range vowels {\n            if letter == vowel {\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\n                result += letter\n                result\
    \ += letter\n                result += letter\n                result += letter\n\
    \                result += letter\n                result += letter\n        \
    \        result += letter\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7jau2qs9_test.go:142:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ybvoxq4_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075833
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        switch letter {\n        case 'a':\n            result = \"t\"\n\
    \        case 'b':\n            result = \"h\"\n        case 'c':\n          \
    \  result = \"k\"\n        case 'd':\n            result = \"g\"\n        case\
    \ 'e':\n            result = \"s\"\n        case 'f':\n            result = \"\
    c\"\n        case 'g':\n            result = \"g\"\n        case 'h':\n      \
    \      result = \"h\"\n        case 'i':\n            result = \"k\"\n       \
    \ case 'j':\n            result = \"s\"\n        case 'k':\n            result\
    \ = \"k\"\n        case 'l':\n            result = \"s\"\n        case 'm':\n\
    \            result = \"c\"\n        case 'n':\n            result = \"g\"\n \
    \       case 'o':\n            result = \"s\"\n        case 'p':\n           \
    \ result = \"c\"\n        case 'q':\n            result = \"g\"\n        case\
    \ 'r':\n            result = \"s\"\n        case 's':\n            result = \"\
    s\"\n        case 't':\n            result = \"t\"\n        case 'u':\n      \
    \      result = \"k\"\n        case 'v':\n            result = \"k\"\n       \
    \ case 'w':\n            result = \"k\"\n        case 'x':\n            result\
    \ = \"k\"\n        case 'y':\n            result = \"k\"\n        case 'z':\n\
    \            result = \"k\"\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbl_ewsch_test.go:96: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbl_ewsch_test.go:96: expected 'mWDCSKR', got 's'\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbl_ewsch_test.go:96: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpbl_ewsch_test.go:96:\
    \ expected 'tHKS KS C MGSSCGG', got 's'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpbl_ewsch_test.go:96: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 't'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075834
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOU\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[letter-'a'])\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefbsahmm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075834
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpccgiqfw4_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075834
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter\
    \ + 2 - 'a')\n        } else {\n            result += string(letter)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpqlrsdjzx_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpqlrsdjzx_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpqlrsdjzx_test.go:47: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075702
