name: HumanEval_76_is_simple_power
language: go_test.go
prompt: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunc is_simple_power(x int, n int) bool {\n"
tests: "func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n     {\
  \ actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
  \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n   \
  \  { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24, 2),\
  \ expected: false },\n     { actual: candidate(128, 4), expected: false },\n   \
  \  { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1, 1),\
  \ expected: true },\n     { actual: candidate(1, 12), expected: true },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return true\n    }\n    if n == 1 {\n    \
    \    return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true",
  "    if n==1 {\n        return true\n    }\n    if n%2==0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    if n%3==0 {\n        return is_simple_power(x, n/3)\n    }\n\
    \    if n%5==0 {\n        return is_simple_power(x, n/5)\n    }\n    return false\n\
    }\n", "    if n == 1 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return is_simple_power(x, n/2)\n    }\n    if n%3 == 0 {\n        return is_simple_power(x,\
    \ n/3)\n    }\n    if n%5 == 0 {\n        return is_simple_power(x, n/5)\n   \
    \ }\n    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n\
    \    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return\
    \ false\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return false\n\
    }\n", "    if n == 1 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return is_simple_power(x, n/2)\n    }\n    if n%3 == 0 {\n        return is_simple_power(x,\
    \ n/3)\n    }\n    return false\n}\n", "    if n == 0 {\n        return true\n\
    \    }\n    if n%2 == 0 {\n        return is_simple_power(x, n-1)\n    }\n   \
    \ return is_simple_power(x, n-1)\n}\n", "    if n%x == 0 {\n        return true\n\
    \    }\n    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n\
    \    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return\
    \ false\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return false\n\
    }\n", "    if n%x == 0 {\n        return true\n    }\n    return false\n}\n",
  "    if n%x == 0 {\n        return true\n    }\n    return false\n}\n", "    if\
    \ n%x == 0 {\n        return true\n    }\n    return false\n}\n", "    if n%x\
    \ == 0 {\n        return true\n    }\n    return false\n}\n", "    if n==1 {\n\
    \        return true\n    }\n    if n%2==0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n", "    if n%x == 0 {\n        return true\n\
    \    }\n    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n\
    \    return false\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return\
    \ false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
