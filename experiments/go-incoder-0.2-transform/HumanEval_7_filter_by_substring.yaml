name: HumanEval_7_filter_by_substring
language: go_test.go
prompt: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"\
  abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"\
  array\"}\nfunc filter_by_substring(strings []string, substring string) []string\
  \ {\n"
tests: "func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\"\
  , \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            result = append(result, s)\n \
    \       }\n    }\n    return result\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    result := []string{}\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    filteredStrings := make([]string,\
    \ 0)\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            filteredStrings = append(filteredStrings, string)\n\
    \        }\n    }\n    return filteredStrings\n}\n", "    filtered := make([]string,\
    \ 0)\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    filtered := []string{}\n    for _, s := range strings {\n\
    \        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    filtered := make([]string, 0)\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    filtered := []string{}\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
