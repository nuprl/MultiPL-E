language: go_test.go
name: HumanEval_130_tri
results:
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := []int{n}\n    tri_helper(result, n, 1)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tqdrtah_test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return [3]int{3}\n    }\n    if n == 2 {\n  \
    \      return [3]int{3, 2}\n    }\n    if n % 2 == 0 {\n        return append([]int{tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)}, tri(n))\n    }\n    return append([]int{tri(n\
    \ - 1) + tri(n - 2)}, tri(n))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiavw8dei_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpiavw8dei_test.go:32:16: cannot use [3]int{\u2026} (value of type [3]int)\
    \ as type []int in return statement\n/tmp/tmpiavw8dei_test.go:35:29: invalid operation:\
    \ operator + not defined on tri(n - 1) (value of type []int)\n/tmp/tmpiavw8dei_test.go:35:68:\
    \ cannot use tri(n) (value of type []int) as type int in argument to append\n\
    /tmp/tmpiavw8dei_test.go:37:25: invalid operation: operator + not defined on tri(n\
    \ - 1) (value of type []int)\n/tmp/tmpiavw8dei_test.go:37:51: cannot use tri(n)\
    \ (value of type []int) as type int in argument to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2)...)\n\
    \    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6qhnfiq_test.go:40:31: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmps6qhnfiq_test.go:40:43: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-2] + result[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfd7mc7wd_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpheylrt4w_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpheylrt4w_test.go:43 +0xaac\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i+1] = result[i] + result[i-1]\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=15) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24)\
    \ %!s(int=39)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp9iuaoje3_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=39)\
    \ %!s(int=63)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp9iuaoje3_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    tri(result, 0, n-1, 3)\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcjade1cd_test.go:29:17:\
    \ too many arguments in call to tri\n\thave ([]int, number, int, number)\n\twant\
    \ (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon61on_n_test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    } else {\n        result[2] = tri(n - 1) + tri(n - 2)\n    }\n   \
    \ return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptq9aof6z_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmptq9aof6z_test.go:34:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result [1] = 1 + n/2\n   \
    \ } else {\n        result [1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9upr05of_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := func(n int) []int {\n        if\
    \ n == 0 {\n            return result\n        }\n        tri := func(n int) []int\
    \ {\n            if n == 0 {\n                return result\n            }\n \
    \           tri := func(n int) []int {\n                if n == 0 {\n        \
    \            return result\n                }\n                tri := func(n int)\
    \ []int {\n                    if n == 0 {\n                        return result\n\
    \                    }\n                    tri := func(n int) []int {\n     \
    \                   if n == 0 {\n                            return result\n \
    \                       }\n                        tri := func(n int) []int {\n\
    \                            if n == 0 {\n                                return\
    \ result\n                            }\n                            tri := func(n\
    \ int) []int {\n                                if n == 0 {\n                \
    \                    return result\n                                }\n      \
    \                          tri := func(n int) []int {\n                      \
    \              if n == 0 {\n                                        return result\n\
    \                                    }\n                                    tri\
    \ := func(n int) []int {\n                                        if n == 0 {\n\
    \                                            return result\n                 \
    \                       }\n                                        tri := func(n\
    \ int) []int {\n                                            if n == 0 {\n    \
    \                                            return result\n                 \
    \                           }\n                                            tri\
    \ := func(n int) []int {\n                                                if n\
    \ == 0 {\n                                                    return result\n\
    \                                                }\n                         \
    \                       tri := func(n int) []int {\n                         \
    \                           if n == 0 {\n                                    \
    \                    return result\n                                         \
    \           }\n                                                    tri := func(n\
    \ int) []int {\n                                                        if n ==\
    \ 0 {\n                                                            return result\n\
    \                                                        }\n                 \
    \                                       tri := func(n int) []int {\n         \
    \                                                   if n == 0 {\n            \
    \                                                    return result\n         \
    \                                                   }\n                      \
    \                                      tri := func(n int) []int {\n          \
    \                                                      if n == 0 {\n         \
    \                                                           return result\n  \
    \                                                              }\n           \
    \                                                     tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \                                     return result\n                        \
    \                                            }\n                             \
    \                                       tri := func(n int) []int {\n         \
    \                                                                            \
    \   if n == 0 {\n                                                            return\
    \ result\n                                                        }\n        \
    \                                                tri := func(n int) []int {\n\
    \                                                            if n == 0 {\n   \
    \                                                             return result\n\
    \                                                            }\n             \
    \                                               tri := func(n int) []int {\n \
    \                                                               if n == 0 {\n\
    \                                                                    return result\n\
    \                                                                }\n         \
    \                                                       tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \     return result\n                                                        \
    \            }\n                                                             \
    \       tri := func(n int) []int {\n                                         \
    \                               if n == 0 {\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzruy8tv_test.go:112:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjfdb1ma_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n == 3 {\n        return []int{1, 3, 3, 2}\n    }\n    if n ==\
    \ 4 {\n        return []int{1, 3, 3, 2, 2}\n    }\n    if n == 5 {\n        return\
    \ []int{1, 3, 3, 2, 2, 2}\n    }\n    if n == 6 {\n        return []int{1, 3,\
    \ 3, 2, 2, 2, 2}\n    }\n    if n == 7 {\n        return []int{1, 3, 3, 2, 2,\
    \ 2, 2, 2}\n    }\n    if n == 8 {\n        return []int{1, 3, 3, 2, 2, 2, 2,\
    \ 2, 2}\n    }\n    if n == 9 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2,\
    \ 2, 2}\n    }\n    if n == 10 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2}\n    }\n    if n == 11 {\n        return []int{1, 3, 3, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if n == 13 {\n       \
    \ return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n \
    \   }\n    if n == 14 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if n == 15 {\n        return\
    \ []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2}\n    }\n    if n == 16 {\n        return []int{1, 3, 3, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n  \
    \  }\n    if n == 17 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if\
    \ n == 18 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if n ==\
    \ 19 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if n ==\
    \ 20 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n    }\n    if\
    \ n == 21 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n\
    \    }\n    if n == 22 {\n        return []int{1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2}\n    }\n    if n == 23 {\n        return []int{1, 3, 3, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, \nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo8mjgdzg_test.go:99:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n          \
    \  result[i+1] = result[i] + result[i-1]\n        } else {\n            result[i+1]\
    \ = result[i] + result[i-1] + result[i-2]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpuy3ano91_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpuy3ano91_test.go:45 +0xdb3\n\
    testing.tRunner(0xc00019a4e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073902
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{1, n}\n    if n%2 == 0 {\n\
    \        tri = append(tri, tri[n-1])\n        tri = append(tri, tri[n-2])\n  \
    \      tri = append(tri, tri[n+1])\n    }\n    return tri\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppip66zj4_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppip66zj4_test.go:42 +0x65\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon61on_n_test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result := append(result, 1)\n    result\
    \ := append(result, 2)\n    i := 3\n    for i < n {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n        i += 2\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gd9hqp9_test.go:29:12: no new variables on left side of :=

    /tmp/tmp5gd9hqp9_test.go:30:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-2] + result[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvqbzgwgj_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmz1c_f5n_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 1\n    result[1] = result[0]\
    \ + result[1]\n    if n % 2 == 0 {\n        result[2] = result[1] + result[2]\n\
    \    }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n    }\n    return result[n:]\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpxcb0fqpv_test.go:35\
    \ +0x13a\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpxcb0fqpv_test.go:47\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    n /= 2\n    for\
    \ i := 1; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpsl0707pu_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpsl0707pu_test.go:44 +0x45\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    for i := 1; i < n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    \n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp093gx_v__test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp093gx_v__test.go:43 +0xacc\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return []int{tri(n-1), tri(n-2)}\n    }\n \
    \   return []int{tri(n-1), tri(n-2), tri(n-3)}\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64l_zyjn_test.go:29:22: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmp64l_zyjn_test.go:29:32: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    /tmp/tmp64l_zyjn_test.go:31:18: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmp64l_zyjn_test.go:31:28: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    /tmp/tmp64l_zyjn_test.go:31:38: cannot use tri(n - 3) (value of type []int) as
    type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i <= n {\n        result[i] = result[i-1] + result[i-2] + result[i+2]\n    \
    \    i += 3\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpwpg6g14l_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwpg6g14l_test.go:45 +0xc5f\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpsfcr9fzg_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpsfcr9fzg_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := []int{n}\n    tri(n - 1, result, n)\n    tri(n - 2, result,\
    \ n)\n    tri(n - 1, result, n)\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo177yqhd_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int, int)\n\twant (int)\n\
    /tmp/tmpo177yqhd_test.go:30:16: too many arguments in call to tri\n\thave (int,\
    \ []int, int)\n\twant (int)\n/tmp/tmpo177yqhd_test.go:31:16: too many arguments\
    \ in call to tri\n\thave (int, []int, int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i+1] = result[i] + result[i-1]\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpx81he9jh_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpx81he9jh_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpx81he9jh_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpx81he9jh_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpx81he9jh_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=15) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpx81he9jh_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24)\
    \ %!s(int=39)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpx81he9jh_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=39)\
    \ %!s(int=63)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpx81he9jh_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := func(n int) []int {\n        if\
    \ n == 0 {\n            return result\n        }\n        tri := func(n int) []int\
    \ {\n            if n == 0 {\n                return result\n            }\n \
    \           tri := func(n int) []int {\n                if n == 0 {\n        \
    \            return result\n                }\n                tri := func(n int)\
    \ []int {\n                    if n == 0 {\n                        return result\n\
    \                    }\n                    tri := func(n int) []int {\n     \
    \                   if n == 0 {\n                            return result\n \
    \                       }\n                        tri := func(n int) []int {\n\
    \                            if n == 0 {\n                                return\
    \ result\n                            }\n                            tri := func(n\
    \ int) []int {\n                                if n == 0 {\n                \
    \                    return result\n                                }\n      \
    \                          tri := func(n int) []int {\n                      \
    \              if n == 0 {\n                                        return result\n\
    \                                    }\n                                    tri\
    \ := func(n int) []int {\n                                        if n == 0 {\n\
    \                                            return result\n                 \
    \                       }\n                                        tri := func(n\
    \ int) []int {\n                                            if n == 0 {\n    \
    \                                            return result\n                 \
    \                           }\n                                            tri\
    \ := func(n int) []int {\n                                                if n\
    \ == 0 {\n                                                    return result\n\
    \                                                }\n                         \
    \                       tri := func(n int) []int {\n                         \
    \                           if n == 0 {\n                                    \
    \                    return result\n                                         \
    \           }\n                                                    tri := func(n\
    \ int) []int {\n                                                        if n ==\
    \ 0 {\n                                                            return result\n\
    \                                                        }\n                 \
    \                                       tri := func(n int) []int {\n         \
    \                                                   if n == 0 {\n            \
    \                                                    return result\n         \
    \                                                   }\n                      \
    \                                      tri := func(n int) []int {\n          \
    \                                                      if n == 0 {\n         \
    \                                                           return result\n  \
    \                                                              }\n           \
    \                                                     tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \                                     return result\n                        \
    \                                            }\n                             \
    \                                       tri := func(n int) []int {\n         \
    \                                                                            \
    \   if n == 0 {\n                                                            return\
    \ result\n                                                        }\n        \
    \                                                tri := func(n int) []int {\n\
    \                                                            if n == 0 {\n   \
    \                                                             return result\n\
    \                                                            }\n             \
    \                                               tri := func(n int) []int {\n \
    \                                                               if n == 0 {\n\
    \                                                                    return result\n\
    \                                                                }\n         \
    \                                                       tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \     return result\n                                                        \
    \            }\n                                                             \
    \       tri := func(n int) []int {\n                                         \
    \                               if n == 0 {\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzruy8tv_test.go:112:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i <= n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    \
    \    i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpzvhtdzab_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpzvhtdzab_test.go:45 +0xc12\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1gl0a27q_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1gl0a27q_test.go:45 +0x45\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 1\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgfon8hj_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon61on_n_test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpuoun2107_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpuoun2107_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjfdb1ma_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2]\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl85t31la_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{}\n    tri(n - 1, &result)\n    tri(n - 2, &result)\n\
    \    tri(n + 1, &result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9cpo_vo4_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp9cpo_vo4_test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp9cpo_vo4_test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n  \
    \      result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaigbs2v_test.go:31:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 1\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa55qru15_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i < n+1; i++\
    \ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9g907zq_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    for _, v := range tri {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdna37ec_test.go:29:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjfdb1ma_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    for _, i := range tri {\n        result = append(result, i)\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4egbxax_test.go:29:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i+1] = result[i] + result[i-1]\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpe3irin3c_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpe3irin3c_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpe3irin3c_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpe3irin3c_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpe3irin3c_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=15) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpe3irin3c_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24)\
    \ %!s(int=39)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpe3irin3c_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=39)\
    \ %!s(int=63)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpe3irin3c_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i++\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpd8h891d4_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd8h891d4_test.go:45 +0xa73\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpheylrt4w_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpheylrt4w_test.go:43 +0xaac\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  if n%2 == 0 {\n        result[0] = 3\n    } else {\n        result[0] = 1 +\
    \ n/2\n    }\n    \n    for i := 1; i < n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    \n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpad3qzx7j_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpad3qzx7j_test.go:47 +0xacc\n\
    testing.tRunner(0xc000184ea0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i <= n {\n        result[i] = result[i-1] + result[i-2] + result[i+2]\n    \
    \    i += 3\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp32bnlmzv_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp32bnlmzv_test.go:45 +0xc06\n\
    testing.tRunner(0xc000103520, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  if n == 0 {\n        result[0] = 3\n        return result\n    }\n    \n  \
    \  if n%2 == 0 {\n        result[0] = 1 + n/2\n    } else {\n        result[0]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnzgj8uus_test.go:35:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073996
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n   \
    \     return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 1}\n  \
    \  }\n    result := []int{}\n    tri_result := tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    for _, v := range tri_result {\n        result = append(result, v)\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx4du39nw_test.go:38:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 3\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb1m3efdy_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    for i := 1; i < n; i++ {\n        result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp7q_bocwb_test.go:29\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7q_bocwb_test.go:41 +0xacc\n\
    testing.tRunner(0xc0001991e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpuoun2107_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpuoun2107_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    for i := 2; i <= n; i++ {\n        result\
    \ := append(result, result[i-1] + result[i-2])\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2la3ldf_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 3\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb1m3efdy_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-2] + result[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfd7mc7wd_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n + 1), tri(n +\
    \ 2))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_o65y9x_test.go:38:35: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    /tmp/tmp1_o65y9x_test.go:40:31: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073996
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result [1] = 1 + n / 2\n \
    \   } else {\n        result [1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpczi51va6_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvwx6s7z__test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvwx6s7z__test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return append([]int{3}, tri(n-1)...)\n    }\n\
    \    return append([]int{1, tri(n-1)...}, tri(n-2)...)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bcsccal_test.go:31:36: missing '','' in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjfdb1ma_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    index := 1\n  \
    \  for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[index]\
    \ = result[index-1] + result[index-2]\n        } else {\n            result[index]\
    \ = result[index-1] + result[index-2] + result[index+2]\n        }\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpmmqcinsy_test.go:35\
    \ +0x11d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmmqcinsy_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1ulvxa3__test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1ulvxa3__test.go:45 +0xb65\n\
    testing.tRunner(0xc000120340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    i := 1\n    for i <= n {\n        result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n        i++\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpbd7qxrkk_test.go:29\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbd7qxrkk_test.go:42 +0x42c\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 3\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n    \
    \        result[i] = result[i-1] + result[i-2]\n        } else {\n           \
    \ result[i] = result[i-1] + result[i-2] + result[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ye1sx2q_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n  \
    \      result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaigbs2v_test.go:31:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1)...)\n        result = append(result, tri(n-2)...)\n        result =\
    \ append(result, tri(n+2)...)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020200368\
    \ stack=[0xc020200000, 0xc040200000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x52070f?, 0x5e4ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mcentral).uncacheSpan(0x6257c0?,\
    \ 0x2acb2ba635f0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcentral.go:194\
    \ +0xd5 fp=0xc020200378 sp=0xc020200370 pc=0x4163b5\nruntime.(*mcache).refill(0x2acb0216b5b8,\
    \ 0xd)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcache.go:158 +0x92\
    \ fp=0xc0202003b0 sp=0xc020200378 pc=0x4158d2\nruntime.(*mcache).nextFree(0x2acb0216b5b8,\
    \ 0xd)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:886 +0x85\
    \ fp=0xc0202003f8 sp=0xc0202003b0 pc=0x40c465\nruntime.mallocgc(0x40, 0x0, 0x0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085 +0x4e5 fp=0xc020200470\
    \ sp=0xc0202003f8 pc=0x40cae5\nruntime.growslice(0x0?, {0xc0144ac8a0?, 0x44a174?,\
    \ 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0202004d8 sp=0xc020200470 pc=0x44a0ec\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmpld93qih7_test.go:31 +0x145 fp=0xc020200558 sp=0xc0202004d8 pc=0x4ef7a5\n\
    command-line-arguments_test.tri(0x4)\n\t/tmp/tmpld93qih7_test.go:31 +0xf6 fp=0xc0202005d8\
    \ sp=0xc020200558 pc=0x4ef756\ncommand-line-arguments_test.tri(0x2)\n\t/tmp/tmpld93qih7_test.go:32\
    \ +0x196 fp=0xc020200658 sp=0xc0202005d8 pc=0x4ef7f6\ncommand-line-arguments_test.tri(0x4)\n\
    \t/tmp/tmpld93qih7_test.go:31 +0xf6 fp=0xc0202006d8 sp=0xc020200658 pc=0x4ef756\n\
    command-line-arguments_test.tri(0x2)\n\t/tmp/tmpld93qih7_test.go:32 +0x196 fp=0xc020200758\
    \ sp=0xc0202006d8 pc=0x4ef7f6\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpld93qih7_test.go:31\
    \ +0xf6 fp=0xc0202007d8 sp=0xc020200758 pc=0x4ef756\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmpld93q"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-2] + result[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3jkx4t8__test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    for _, v := range tri {\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa37_nys9_test.go:29:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    n -= 2\n    for\
    \ i := 1; i < n; i++ {\n        result[i+1] = result[i] + result[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpoe_1l9ap_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpoe_1l9ap_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpoe_1l9ap_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpoe_1l9ap_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpoe_1l9ap_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpoe_1l9ap_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpoe_1l9ap_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpoe_1l9ap_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(i"
  timestamp: 1660073998
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{1, n}\n    if n%2 == 0 {\n\
    \        tri = append(tri, tri[n-1])\n        tri = append(tri, tri[n-2])\n  \
    \      tri = append(tri, tri[n+1])\n    }\n    return tri\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppip66zj4_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppip66zj4_test.go:42 +0x65\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 2, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n\
    \ - 1), tri(n - 2)...)\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n\
    \ + 1))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8917zkaf_test.go:37:31: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmp8917zkaf_test.go:37:43: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result [1] = 1 + n/2\n   \
    \ } else {\n        result [1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9upr05of_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpfsgp98k9_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfsgp98k9_test.go:43 +0xa73\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073902
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result := append(result, n)\n    result\
    \ := append(result, tri(n-1)...)\n    result := append(result, tri(n-2)...)\n\
    \    result := append(result, tri(n+2)...)\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_uv7o5g6_test.go:29:12: no new variables on left side of :=

    /tmp/tmp_uv7o5g6_test.go:30:12: no new variables on left side of :=

    /tmp/tmp_uv7o5g6_test.go:31:12: no new variables on left side of :=

    /tmp/tmp_uv7o5g6_test.go:32:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri_helper(n, &result)\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon61on_n_test.go:29:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n == 3 {\n        return []int{1, 2, 3, 4}\n    }\n    result :=\
    \ []int{}\n    tri_result := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    for _,\
    \ item := range tri_result {\n        result = append(result, item)\n    }\n \
    \   return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaabwbpfr_test.go:41:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{1, n}\n    if n%2 == 0 {\n\
    \        tri = append(tri, tri[n-1])\n        tri = append(tri, tri[n-2])\n  \
    \      tri = append(tri, tri[n+1])\n    }\n    return tri\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppip66zj4_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppip66zj4_test.go:42 +0x65\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n == 3 {\n        return []int{1, 3, 3, 2}\n    }\n    if n ==\
    \ 4 {\n        return []int{1, 2, 3, 4, 5}\n    }\n    if n == 5 {\n        return\
    \ []int{1, 2, 3, 4, 5, 6}\n    }\n    if n == 6 {\n        return []int{1, 2,\
    \ 3, 4, 5, 6, 7}\n    }\n    if n == 7 {\n        return []int{1, 2, 3, 4, 5,\
    \ 6, 7, 8}\n    }\n    if n == 8 {\n        return []int{1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9}\n    }\n    if n == 9 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10}\n    }\n    if n == 10 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}\n    }\n    if n == 11 {\n        return []int{1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12}\n    }\n    if n == 12 {\n        return []int{1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}\n    }\n    if n == 13 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n    }\n    if n == 14 {\n     \
    \   return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    }\n \
    \   if n == 15 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16}\n    }\n    if n == 16 {\n        return []int{1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}\n    }\n    if n == 17 {\n     \
    \   return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}\n\
    \    }\n    if n == 18 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19}\n    }\n    if n == 19 {\n        return\
    \ []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n\
    \    }\n    if n == 20 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}\n    }\n    if n == 21 {\n     \
    \   return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22}\n    }\n    if n == 22 {\n        return []int{1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}\n    }\n\
    \    if n == 23 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}\n    }\n    if n == 24 {\n \
    \       return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, \nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2fzf9430_test.go:102:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1)...)\n        result = append(result, tri(n-2)...)\n        result =\
    \ append(result, tri(n+2)...)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020200368\
    \ stack=[0xc020200000, 0xc040200000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x52070f?, 0x5e4ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mcentral).uncacheSpan(0x6257c0?,\
    \ 0x2acb2ba635f0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcentral.go:194\
    \ +0xd5 fp=0xc020200378 sp=0xc020200370 pc=0x4163b5\nruntime.(*mcache).refill(0x2acb0216b5b8,\
    \ 0xd)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcache.go:158 +0x92\
    \ fp=0xc0202003b0 sp=0xc020200378 pc=0x4158d2\nruntime.(*mcache).nextFree(0x2acb0216b5b8,\
    \ 0xd)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:886 +0x85\
    \ fp=0xc0202003f8 sp=0xc0202003b0 pc=0x40c465\nruntime.mallocgc(0x40, 0x0, 0x0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085 +0x4e5 fp=0xc020200470\
    \ sp=0xc0202003f8 pc=0x40cae5\nruntime.growslice(0x0?, {0xc0144ac8a0?, 0x44a174?,\
    \ 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0202004d8 sp=0xc020200470 pc=0x44a0ec\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmpld93qih7_test.go:31 +0x145 fp=0xc020200558 sp=0xc0202004d8 pc=0x4ef7a5\n\
    command-line-arguments_test.tri(0x4)\n\t/tmp/tmpld93qih7_test.go:31 +0xf6 fp=0xc0202005d8\
    \ sp=0xc020200558 pc=0x4ef756\ncommand-line-arguments_test.tri(0x2)\n\t/tmp/tmpld93qih7_test.go:32\
    \ +0x196 fp=0xc020200658 sp=0xc0202005d8 pc=0x4ef7f6\ncommand-line-arguments_test.tri(0x4)\n\
    \t/tmp/tmpld93qih7_test.go:31 +0xf6 fp=0xc0202006d8 sp=0xc020200658 pc=0x4ef756\n\
    command-line-arguments_test.tri(0x2)\n\t/tmp/tmpld93qih7_test.go:32 +0x196 fp=0xc020200758\
    \ sp=0xc0202006d8 pc=0x4ef7f6\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpld93qih7_test.go:31\
    \ +0xf6 fp=0xc0202007d8 sp=0xc020200758 pc=0x4ef756\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmpld93q"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2]\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl85t31la_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    for i := 2; i <= n; i++ {\n        result\
    \ := append(result, result[i-1] + result[i-2])\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2la3ldf_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := []int{}\n    tri(n - 1, result)\n    tri(n - 2, result)\n\
    \    tri(n + 1, result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq0c0m5p9_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpq0c0m5p9_test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpq0c0m5p9_test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlcocvrh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := func(n int) []int {\n        if\
    \ n == 0 {\n            return result\n        }\n        tri := func(n int) []int\
    \ {\n            if n == 1 {\n                return []int{result[0], result[1]}\n\
    \            }\n            tri := func(n int) []int {\n                if n ==\
    \ 2 {\n                    return []int{result[0], result[1], result[2]}\n   \
    \             }\n                tri := func(n int) []int {\n                \
    \    if n == 3 {\n                        return []int{result[0], result[1], result[2],\
    \ result[3]}\n                    }\n                    tri := func(n int) []int\
    \ {\n                        if n == 4 {\n                            return []int{result[0],\
    \ result[1], result[2], result[3], result[4]}\n                        }\n   \
    \                     tri := func(n int) []int {\n                           \
    \ if n == 5 {\n                                return []int{result[0], result[1],\
    \ result[2], result[3], result[4], result[5]}\n                            }\n\
    \                            tri := func(n int) []int {\n                    \
    \            if n == 6 {\n                                    return []int{result[0],\
    \ result[1], result[2], result[3], result[4], result[5], result[6]}\n        \
    \                        }\n                                tri := func(n int)\
    \ []int {\n                                    if n == 7 {\n                 \
    \                       return []int{result[0], result[1], result[2], result[3],\
    \ result[4], result[5], result[6], result[7]}\n                              \
    \      }\n                                    tri := func(n int) []int {\n   \
    \                                     if n == 8 {\n                          \
    \                  return []int{result[0], result[1], result[2], result[3], result[4],\
    \ result[5], result[6], result[7], result[8]}\n                              \
    \          }\n                                        tri := func(n int) []int\
    \ {\n                                            if n == 9 {\n               \
    \                                 return []int{result[0], result[1], result[2],\
    \ result[3], result[4], result[5], result[6], result[7], result[8], result[9]}\n\
    \                                            }\n                             \
    \               tri := func(n int) []int {\n                                 \
    \               if n == 10 {\n                                               \
    \     return []int{result[0], result[1], result[2], result[3], result[4], result[5],\
    \ result[6], result[7], result[8], result[9], result[10]}\n                  \
    \                              }\n                                           \
    \     tri := func(n int) []int {\n                                           \
    \         if n == 11 {\n                                                     \
    \   return []int{result[0], result[1], result[2], result[3], result[4], result[5],\
    \ result[6], result[7], result[8], result[9], result[10], result[\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptgqra25k_test.go:76:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result [1] = 1 + n/2\n   \
    \ } else {\n        result [1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9upr05of_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpsfcr9fzg_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpsfcr9fzg_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := make([]int, n+1)\n    tri[0] =\
    \ 3\n    tri[1] = 1 + n / 2\n    if n%2 == 0 {\n        tri[2] = tri[1] - tri[0]\n\
    \    } else {\n        tri[2] = tri[1] - tri[0] + tri[0]\n    }\n    for i :=\
    \ 3; i <= n; i++ {\n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3]\n  \
    \  }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x0)\n\t/tmp/tmpvrogxari_test.go:27\
    \ +0x133\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpvrogxari_test.go:54\
    \ +0x195\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    if n == 3 {\n        return []int{1, 2, 3, 8}\n    }\n    if n ==\
    \ 4 {\n        return []int{1, 2, 3, 6, 8}\n    }\n    if n == 5 {\n        return\
    \ []int{1, 2, 3, 6, 8, 13}\n    }\n    if n == 6 {\n        return []int{1, 2,\
    \ 3, 6, 8, 13, 21}\n    }\n    if n == 7 {\n        return []int{1, 2, 3, 6, 8,\
    \ 13, 21, 34}\n    }\n    if n == 8 {\n        return []int{1, 2, 3, 6, 8, 13,\
    \ 21, 34, 55}\n    }\n    if n == 9 {\n        return []int{1, 2, 3, 6, 8, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 10 {\n        return []int{1, 2, 3, 6, 8,\
    \ 13, 21, 34, 55, 89, 142}\n    }\n    if n == 11 {\n        return []int{1, 2,\
    \ 3, 6, 8, 13, 21, 34, 55, 89, 142, 233}\n    }\n    if n == 12 {\n        return\
    \ []int{1, 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233, 377}\n    }\n    if n ==\
    \ 13 {\n        return []int{1, 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233, 377,\
    \ 610}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 6, 8, 13, 21, 34,\
    \ 55, 89, 142, 233, 377, 610, 987}\n    }\n    if n == 15 {\n        return []int{1,\
    \ 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233, 377, 610, 987, 1597}\n    }\n    if\
    \ n == 16 {\n        return []int{1, 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233,\
    \ 377, 610, 987, 1597, 2584}\n    }\n    if n == 17 {\n        return []int{1,\
    \ 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233, 377, 610, 987, 1597, 2584, 4181}\n\
    \    }\n    if n == 18 {\n        return []int{1, 2, 3, 6, 8, 13, 21, 34, 55,\
    \ 89, 142, 233, 377, 610, 987, 1597, 2584, 4181, 6765}\n    }\n    if n == 19\
    \ {\n        return []int{1, 2, 3, 6, 8, 13, 21, 34, 55, 89, 142, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765, 10946}\n    }\n    if n == 20 {\n        return\
    \ []int\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpginq7sv5_test.go:89:16: expected expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n - 1) + tri(n - 2))\n    }\n    if n%2 != 0 {\n        result = append(result,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ydb2gkd_test.go:30:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmp2ydb2gkd_test.go:33:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i <= n {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n    \
    \    i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpxxfvi08i_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpxxfvi08i_test.go:45 +0xbd9\n\
    testing.tRunner(0xc0001991e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0lo250a_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4exgdkh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result := append(result, 3)\n    i\
    \ := 0\n    for i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+2]\n\
    \        i++\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptf30t8la_test.go:29:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result [2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnam5mm0c_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4exgdkh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 2, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n\
    \ - 1) + tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1) + tri(n\
    \ - 2), tri(n + 1), tri(n - 1) + tri(n - 2))\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpee45q8py_test.go:35:23: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpee45q8py_test.go:37:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    index := 1\n  \
    \  for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[index]\
    \ = result[index-1] + result[index-2]\n        } else {\n            result[index]\
    \ = result[index-1] + result[index-2] + result[index+2]\n        }\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp6skc84ko_test.go:35\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6skc84ko_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return [3]int{3}\n    }\n    if n == 2 {\n  \
    \      return [3]int{3, 2}\n    }\n    t := [3]int{}\n    t[0] = t[1]\n    t[2]\
    \ = t[1] + t[2]\n    for i := 3; i <= n; i++ {\n        t[i] = t[i-1] + t[i-2]\
    \ + t[i+1]\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa77xdi6k_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpa77xdi6k_test.go:32:16: cannot use [3]int{\u2026} (value of type [3]int)\
    \ as type []int in return statement\n/tmp/tmpa77xdi6k_test.go:40:12: cannot use\
    \ t (variable of type [3]int) as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppt43i5he_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n  \
    \      result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaigbs2v_test.go:31:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = n\n    result[1] = 1 +\
    \ n/2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1nlmfj8_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlcocvrh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri(n - 1, result)\n    tri(n - 2, result)\n\
    \    tri(n + 1, result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzcwpeqf__test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpzcwpeqf__test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpzcwpeqf__test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc9xnvu6_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri(n - 1, result)\n    tri(n - 2, result)\n\
    \    tri(n + 1, result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzcwpeqf__test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpzcwpeqf__test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpzcwpeqf__test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 1\n    for\
    \ i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgfon8hj_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1ulvxa3__test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1ulvxa3__test.go:45 +0xb65\n\
    testing.tRunner(0xc000120340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 3\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n    \
    \        result[i+1] = result[i] + result[i-1]\n        } else {\n           \
    \ result[i+1] = result[i] - result[i-1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_576at3o_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1))\n        result = append(result, tri(n-2))\n        result = append(result,\
    \ tri(n+1))\n    } else {\n        result = append(result, tri(n-1))\n       \
    \ result = append(result, tri(n-2))\n        result = append(result, tri(n+1))\n\
    \        result = append(result, tri(n+2))\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcwww21l_test.go:30:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:31:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:32:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:34:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:35:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:36:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:37:33: cannot use tri(n + 2) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4exgdkh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n\
    \ - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n +\
    \ 1))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1ki58dg_test.go:35:35: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpp1ki58dg_test.go:35:47: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpp1ki58dg_test.go:37:31: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri(n - 1, result, n)\n    tri(n - 2, result,\
    \ result)\n    tri(n - 3, result, result)\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz_aqphij_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int, int)\n\twant (int)\n\
    /tmp/tmpz_aqphij_test.go:30:16: too many arguments in call to tri\n\thave (int,\
    \ []int, []int)\n\twant (int)\n/tmp/tmpz_aqphij_test.go:31:16: too many arguments\
    \ in call to tri\n\thave (int, []int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] = result[i-1]\
    \ + result[i-2]\n        } else {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkhd_xop2_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n   \
    \     return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n  \
    \  }\n    if n == 3 {\n        return []int{1, 2, 3}\n    }\n    if n == 4 {\n\
    \        return []int{1, 2, 3, 4}\n    }\n    if n == 5 {\n        return []int{1,\
    \ 2, 3, 4, 5}\n    }\n    if n == 6 {\n        return []int{1, 2, 3, 4, 5, 6}\n\
    \    }\n    if n == 7 {\n        return []int{1, 2, 3, 4, 5, 6, 7}\n    }\n  \
    \  if n == 8 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8}\n    }\n    if n\
    \ == 9 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    }\n    if n ==\
    \ 10 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    }\n    if n ==\
    \ 11 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\n    }\n    if\
    \ n == 12 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n   \
    \ }\n    if n == 13 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14}\n    }\n    if n == 15 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    }\n    if n == 16 {\n \
    \       return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\
    \    }\n    if n == 17 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17}\n    }\n    if n == 18 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}\n    }\n    if n\
    \ == 19 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19}\n    }\n    if n == 20 {\n        return []int{1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n    }\n    if\
    \ n == 21 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21}\n    }\n    if n == 22 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n\
    \    }\n    if n == 23 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}\n    }\n    if n == 24 {\n\
    \        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24}\n    }\n    if n == 25 {\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgym8estc_test.go:105:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    if\
    \ n%2 == 0 {\n        result[2] = 1 + n/2\n    } else {\n        result[2] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmys5whow_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 1\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa55qru15_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 2, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), n)\n    }\n    return append(tri(n - 1) + tri(n\
    \ - 2), n)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycqyfw15_test.go:35:23: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpycqyfw15_test.go:37:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073904
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result [0] = 3\n    result [1] = 1\
    \ + n / 2\n    if n%2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    } else {\n        result[2] = tri(n - 1) + tri(n - 2)\n    }\n   \
    \ return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptq9aof6z_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmptq9aof6z_test.go:34:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  switch {\n    case n == 0:\n        result[0] = 3\n    case n == 1:\n     \
    \   result[1] = 1\n    case n == 2:\n        result[2] = 2\n    default:\n   \
    \     n := n - 1\n        i := 0\n        j := 1\n        k := 2\n        \n \
    \       for {\n            result[i] = k\n            i = j\n            j = k\n\
    \            k = k + n\n            if k > 2 {\n                break\n      \
    \      }\n        }\n    }\n    \n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmptodopvf8_test.go:76: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmptodopvf8_test.go:76: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmptodopvf8_test.go:76: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmptodopvf8_test.go:76: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmptodopvf8_test.go:76: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmptodopvf8_test.go:76: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmptodopvf8_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmptodopvf8_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri(n - 1, &result)\n    tri(n - 2, &result)\n\
    \    tri(n + 1, &result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6iumdk6q_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp6iumdk6q_test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp6iumdk6q_test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  tri_helper(result, 0, n-1, 3)\n    \n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjchiucsg_test.go:27:5: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return [3]int{3}\n    }\n    if n == 2 {\n  \
    \      return [3]int{1, 3}\n    }\n    if n % 2 == 0 {\n        return append([]int{1,\
    \ n}, tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return append([]int{1,\
    \ n}, tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2))\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5io_j215_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmp5io_j215_test.go:32:16: cannot use [3]int{\u2026} (value of type [3]int)\
    \ as type []int in return statement\n/tmp/tmp5io_j215_test.go:35:36: invalid operation:\
    \ operator + not defined on tri(n - 1) (value of type []int)\n/tmp/tmp5io_j215_test.go:37:32:\
    \ invalid operation: operator + not defined on tri(n - 1) (value of type []int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return append([]int{1, n}, tri(n - 1) + tri(n\
    \ - 2)...)\n    }\n    return append([]int{1, n}, tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelywmx_3_test.go:29:36: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpelywmx_3_test.go:31:32: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i+1] = result[i]\
    \ + result[i-1]\n        } else {\n            result[i+1] = result[i] - result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvlzak0nl_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    n /= 2\n    for\
    \ i := 1; i < n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001e2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001e2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpfh9nkjm7_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfh9nkjm7_test.go:45 +0x5d\n\
    testing.tRunner(0xc000183520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpno_1i4f2_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpno_1i4f2_test.go:45 +0x45\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n     \
    \   i++\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpw0q28fyd_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpw0q28fyd_test.go:45 +0x45\n\
    testing.tRunner(0xc0001031e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i+1] = result[i] + result[i-1]\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp9iuaoje3_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=15) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp9iuaoje3_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24)\
    \ %!s(int=39)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp9iuaoje3_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=39)\
    \ %!s(int=63)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp9iuaoje3_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073995
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    for i := 1; i <\
    \ n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpfsgp98k9_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfsgp98k9_test.go:43 +0xa73\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpuoun2107_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpuoun2107_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = result[1] = 3\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n    \
    \        result[i] = result[i-1] + result[i-2]\n        } else {\n           \
    \ result[i] = result[i-1] + result[i-2] + result[i+1]\n        }\n    }\n    return\
    \ result[n:]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzxlongs7_test.go:26:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpsfcr9fzg_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpsfcr9fzg_test.go:45 +0xbb9\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1ulvxa3__test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1ulvxa3__test.go:45 +0xb65\n\
    testing.tRunner(0xc000120340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  switch {\n    case n == 0:\n        result[0] = 3\n    case n == 1:\n     \
    \   result[1] = 1\n    case n == 2:\n        result[2] = 2\n    case n % 2 ==\
    \ 0: // n is even\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    default: // n is odd\n        result[1] = tri(n - 1) + tri(n - 2)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqms48xg_test.go:35:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpwqms48xg_test.go:37:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    for i := 1; i < n; i++ {\n        result[i+1] = result[i]\
    \ + result[i-1]\n    }\n    \n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp46qg6ei9_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp46qg6ei9_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp46qg6ei9_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp46qg6ei9_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp46qg6ei9_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)\
    \ %!s(int=9) %!s(int=15) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp46qg6ei9_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24)\
    \ %!s(int=39)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp46qg6ei9_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=15) %!s(int=24) %!s(int=39)\
    \ %!s(int=63)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp46qg6ei9_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073897
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i+1]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1ulvxa3__test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1ulvxa3__test.go:45 +0xb65\n\
    testing.tRunner(0xc000120340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri(n - 1, result)\n    tri(n - 2, result)\n\
    \    tri(n + 1, result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt4kftmxx_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpt4kftmxx_test.go:30:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n/tmp/tmpt4kftmxx_test.go:31:16:\
    \ too many arguments in call to tri\n\thave (int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    for i := 2; i <= n; i++ {\n        result\
    \ := append(result, result[i-1] + result[i-2])\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2la3ldf_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1))\n        result = append(result, tri(n-2))\n        result = append(result,\
    \ tri(n+1))\n    } else {\n        result = append(result, tri(n-1))\n       \
    \ result = append(result, tri(n-2))\n        result = append(result, tri(n+1))\n\
    \        result = append(result, tri(n+2))\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcwww21l_test.go:30:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:31:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:32:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:34:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:35:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:36:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpbcwww21l_test.go:37:33: cannot use tri(n + 2) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4exgdkh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    for i := 1; i < n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    \n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp093gx_v__test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp093gx_v__test.go:43 +0xacc\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n   \
    \     return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n  \
    \  }\n    if n == 3 {\n        return []int{1, 2, 3}\n    }\n    if n == 4 {\n\
    \        return []int{1, 2, 3, 4}\n    }\n    if n == 5 {\n        return []int{1,\
    \ 2, 3, 4, 5}\n    }\n    if n == 6 {\n        return []int{1, 2, 3, 4, 5, 6}\n\
    \    }\n    if n == 7 {\n        return []int{1, 2, 3, 4, 5, 6, 7}\n    }\n  \
    \  if n == 8 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8}\n    }\n    if n\
    \ == 9 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    }\n    if n ==\
    \ 10 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    }\n    if n ==\
    \ 11 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\n    }\n    if\
    \ n == 12 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n   \
    \ }\n    if n == 13 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14}\n    }\n    if n == 15 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    }\n    if n == 16 {\n \
    \       return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\
    \    }\n    if n == 17 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17}\n    }\n    if n == 18 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}\n    }\n    if n\
    \ == 19 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19}\n    }\n    if n == 20 {\n        return []int{1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n    }\n    if\
    \ n == 21 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21}\n    }\n    if n == 22 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n\
    \    }\n    if n == 23 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}\n    }\n    if n == 24 {\n\
    \        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24}\n    }\n    if n == 25 {\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgym8estc_test.go:105:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    result := []int{}\n    tri(n - 1, &result)\n    tri(n - 2, &result)\n\
    \    tri(n + 1, &result)\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bjd820w_test.go:38:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp4bjd820w_test.go:39:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n/tmp/tmp4bjd820w_test.go:40:16:\
    \ too many arguments in call to tri\n\thave (int, *[]int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4exgdkh_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result[0] = 3\n    \n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    }\
    \ else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n  \
    \  \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc21e5h4f_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    for i := 2; i <= n; i++ {\n\
    \        result[i] = result[i-1] + result[i-2] + result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjfdb1ma_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{1, n}\n    if n%2 == 0 {\n\
    \        tri = append(tri, tri[n-1])\n        tri = append(tri, tri[n-2])\n  \
    \      tri = append(tri, tri[n+1])\n    }\n    return tri\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppip66zj4_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppip66zj4_test.go:42 +0x65\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  result [0] = 3\n    \n    if n%2 == 0 {\n        result [1] = 1 + n/2\n   \
    \ } else {\n        result [1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9upr05of_test.go:32:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1 + n/2\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5beva__9_test.go:30:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{1, n}\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1)...)\n    }\n    if n%2 == 1 {\n        result = append(result, tri(n-2)...)\n\
    \    }\n    return append(result, tri(n+1))\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmxa5aek_test.go:35:27: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  if n == 1 {\n        result[0] = 3\n    } else {\n        result[0] = 1 + n/2\n\
    \        if n%2 == 0 {\n            result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n        } else {\n            result[1] = tri(n - 1) + tri(n - 2)\n  \
    \      }\n    }\n    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n2lgn1l_test.go:32:25: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmp9n2lgn1l_test.go:34:25: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    tri := func(n int) []int {\n        if\
    \ n == 0 {\n            return result\n        }\n        tri := func(n int) []int\
    \ {\n            if n == 0 {\n                return result\n            }\n \
    \           tri := func(n int) []int {\n                if n == 0 {\n        \
    \            return result\n                }\n                tri := func(n int)\
    \ []int {\n                    if n == 0 {\n                        return result\n\
    \                    }\n                    tri := func(n int) []int {\n     \
    \                   if n == 0 {\n                            return result\n \
    \                       }\n                        tri := func(n int) []int {\n\
    \                            if n == 0 {\n                                return\
    \ result\n                            }\n                            tri := func(n\
    \ int) []int {\n                                if n == 0 {\n                \
    \                    return result\n                                }\n      \
    \                          tri := func(n int) []int {\n                      \
    \              if n == 0 {\n                                        return result\n\
    \                                    }\n                                    tri\
    \ := func(n int) []int {\n                                        if n == 0 {\n\
    \                                            return result\n                 \
    \                       }\n                                        tri := func(n\
    \ int) []int {\n                                            if n == 0 {\n    \
    \                                            return result\n                 \
    \                           }\n                                            tri\
    \ := func(n int) []int {\n                                                if n\
    \ == 0 {\n                                                    return result\n\
    \                                                }\n                         \
    \                       tri := func(n int) []int {\n                         \
    \                           if n == 0 {\n                                    \
    \                    return result\n                                         \
    \           }\n                                                    tri := func(n\
    \ int) []int {\n                                                        if n ==\
    \ 0 {\n                                                            return result\n\
    \                                                        }\n                 \
    \                                       tri := func(n int) []int {\n         \
    \                                                   if n == 0 {\n            \
    \                                                    return result\n         \
    \                                                   }\n                      \
    \                                      tri := func(n int) []int {\n          \
    \                                                      if n == 0 {\n         \
    \                                                           return result\n  \
    \                                                              }\n           \
    \                                                     tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \                                     return result\n                        \
    \                                            }\n                             \
    \                                       tri := func(n int) []int {\n         \
    \                                                                            \
    \   if n == 0 {\n                                                            return\
    \ result\n                                                        }\n        \
    \                                                tri := func(n int) []int {\n\
    \                                                            if n == 0 {\n   \
    \                                                             return result\n\
    \                                                            }\n             \
    \                                               tri := func(n int) []int {\n \
    \                                                               if n == 0 {\n\
    \                                                                    return result\n\
    \                                                                }\n         \
    \                                                       tri := func(n int) []int\
    \ {\n                                                                    if n\
    \ == 0 {\n                                                                   \
    \     return result\n                                                        \
    \            }\n                                                             \
    \       tri := func(n int) []int {\n                                         \
    \                               if n == 0 {\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzruy8tv_test.go:112:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    i := 1\n    for\
    \ i < n {\n        result[i] = result[i-1] + result[i-2] + result[i-3]\n     \
    \   i += 2\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppfqch6lh_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppfqch6lh_test.go:45 +0x45\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := []int{n}\n    tri(n - 1, result, n)\n    tri(n - 2, result,\
    \ result)\n    tri(n + 1, result, result)\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2zloi5ff_test.go:29:16:\
    \ too many arguments in call to tri\n\thave (int, []int, int)\n\twant (int)\n\
    /tmp/tmp2zloi5ff_test.go:30:16: too many arguments in call to tri\n\thave (int,\
    \ []int, []int)\n\twant (int)\n/tmp/tmp2zloi5ff_test.go:31:16: too many arguments\
    \ in call to tri\n\thave (int, []int, []int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n%2 == 0 {\n\
    \        result[1] = 1 + n/2\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14szpnrs_test.go:33:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n    if n == 1 {\n   \
    \     return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 2}\n  \
    \  }\n    if n == 3 {\n        return []int{1, 2, 3}\n    }\n    if n == 4 {\n\
    \        return []int{1, 2, 3, 4}\n    }\n    if n == 5 {\n        return []int{1,\
    \ 2, 3, 4, 5}\n    }\n    if n == 6 {\n        return []int{1, 2, 3, 4, 5, 6}\n\
    \    }\n    if n == 7 {\n        return []int{1, 2, 3, 4, 5, 6, 7}\n    }\n  \
    \  if n == 8 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8}\n    }\n    if n\
    \ == 9 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    }\n    if n ==\
    \ 10 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    }\n    if n ==\
    \ 11 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\n    }\n    if\
    \ n == 12 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n   \
    \ }\n    if n == 13 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14}\n    }\n    if n == 15 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    }\n    if n == 16 {\n \
    \       return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\
    \    }\n    if n == 17 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17}\n    }\n    if n == 18 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}\n    }\n    if n\
    \ == 19 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19}\n    }\n    if n == 20 {\n        return []int{1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n    }\n    if\
    \ n == 21 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21}\n    }\n    if n == 22 {\n        return []int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n\
    \    }\n    if n == 23 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}\n    }\n    if n == 24 {\n\
    \        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24}\n    }\n    if n == 25 {\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ccq2tr9_test.go:105:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074000
