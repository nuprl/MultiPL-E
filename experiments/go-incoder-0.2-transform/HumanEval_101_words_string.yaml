name: HumanEval_101_words_string
language: go_test.go
prompt: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You will be given a string of words separated by commas or spaces. Your task\
  \ is\n// to split the string into words and return an array of the words.\n// For\
  \ example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four,\
  \ five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"\
  six\"}\nfunc words_string(s string) []string {\n"
tests: "func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
  \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
  four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
  \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three,\
  \ four, five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\"\
  , \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
  \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\",\
  \ \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \", \")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n   \
    \ return words\n}\n", "    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    for _, word := range words {\n        word = strings.TrimSpace(word)\n\
    \        if word != \"\" {\n            words = append(words, word)\n        }\n\
    \    }\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \", \")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, _ := range words {\n        result[i]\
    \ = strings.TrimSpace(words[i])\n    }\n    return result\n}\n", "    words :=\
    \ strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for i,\
    \ w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n    return\
    \ result\n}\n", "    words := strings.Split(s, \" \")\n    return words\n}\n",
  "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n  \
    \  return words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    return\
    \ words\n}\n", "    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n", "    // Write\
    \ your function here\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    //\
    \ Split the string into words by splitting on spaces.\n    words := strings.Split(s,\
    \ \" \")\n    // Return an array of words.\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \", \")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i := range words {\n        result[i]\
    \ = strings.TrimSpace(words[i])\n    }\n    return result\n}\n", "    // TODO:\
    \ Write the code here\n    return []string{}\n}", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i := range words {\n        result[i]\
    \ = strings.TrimSpace(words[i])\n    }\n    return result\n}\n", "    words :=\
    \ strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    // Split the string into words\n    words := strings.Split(s, \",\")\n    //\
    \ Return an array of words\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \"\
    \ \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := make([]string, 0)\n    words := strings.Split(s, \", \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := make([]string, 0)\n    words :=\
    \ strings.Split(s, \",\")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := make([]string, 0, 5)\n    words\
    \ := strings.Split(s, \",\")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    // Write your code here\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n  \
    \  return words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    // TODO: Write a function that takes a\
    \ string and returns a slice of strings.\n    // The slice should be the return\
    \ value of your function.\n    return []string{}\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \", \")\n   \
    \ return words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \"\
    )\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result :=\
    \ make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \", \")\n    return words\n}\n",
  "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n  \
    \  return words\n}\n", "    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i := range words {\n        result[i] = strings.TrimSpace(words[i])\n    }\n\
    \    return result\n}\n", "    words := strings.Split(s, \" \")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \"\
    \ \")\n    return words\n}\n", "    words := strings.Split(s, \" \")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = w\n    }\n    return result\n}\n", "    words := strings.Split(s, \" \")\n\
    \    return words\n}\n", "    // Write your solution here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n", "    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \", \")\n    return words\n}\n",
  "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n  \
    \  return words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    words = strings.Split(s, \" \"\
    )\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    words :=\
    \ strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n  \
    \  return words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \", \")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n   \
    \ }\n    return result\n}\n", "    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := 0; i < len(words);\
    \ i++ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n", "    // Write your code here\n    words := strings.Split(s, \",\")\n   \
    \ for _, word := range words {\n        word = strings.TrimSpace(word)\n     \
    \   if word != \"\" {\n            words = append(words, word)\n        }\n  \
    \  }\n    return words\n}\n", "    words := strings.Split(s, \", \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    // TODO: Write\
    \ the code here\n    return []string{}\n}\n", "    words := strings.Split(s, \"\
    ,\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \" \")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = w\n    }\n    return result\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n", "    words := strings.Split(s, \" \")\n    result\
    \ := make([]string, len(words))\n    for i, w := range words {\n        result[i]\
    \ = w\n    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n\
    \    result := make([]string, len(words))\n    for i, w := range words {\n   \
    \     result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n", "    words := strings.Split(s, \",\")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    words := strings.Split(s, \"\
    \ \")\n    return words\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := make([]string, 0)\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n", "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \",\")\n    words\
    \ := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    // Split the string into words by splitting\
    \ on commas\n    // or spaces.\n    words := strings.Split(s, \",\")\n    \n \
    \   // Return an array of words.\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \", \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \",\")\n    return words\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \", \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \", \")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n", "    words := strings.Split(s, \" \")\n    return\
    \ words\n}\n", "    words := strings.Split(s, \" \")\n    return words\n}\n",
  "    words := strings.Split(s, \" \")\n    return words\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n",
  "    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(s, \", \")\n    return\
    \ words\n}\n", "    // Your code here\n    words := strings.Split(s, \",\")\n\
    \    return words\n}\n", "    words := strings.Split(s, \",\")\n    result :=\
    \ make([]string, len(words))\n    for i, word := range words {\n        result[i]\
    \ = strings.TrimSpace(word)\n    }\n    return result\n}\n", "    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n", "    words\
    \ := strings.Split(s, \",\")\n    result := make([]string, len(words))\n    for\
    \ i, w := range words {\n        result[i] = strings.TrimSpace(w)\n    }\n   \
    \ return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
