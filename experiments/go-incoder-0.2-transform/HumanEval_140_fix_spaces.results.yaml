language: go_test.go
name: HumanEval_140_fix_spaces
results:
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpace int\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if lastSpace > 1 {\n         \
    \       result = result + \"-\"\n                lastSpace = 0\n            }\
    \ else {\n                result = result + \"_\"\n            }\n        } else\
    \ {\n            lastSpace = 0\n            result = result + char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp176bgmqr_test.go:32:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n         \
    \   result += \"_\"\n        } else {\n            result += text[i]\n       \
    \ }\n    }\n    \n    // If there are more than 2 consecutive spaces, replace\
    \ all consecutive spaces with -\n    for i := 0; i < len(text); i++ {\n      \
    \  if text[i] == ' ' && text[i+1] == ' ' {\n            result += \"-\"\n    \
    \    } else {\n            result += text[i]\n        }\n    }\n    \n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds4h9zqx_test.go:27:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmpds4h9zqx_test.go:36:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7efby4p__test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces\n    // then replace\
    \ all consecutive spaces with -\n    \n    // Find the index of the last space\
    \ in the string\n    lastSpaceIndex := strings.LastIndex(result, \" \")\n    \n\
    \    // If there are no spaces in the string\n    if lastSpaceIndex == -1 {\n\
    \        return result\n    }\n    \n    // If there are more than 2 consecutive\
    \ spaces\n    // then replace all consecutive spaces with -\n    if lastSpaceIndex\
    \ > 1 {\n        for i := lastSpaceIndex + 1; i < len(result); i++ {\n       \
    \     if result[i] == ' ' {\n                result[i] = '-'\n            }\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvh0kziws_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpvh0kziws_test.go:35:23: undefined: strings

    /tmp/tmpvh0kziws_test.go:47:17: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for index,\
    \ char := range text {\n        if char == ' ' {\n            lastSpaceIndex =\
    \ index\n        }\n    }\n    if lastSpaceIndex == len(text) {\n        result\
    \ = text\n    } else {\n        result = text[:lastSpaceIndex] + strings.Replace(text[lastSpaceIndex:],\
    \ \" \", \"_\", -1) + text[lastSpaceIndex+1:]\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1yg_nx7s_test.go:30:42: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    text := strings.Replace(text, \"\
    \ \", \"_\", -1)\n    \n    if len(text) > 2 {\n        text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    }\n    \n    result = text\n    \n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzvmxmap_test.go:22:10: no new variables on left side of :=

    /tmp/tmpxzvmxmap_test.go:22:13: undefined: strings

    /tmp/tmpxzvmxmap_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"_\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ormj5rn_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' {\n            lastSpaceIndex\
    \ = i\n        }\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            if lastSpaceIndex+1 < i {\n                result += text[lastSpaceIndex+1\
    \ : i]\n            } else {\n                result += text[i]\n            }\n\
    \            lastSpaceIndex = i\n        }\n    }\n    if lastSpaceIndex < len(text)\
    \ {\n        result += text[lastSpaceIndex : len(text)]\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m2877y7_test.go:32:17: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var i int\n    for i = 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            result += text[i]\n        }\n\
    \        if text[i] == '\\n' {\n            result += '_'\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g9dcukv_test.go:24:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmp6g9dcukv_test.go:27:13: invalid operation: result += ''_'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    result := text\n    \n    result\
    \ := strings.Replace(result, \" \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc32ltng7_test.go:22:12: no new variables on left side of :=

    /tmp/tmpc32ltng7_test.go:24:12: no new variables on left side of :=

    /tmp/tmpc32ltng7_test.go:24:15: undefined: strings

    /tmp/tmpc32ltng7_test.go:26:12: no new variables on left side of :=

    /tmp/tmpc32ltng7_test.go:26:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpace int\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if lastSpace == 0 {\n        \
    \        result += char\n            } else {\n                result += \"-\"\
    \n            }\n            lastSpace = 0\n        } else {\n            result\
    \ += char\n            lastSpace = 1\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36xf_7jq_test.go:25:17: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp36xf_7jq_test.go:31:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // Replace all consecutive spaces with -\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' && i+1 < len(text) {\n            result +=\
    \ text[i]\n            result += \"-\"\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6zhhev3_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmps6zhhev3_test.go:34:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpace int\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if lastSpace > 1 {\n         \
    \       result = result + \"_\"\n            } else {\n                result\
    \ = result + \"-\"\n            }\n            lastSpace = 0\n        } else {\n\
    \            lastSpace++\n        }\n        result = result + string(char)\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpdy8qqfnz_test.go:55: expected 'Mudasir_Hanif_', got 'Mudasir_\
    \ Hanif_ '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpdy8qqfnz_test.go:55:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_ Yellow_ - Dirty_ - Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpdy8qqfnz_test.go:55:\
    \ expected 'Exa-mple', got 'Exa_ - - mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpdy8qqfnz_test.go:55: expected '-Exa_1_2_2_mple', got '-\
    \ - - Exa_ 1- 2- 2- mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    result := text\n    \n    result\
    \ := strings.Replace(result, \" \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \" \", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \" \", \"-\", -1)\n    \n    result := strings.Replace(result, \" \", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \" \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1h78xlzv_test.go:94:39: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074976
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces\n    // then replace\
    \ all consecutive spaces with -\n    if strings.Count(result, \" \") >= 2 {\n\
    \        result = strings.Replace(result, \" \", \"-\", -1)\n    }\n    \n   \
    \ return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9ost44h_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpc9ost44h_test.go:33:8: undefined: strings

    /tmp/tmpc9ost44h_test.go:34:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, s := range strings.Split(text, \" \") {\n        result = result +\
    \ strings.Replace(s, \" \", \"_\", -1) + \"_\"\n    }\n    \n    // If there are\
    \ more than 2 consecutive spaces, replace all consecutive spaces with -\n    if\
    \ strings.Count(result, \" \") > 2 {\n        result = strings.Replace(result,\
    \ \" \", \"-\", -1)\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwx2qcs1z_test.go:23:23: undefined: strings

    /tmp/tmpwx2qcs1z_test.go:24:27: undefined: strings

    /tmp/tmpwx2qcs1z_test.go:28:8: undefined: strings

    /tmp/tmpwx2qcs1z_test.go:29:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ons5fp9_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074974
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    text := strings.Replace(text, \"\
    \ \", \"_\", -1)\n    \n    result := text\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\", \"-\", -1)\n    \n \
    \   result := strings.Replace(result, \"_\", \"-\", -1)\n    \n    result := strings.Replace(result,\
    \ \"_\", \"-\", -1)\n    \n    result := strings.Replace(result, \"_\", \"-\"\
    , -1)\n    \n    result := strings.Replace(result, \"_\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq3_a4snk_test.go:94:39: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    return\
    \ text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpiqr2rnrl_test.go:43: expected 'Example', got 'Example---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpiqr2rnrl_test.go:43:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ---'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpiqr2rnrl_test.go:43: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow---'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpiqr2rnrl_test.go:43: expected 'Exa-mple', got 'Exa   mple---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpiqr2rnrl_test.go:43:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple---'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n    lastIndex := 0\n    for _, char := range result {\n     \
    \   if char == ' ' {\n            lastIndex = lastIndex + 1\n            if lastIndex\
    \ > 2 {\n                result = \"-\" + result\n            }\n        } else\
    \ {\n            lastIndex = 0\n        }\n    }\n    \n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_16uqwm_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for _, char\
    \ := range text {\n        if char == ' ' {\n            lastSpaceIndex = lastSpaceIndex\
    \ + 1\n        } else {\n            if lastSpaceIndex > 0 {\n               \
    \ result = result + \"_\" + string(text[lastSpaceIndex:len(text)])\n         \
    \       lastSpaceIndex = 0\n            } else {\n                result = result\
    \ + string(char)\n            }\n        }\n    }\n    if lastSpaceIndex > 0 {\n\
    \        result = result + \"_\" + string(text[lastSpaceIndex:len(text)])\n  \
    \  }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmp583fceok_test.go:57: expected 'Mudasir_Hanif_', got 'Mudasir_udasir\
    \ Hanif anif_udasir Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmp583fceok_test.go:57: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ 'Yellow_ellow Yellow  Dirty  Fellowellow_llow Yellow  Dirty  Fellowirty_llow\
    \ Yellow  Dirty  Fellowellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmp583fceok_test.go:57: expected 'Exa-mple', got 'Exa_   mpleple'\n \
    \   --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp583fceok_test.go:57:\
    \ expected '-Exa_1_2_2_mple', got '_Exa 1 2 2 mplexa_  Exa 1 2 2 mple_  Exa 1\
    \ 2 2 mple_  Exa 1 2 2 mple_  Exa 1 2 2 mpleple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, c := range text {\n        if c == ' ' {\n            result += \"\
    _\"\n        } else {\n            result += c\n        }\n    }\n    \n    //\
    \ Replace all consecutive spaces with -\n    for i := 0; i < len(text); i++ {\n\
    \        if text[i] == ' ' && i+1 < len(text) {\n            if text[i+1] == '\
    \ ' {\n                result += \"-\"\n            } else {\n               \
    \ result += text[i]\n            }\n        } else {\n            result += text[i]\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb41btnl4_test.go:27:13: invalid operation: result += c (mismatched types
    string and rune)

    /tmp/tmpb41btnl4_test.go:37:17: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmpb41btnl4_test.go:40:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\
    \ ' && text[i+1] == ' ' {\n            result += \"-\"\n        } else {\n   \
    \         result += text[i]\n        }\n    }\n    \n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nppwzvo_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp4nppwzvo_test.go:36:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for _, char\
    \ := range text {\n        if char == ' ' {\n            if lastSpaceIndex ==\
    \ 0 {\n                result = result + char\n            } else {\n        \
    \        result = result + \"_\" + char\n            }\n            lastSpaceIndex++\n\
    \        } else {\n            result = result + char\n            lastSpaceIndex\
    \ = 0\n        }\n    }\n    if lastSpaceIndex > 2 {\n        result = result\
    \ + \"-\"\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1pkj1fl_test.go:25:26: invalid operation: result + char (mismatched types
    string and rune)

    /tmp/tmpk1pkj1fl_test.go:27:26: invalid operation: result + "_" + char (mismatched
    types string and rune)

    /tmp/tmpk1pkj1fl_test.go:31:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Replace(text, \" \", \"_\"\
    , -1)\n    text += \"-\"\n    text += strings.Replace(text, \" \", \"_\", -1)\n\
    \    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfaqv62p_test.go:21:13: undefined: strings

    /tmp/tmpgfaqv62p_test.go:23:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, replace all \n    //\
    \ consecutive spaces with -\n    result += \"-\"\n    \n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zecpgdx_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    var lastSpaceLength\
    \ int\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         lastSpaceIndex = i\n            lastSpaceLength = 1\n        } else\
    \ {\n            lastSpaceLength++\n        }\n    }\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if lastSpaceLength > 1 {\n \
    \               result += \"-\"\n                lastSpaceLength--\n         \
    \   }\n        } else {\n            result += text[i]\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2exlbv3_test.go:21:9: lastSpaceIndex declared but not used

    /tmp/tmpv2exlbv3_test.go:38:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces\n    // then replace\
    \ all consecutive spaces with -\n    if strings.Count(result, \"  \") > 2 {\n\
    \        for _, char := range result {\n            if char == ' ' {\n       \
    \         result += \"-\"\n            } else {\n                result += char\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2x5ghoe_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpc2x5ghoe_test.go:33:8: undefined: strings

    /tmp/tmpc2x5ghoe_test.go:38:17: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' {\n            if lastSpaceIndex\
    \ == i {\n                result += text[i]\n            } else {\n          \
    \      result += text[i]\n                lastSpaceIndex = i\n            }\n\
    \        } else {\n            result += text[i]\n            lastSpaceIndex =\
    \ i\n        }\n    }\n    if lastSpaceIndex < len(text) {\n        result +=\
    \ text[lastSpaceIndex:]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xwzlt32_test.go:25:17: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmp8xwzlt32_test.go:27:17: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmp8xwzlt32_test.go:31:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for _, char\
    \ := range text {\n        if char == ' ' {\n            if lastSpaceIndex < 0\
    \ {\n                result = result + char\n            } else {\n          \
    \      result = result + string([]byte{0x20})\n            }\n            lastSpaceIndex\
    \ = -1\n        } else {\n            if lastSpaceIndex >= 0 {\n             \
    \   result = result + string([]byte{0x20})\n            }\n            result\
    \ = result + char\n            lastSpaceIndex++\n        }\n    }\n    if lastSpaceIndex\
    \ >= 0 {\n        result = result + string([]byte{0x20})\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppza6gd4g_test.go:25:26: invalid operation: result + char (mismatched types
    string and rune)

    /tmp/tmppza6gd4g_test.go:34:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with -\n    lastIndex := 0\n    for _, char := range\
    \ result {\n        if char == ' ' {\n            if lastIndex < len(result)-1\
    \ {\n                if result[lastIndex+1] == ' ' {\n                    result\
    \ += \"-\"\n                } else {\n                    result += char\n   \
    \             }\n            } else {\n                result += char\n      \
    \      }\n            lastIndex++\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxb2vvrfq_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpxb2vvrfq_test.go:40:21: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpxb2vvrfq_test.go:43:17: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' {\n            lastSpaceIndex\
    \ = i\n        } else {\n            if lastSpaceIndex > 0 {\n               \
    \ result = result + \"_\" + string(text[lastSpaceIndex:i])\n                lastSpaceIndex\
    \ = 0\n            } else {\n                result = result + string(text[i])\n\
    \            }\n        }\n    }\n    if lastSpaceIndex > 0 {\n        result\
    \ = result + \"_\" + string(text[lastSpaceIndex:])\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpa6n_qqso_test.go:57: expected 'Mudasir_Hanif_', got 'Mudasir_\
    \ anif_ '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpa6n_qqso_test.go:57:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_ ellow_ irty_ ellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpa6n_qqso_test.go:57:\
    \ expected 'Exa-mple', got 'Exa_ ple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpa6n_qqso_test.go:57: expected '-Exa_1_2_2_mple', got '_\
    \ xa_ _ _ _ ple'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var i int\n    for i = 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            result += text[i] + \"_\"\n\
    \        } else {\n            result += text[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7hd6b66_test.go:24:23: invalid operation: text[i] + "_" (mismatched types
    byte and untyped string)

    /tmp/tmpa7hd6b66_test.go:26:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ons5fp9_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074974
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, replace all \n    //\
    \ consecutive spaces with -\n    result += \"-\"\n    \n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zecpgdx_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += strings.Replace(text, \" \", \"_\"\
    , -1)\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgygcsed_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0h1wroh_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    var lastSpaceChar\
    \ rune\n    for index, char := range text {\n        if char == ' ' {\n      \
    \      if lastSpaceIndex == index {\n                result += string(lastSpaceChar)\n\
    \            } else {\n                result += string(char)\n            }\n\
    \            lastSpaceIndex = index\n            lastSpaceChar = char\n      \
    \  } else {\n            result += string(char)\n        }\n    }\n    if lastSpaceIndex\
    \ < len(text) {\n        result += string(lastSpaceChar)\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmp8p9vn9y2_test.go:59: expected 'Example', got 'Example\0\
    '\n    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmp8p9vn9y2_test.go:59:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif  '\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp8p9vn9y2_test.go:59: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow '\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp8p9vn9y2_test.go:59: expected 'Exa-mple', got 'Exa   mple\
    \ '\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp8p9vn9y2_test.go:59:\
    \ expected '-Exa_1_2_2_mple', got '\0  Exa 1 2 2 mple '\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces\n    // then replace\
    \ all consecutive spaces with -\n    if len(result) > 2 && result[len(result)-2:len(result)]\
    \ != \"_\" {\n        result += \"-\"\n    }\n    \n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_70oljh2_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, s := range text {\n        if s == ' ' {\n            result += \"\
    _\"\n        } else {\n            result += s\n        }\n    }\n    \n    //\
    \ If there are more than 2 consecutive spaces, replace all consecutive spaces\
    \ with -\n    if strings.Count(result, \"  \") > 2 {\n        result = strings.Replace(result,\
    \ \"  \", \"-\", -1)\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxaondmzo_test.go:27:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmpxaondmzo_test.go:32:8: undefined: strings

    /tmp/tmpxaondmzo_test.go:33:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with -\n    if len(result) > 2 && result[0] == ' ' &&\
    \ result[len(result)-1] == ' ' {\n        for i := 1; i < len(result)-1; i++ {\n\
    \            if result[i] == ' ' {\n                result[i] = '-'\n        \
    \    }\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtjdfgsl_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpdtjdfgsl_test.go:36:17: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' {\n            lastSpaceIndex\
    \ = i\n        }\n    }\n    for i := lastSpaceIndex + 1; i < len(text); i++ {\n\
    \        if text[i] == ' ' {\n            result = result + \"_\"\n        } else\
    \ {\n            result = result + text[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4ehbapr_test.go:31:22: invalid operation: result + text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    result := text\n    \n    spaces\
    \ := 0\n    \n    for i := 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            spaces++\n        } else {\n            if spaces > 1 {\n   \
    \             result = result + \"_\"\n                spaces = 0\n          \
    \  } else {\n                result = result + text[i]\n            }\n      \
    \  }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_uyaxas_test.go:22:12: no new variables on left side of :=

    /tmp/tmpa_uyaxas_test.go:34:26: invalid operation: result + text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += strings.Replace(text, \" \", \"_\"\
    , -1)\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgygcsed_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Replace(text, \" \", \"_\"\
    , -1)\n    text += \"-\"\n    text += strings.Replace(text, \" \", \"-\", -1)\n\
    \    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpel_m8tdz_test.go:21:13: undefined: strings

    /tmp/tmpel_m8tdz_test.go:23:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"_\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ormj5rn_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    for _, char := range text {\n   \
    \     if char == ' ' {\n            result = result + \"_\"\n        } else {\n\
    \            result = result + string(char)\n        }\n    }\n    \n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpsp3dv4cy_test.go:50: expected 'Exa-mple', got 'Exa___mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpsp3dv4cy_test.go:50:\
    \ expected '-Exa_1_2_2_mple', got '___Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7efby4p__test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075045
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    result := text\n    \n    spaces\
    \ := 0\n    \n    for i := 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            spaces++\n        } else {\n            spaces = 0\n        }\n\
    \        \n        if spaces > 2 {\n            result += \"-\"\n            spaces\
    \ = 0\n        } else {\n            result += text[i]\n        }\n    }\n   \
    \ \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate :=\
    \ fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"\
    Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31jpei1h_test.go:22:12: no new variables on left side of :=

    /tmp/tmp31jpei1h_test.go:37:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, char := range text {\n        if char == ' ' {\n            result\
    \ += \"_\"\n        } else {\n            result += char\n        }\n    }\n \
    \   \n    // If there are more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n    result += \"-\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7g3d1u5_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for index,\
    \ char := range text {\n        if char == ' ' {\n            if lastSpaceIndex\
    \ == index {\n                result += char\n            } else {\n         \
    \       result += string([]byte{char})\n            }\n            lastSpaceIndex\
    \ = index\n        } else {\n            result += string([]byte{char})\n    \
    \    }\n    }\n    if lastSpaceIndex < len(text) {\n        result += string([]byte{text[lastSpaceIndex]})\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c76ii0f_test.go:25:17: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp8c76ii0f_test.go:27:41: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmp8c76ii0f_test.go:31:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var lastSpaceIndex int\n    for index,\
    \ char := range text {\n        if char == ' ' {\n            if lastSpaceIndex\
    \ == index {\n                result += char\n            } else {\n         \
    \       result += string([]byte{' ', '_'})\n                lastSpaceIndex = index\n\
    \            }\n        } else {\n            result += char\n            lastSpaceIndex\
    \ = index\n        }\n    }\n    if lastSpaceIndex < len(text) {\n        result\
    \ += string([]byte{' ', '_'})\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1y9mj43_test.go:25:17: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpl1y9mj43_test.go:31:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Replace(text, \" \", \"_\"\
    , -1)\n    text += \"-\"\n    text += strings.Replace(text, \" \", \"_\", -1)\n\
    \    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfaqv62p_test.go:21:13: undefined: strings

    /tmp/tmpgfaqv62p_test.go:23:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text\
    \ += \"_\"\n    text += \"_\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptj0izn7l_test.go:106:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ons5fp9_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074974
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text \nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg70gtfm_test.go:123:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075044
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gjru121_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text += \"_\"\n    text += strings.Repeat(\"-\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idcgh44_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1uzqvjp_test.go:20:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:20:13: undefined: strings

    /tmp/tmp_1uzqvjp_test.go:21:10: no new variables on left side of :=

    /tmp/tmp_1uzqvjp_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074975
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
    \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
    \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var i int\n    for i = 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            result += text[i]\n        }\n\
    \        if i == len(text)-1 || text[i+1] != ' ' {\n            result += \"_\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ocxo9v3_test.go:24:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075047
