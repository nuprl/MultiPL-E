name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
  \ []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    i := 0\n    j := len(numbers) - 1\n    result := []interface{}{}\n    for\
    \ i < j {\n        if numbers[i] < numbers[j] {\n            j := i\n        }\
    \ else {\n            i := j\n        }\n    }\n    result = append(result, numbers[i])\n\
    \    result = append(result, numbers[j])\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex :=\
    \ 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n      \
    \  if numbers[i] < smallest {\n            smallest = numbers[i]\n           \
    \ smallestIndex = i\n        }\n        if numbers[i] > largest {\n          \
    \  largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n  \
    \  return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  numbers := make([]float64, len(numbers))\n    copy(numbers, numbers)\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    diff := numbers[1] - numbers[0]\n\
    \    index := 0\n    result := []interface{}{}\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[index - 1]\n        if diff > 0\
    \ {\n            index = i\n        }\n    }\n\n    result = append(result, numbers[index])\n\
    \    result = append(result, numbers[index+1])\n\n    return result\n}\n", " \
    \   if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    numbers :=\
    \ make([]float64, len(numbers))\n    copy(numbers, numbers)\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n\n    numbers\
    \ := make([]float64, 2)\n    copy(numbers, numbers)\n    numbers[0] = smallest\n\
    \    numbers[1] = largest\n\n    return numbers\n}\n", "    smallestNumber :=\
    \ numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := len(numbers) - 1\n    smallestDiff, largestDiff :=\
    \ diff, diff\n    for i := 0; i < len(numbers); i++ {\n        diff := numbers[i+1]\
    \ - numbers[i]\n        if diff < smallestDiff {\n            smallestDiff = diff\n\
    \            smallestIndex = i\n        }\n        if diff > largestDiff {\n \
    \           largestDiff = diff\n            largestIndex = i\n        }\n    }\n\
    \    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < smallestNumber {\n            smallestNumber = number\n      \
    \  }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    smallestNumberInterface := smallestNumber.(float64)\n \
    \   largestNumberInterface := largestNumber.(float64)\n    smallestNumberInterface\
    \ -= largestNumberInterface\n    largestNumberInterface += smallestNumberInterface\n\
    \    smallestNumberInterface /= 2\n    largestNumberInterface /= 2\n    smallestNumberInterface\
    \ += largestNumberInterface\n    largestNumberInterface -= smallestNumberInterface\n\
    \    return []interface{}{smallestNumberInterface, largestNumberInterface}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    i := 0\n    j := len(numbers)\
    \ - 1\n    closest := numbers[i]\n    closest2 := numbers[j]\n    switch {\n \
    \   case closest < closest2:\n        i, j = j, i\n        closest, closest2 =\
    \ closest2, closest\n    case closest == closest2:\n        i++\n        j--\n\
    \    }\n    return []interface{}{numbers[i], numbers[j]}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    i := 0\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n      \
    \  i++\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    diff := numbers[1] - numbers[0]\n    diff /= float64(len(numbers))\n\n \
    \   index := 0\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if index == 0 {\n            result = append(result, number)\n  \
    \          continue\n        }\n\n        if diff > 0 {\n            diff *= -1\n\
    \        } else {\n            diff *= -1\n            index = index + 1\n   \
    \     }\n\n        if diff < numbers[index] - number {\n            result = append(result,\
    \ number)\n        }\n    }\n\n    return result\n}\n", "    if len(numbers) <\
    \ 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n\n    i := 0\n    j := len(numbers) - 1\n\n    result\
    \ := []interface{}{}\n\n    for i < len(numbers) {\n        if numbers[i] < numbers[j]\
    \ {\n            j += 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n\n    for i < len(numbers) {\n        result = append(result, numbers[i])\n\
    \    }\n\n    for j < len(numbers) {\n        result = append(result, numbers[j])\n\
    \    }\n\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := []interface{}{smallest, largest}\n    return\
    \ result\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    numbers := make([]float64, len(numbers))\n\
    \    copy(numbers, numbers)\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n\
    }\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest_index := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    for _, number := range numbers {\n        if number == smallest\
    \ {\n            return result\n        }\n        if number == largest {\n  \
    \          return result\n        }\n        if number < smallest {\n        \
    \    smallest = number\n        }\n        if number > largest {\n           \
    \ largest = number\n        }\n    }\n    return nil\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := []interface{}{}\n\
    \    for _, number := range numbers {\n        if number == smallest {\n     \
    \       result = append(result, smallest)\n        }\n        if number == largest\
    \ {\n            result = append(result, largest)\n        }\n    }\n\n    return\
    \ result\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        i++\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    index := 0\n\n  \
    \  for _, number := range numbers {\n        if number < smallest {\n        \
    \    smallest = number\n            index = index + 1\n        }\n\n        if\
    \ number > largest {\n            largest = number\n            index = index\
    \ + 1\n        }\n    }\n\n    return numbers[:index]\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    sort.Float64s(numbers)\n    diff := numbers[0]\
    \ - numbers[1]\n    result := []interface{}{}\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff < 0 {\n  \
    \          diff = 0\n        }\n        result = append(result, numbers[i-1]+diff)\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    diff := numbers[1] - numbers[0]\n    result := []interface{}{}\n    for i\
    \ := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n \
    \       if diff < 0 {\n            diff = 0\n        }\n        if diff > 0 {\n\
    \            result = append(result, numbers[i-1])\n            diff = 0\n   \
    \     }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    result := []interface{}{smallest, largest}\n    for _,\
    \ number := range numbers {\n        if number == smallest {\n            return\
    \ result\n        }\n        if number == largest {\n            return result\n\
    \        }\n        if number < smallest {\n            smallest = number\n  \
    \      }\n        if number > largest {\n            largest = number\n      \
    \  }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers[1:] {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    sort.Float64s(numbers)\n\
    \    i := 0\n    j := len(numbers) - 1\n    diff := numbers[i] - numbers[j]\n\
    \    result := []interface{}{}\n    for {\n        if i == j {\n            break\n\
    \        }\n        if diff == 0 {\n            result = append(result, numbers[i])\n\
    \            i++\n            j--\n            continue\n        }\n        if\
    \ diff < 0 {\n            i++\n            diff += numbers[i] - numbers[j]\n \
    \       } else {\n            j--\n            diff -= numbers[i] - numbers[j]\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n     \
    \   return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{}\n    for _, number := range numbers {\n       \
    \ if number == smallest {\n            result = append(result, smallest)\n   \
    \     }\n        if number == largest {\n            result = append(result, largest)\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n     \
    \   return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    i := 0\n    j := len(numbers) - 1\n    diff := math.MaxFloat64\n    result\
    \ := []interface{}{}\n    for i < j {\n        diff := math.Abs(numbers[i] - numbers[j])\n\
    \        if diff < diff {\n            result = append(result, numbers[i])\n \
    \           i++\n        } else {\n            result = append(result, numbers[j])\n\
    \            j--\n        }\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   closest1 := numbers[0]\n    closest2 := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < closest1 {\n            closest1 = number\n\
    \        } else if number > closest2 {\n            closest2 = number\n      \
    \  }\n    }\n    return []interface{}{closest1, closest2}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n            smallest_index = i\n        }\n      \
    \  if numbers[i] > largest {\n            largest = numbers[i]\n            largest_index\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n\n    numbers := make([]float64,\
    \ len(numbers))\n    copy(numbers, numbers)\n\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n  \
    \  for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largestIndex = i\n        }\n    }\n\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            numbers[i] = number\n\
    \            i++\n        }\n    }\n    return numbers[:i]\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallestNumber {\n            smallestNumber = number\n        }\n        if\
    \ number > largestNumber {\n            largestNumber = number\n        }\n  \
    \  }\n    return []interface{}{smallestNumber, largestNumber}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    numbers := numbers[:len(numbers)-1]\n\
    \    numbers := append(numbers, numbers[0])\n\n    diff := numbers[0] - numbers[1]\n\
    \    diff *= diff\n\n    for i := 1; i < len(numbers); i++ {\n        diff +=\
    \ numbers[i] - numbers[i-1]\n        diff *= diff\n    }\n\n    diff /= float64(len(numbers))\n\
    \n    result := []interface{}{}\n    i := 0\n    for ; i < len(numbers); i++ {\n\
    \        if diff > 0 {\n            break\n        }\n        result = append(result,\
    \ numbers[i])\n        diff -= numbers[i]\n    }\n\n    return result\n}\n", " \
    \   if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            numbers[i] = number\n\
    \            i++\n        }\n    }\n    return numbers[:i]\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    result := []interface{}{}\n    for _, number := range numbers {\n      \
    \  if number == smallest {\n            result = append(result, smallest)\n  \
    \      }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n        if numbers[i] > largest {\n            largest = numbers[i]\n  \
    \          largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := []interface{}{smallest, largest}\n    for _, number\
    \ := range numbers {\n        if number == smallest {\n            return result\n\
    \        }\n        if number == largest {\n            return result\n      \
    \  }\n        if number < smallest {\n            result = append(result, number)\n\
    \        }\n        if number > largest {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            numbers[i] = number\n\
    \            i++\n        }\n    }\n    return numbers[:i]\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    return result\n}\n", "  \
    \  if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    i := 0\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n        i++\n    }\n\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            index = i\n   \
    \     }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    for _, number := range numbers {\n        if number == smallest\
    \ {\n            return result\n        }\n        if number == largest {\n  \
    \          return result\n        }\n        if number < smallest {\n        \
    \    smallest = number\n        }\n        if number > largest {\n           \
    \ largest = number\n        }\n    }\n    return nil\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    index := 0\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            index = index + 1\n \
    \       }\n    }\n    return numbers[:index]\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            return result\n        }\n \
    \       if number == largest {\n            return result\n        }\n       \
    \ if number < smallest {\n            return result\n        }\n        if number\
    \ > largest {\n            return result\n        }\n    }\n    return nil\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < smallestNumber {\n            smallestNumber = number\n      \
    \  }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    return result\n}\n", "  \
    \  sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n    return result\n}\n", "    if len(numbers) <\
    \ 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        }\n        if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    smallestNumber := smallestNumber\n    largestNumber :=\
    \ largestNumber\n    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n\
    \    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n  \
    \  smallestNumber := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber\
    \ := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber :=\
    \ smallestNumber\n    largestNumber := largestNumber\n    smallestNumber := smallestNumber\n\
    \    largestNumber := largestNumber\n    smallestNumber := smallestNumber\n  \
    \  largestNumber := largestNumber\n    smallestNumber := smallestNumber\n    largestNumber\
    \ := largestNumber\n    smallestNumber := smallestNumber\n    largestNumber :=\
    \ largestNumber\n    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n\
    \    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n  \
    \  smallestNumber := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber\
    \ := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber :=\
    \ smallestNumber\n    largestNumber := largestNumber\n    smallestNumber := smallestNumber\n\
    \    largestNumber := largestNumber\n    smallestNumber := smallestNumber\n  \
    \  largestNumber := largestNumber\n    smallestNumber := smallestNumber\n    largestNumber\
    \ := largestNumber\n    smallestNumber := smallestNumber\n    largestNumber :=\
    \ largestNumber\n    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n\
    \    smallestNumber := smallestNumber\n    largestNumber := largestNumber\n  \
    \  smallestNumber := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber\
    \ := smallestNumber\n    largestNumber := largestNumber\n    smallestNumber :=\
    \ smallestNumber\n    largestNumber := largestNumber\n    smallestNumber := smallestNumber\n\
    \    largest", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    result := []interface{}{smallest, largest}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            return result\n        }\n \
    \       if number == largest {\n            return result\n        }\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ result\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    result := []interface{}{smallest, largest}\n    return result\n}\n", " \
    \   sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallestNumber :=\
    \ numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n\n    for i < len(numbers) {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        i++\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallestNumber {\n   \
    \         smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        } else if number > largest {\n   \
    \         largest = number\n        }\n\n        if number == smallest {\n   \
    \         index = index + 1\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    index := 0\n\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            index = index + 1\n \
    \       }\n    }\n\n    result := make([]interface{}, 2)\n    result[0] = smallest\n\
    \    result[1] = largest\n    return result\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            index = i\n   \
    \     }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n\n    for i < len(numbers) {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        i++\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    result := []interface{}{}\n    for\
    \ _, number := range numbers {\n        if number == smallest {\n            result\
    \ = append(result, smallest)\n        }\n        if number == largest {\n    \
    \        result = append(result, largest)\n        }\n    }\n\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    return result\n}\n", "  \
    \  if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n\n    result\
    \ := []interface{}{smallest, largest}\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n\
    \    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallest_index = i\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \           largest_index = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    return result\n}\n", "  \
    \  if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := []interface{}{smallest, largest}\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
