name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
  \ []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    i := 0\n    j := len(numbers) - 1\n    result := []interface{}{}\n    for\
    \ i < j {\n        if numbers[i] < numbers[j] {\n            j := i\n        }\
    \ else {\n            i := j\n        }\n    }\n    result = append(result, numbers[i])\n\
    \    result = append(result, numbers[j])\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex :=\
    \ 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n      \
    \  if numbers[i] < smallest {\n            smallest = numbers[i]\n           \
    \ smallestIndex = i\n        }\n        if numbers[i] > largest {\n          \
    \  largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n  \
    \  return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  numbers := make([]float64, len(numbers))\n    copy(numbers, numbers)\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    diff := numbers[1] - numbers[0]\n\
    \    index := 0\n    result := []interface{}{}\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[index - 1]\n        if diff > 0\
    \ {\n            index = i\n        }\n    }\n\n    result = append(result, numbers[index])\n\
    \    result = append(result, numbers[index+1])\n\n    return result\n}\n", " \
    \   if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    numbers :=\
    \ make([]float64, len(numbers))\n    copy(numbers, numbers)\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n\n    numbers\
    \ := make([]float64, 2)\n    copy(numbers, numbers)\n    numbers[0] = smallest\n\
    \    numbers[1] = largest\n\n    return numbers\n}\n", "    smallestNumber :=\
    \ numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := len(numbers) - 1\n    smallestDiff, largestDiff :=\
    \ diff, diff\n    for i := 0; i < len(numbers); i++ {\n        diff := numbers[i+1]\
    \ - numbers[i]\n        if diff < smallestDiff {\n            smallestDiff = diff\n\
    \            smallestIndex = i\n        }\n        if diff > largestDiff {\n \
    \           largestDiff = diff\n            largestIndex = i\n        }\n    }\n\
    \    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < smallestNumber {\n            smallestNumber = number\n      \
    \  }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    smallestNumberInterface := smallestNumber.(float64)\n \
    \   largestNumberInterface := largestNumber.(float64)\n    smallestNumberInterface\
    \ -= largestNumberInterface\n    largestNumberInterface += smallestNumberInterface\n\
    \    smallestNumberInterface /= 2\n    largestNumberInterface /= 2\n    smallestNumberInterface\
    \ += largestNumberInterface\n    largestNumberInterface -= smallestNumberInterface\n\
    \    return []interface{}{smallestNumberInterface, largestNumberInterface}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
