language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    if a <\
    \ 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    \n  \
    \  if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n\
    \    }\n    \n    if a > 0 {\n        c = a % 10\n    }\n    if b > 0 {\n    \
    \    d = b % 10\n    }\n    if c > 0 {\n        e = c % 10\n    }\n    if d >\
    \ 0 {\n        f = d % 10\n    }\n    if e > 0 {\n        g = e % 10\n    }\n\
    \    if f > 0 {\n        h = f % 10\n    }\n    if g > 0 {\n        i = g % 10\n\
    \    }\n    if h > 0 {\n        j = h % 10\n    }\n    if i > 0 {\n        k =\
    \ i % 10\n    }\n    if j > 0 {\n        l = j % 10\n    }\n    if k > 0 {\n \
    \       m = k % 10\n    }\n    if l > 0 {\n        n = l % 10\n    }\n    if m\
    \ > 0 {\n        o = m % 10\n    }\n    if n > 0 {\n        p = n % 10\n    }\n\
    \    if o > 0 {\n        q = o % 10\n    }\n    if p > 0 {\n        r = p % 10\n\
    \    }\n    if q > 0 {\n        s = q % 10\n    }\n    if r > 0 {\n        t =\
    \ r % 10\n    }\n    if s > 0 {\n        u = s % 10\n    }\n    if t > 0 {\n \
    \       v = t % 10\n    }\n    if u > 0 {\n        w = u % 10\n    }\n    if v\
    \ > 0 {\n        x = v % 10\n    }\n    if w > 0 {\n        y = w % 10\n    }\n\
    \    if x > 0 {\n        z = x % 10\n    }\n    \n    if z > 0 {\n        return\
    \ z * 10 + y * 10 + x * 10 + w * 10 + v * 10 + u * 10 + t * 10 + s * 10 + r *\
    \ 10 + p * 10 + o * 10 + j * 10 + k\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpatv8n4rv_test.go:135:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if b == 0 {\n        return 0\n    }\n \
    \   if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n\
    \    c := 0\n    for i := 0; i < b; i++ {\n        c = c * 10 + a%10\n       \
    \ a = a / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpectccdc3_test.go:59: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpectccdc3_test.go:59:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpectccdc3_test.go:59: expected '%!s(int=20)', got '%!s(int=410000000000000)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpectccdc3_test.go:59:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpectccdc3_test.go:59: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp092x8sxk_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp092x8sxk_test.go:24:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp092x8sxk_test.go:24:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := 0\n    for i := 0; i <\
    \ b; i++ {\n        c = c * 10 + a % 10\n        a = a / 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpdoc713pi_test.go:52: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpdoc713pi_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpdoc713pi_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpdoc713pi_test.go:52:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpdoc713pi_test.go:52: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a > 0 && b > 0:\n        c = a * b\n    case a > 0 && b < 0:\n \
    \       c = a * (-b)\n    case a < 0 && b > 0:\n        c = a * (b)\n    case\
    \ a < 0 && b < 0:\n        c = a * (-b)\n    }\n    \n    switch {\n    case c\
    \ > 1000:\n        d = c / 1000\n        c -= d * 1000\n    case c > 100:\n  \
    \      d = c / 100\n        c -= d * 100\n    case c > 10:\n        d = c / 10\n\
    \        c -= d * 10\n    case c > 1:\n        d = c\n        c = 0\n    }\n \
    \   \n    switch {\n    case d > 1000:\n        e = d / 1000\n        d -= e *\
    \ 1000\n    case d > 100:\n        e = d / 100\n        d -= e * 100\n    case\
    \ d > 10:\n        e = d / 10\n        d -= e * 10\n    case d > 1:\n        e\
    \ = d\n        d = 0\n    }\n    \n    switch {\n    case e > 1000:\n        f\
    \ = e / 1000\n        e -= f * 1000\n    case e > 100:\n        f = e / 100\n\
    \        e -= f * 100\n    case e > 10:\n        f = e / 10\n        e -= f *\
    \ 10\n    case e > 1:\n        f = e\n        e = 0\n    }\n    \n    switch {\n\
    \    case f > 1000:\n        g = f / 1000\n        f -= g * 1000\n    case f >\
    \ 100:\n        g = f / 100\n        f -= g * 100\n    case f > 10:\n        g\
    \ = f / 10\n        f -= g * 10\n    case f > 1:\n        g = f\n        f = 0\n\
    \    }\n    \n    switch {\n    case g > 1000:\n        h = g / 1000\n       \
    \ g -= h * 1000\n    case g > 100:\n        h = g / 100\n        g -= h * 100\n\
    \    case g > 10:\n        h = g / 10\n        g -= \nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8ee6kpt_test.go:127:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    default:\n        c = a\n        d = b\n    }\n    \n\
    \    switch {\n    case c < 10:\n        e = c\n        f = d\n    case c > 10:\n\
    \        e = d\n        f = c\n    default:\n        e = c\n        f = d\n  \
    \  }\n    \n    switch {\n    case e < 10:\n        g = e\n        h = f \n  \
    \  case e > 10:\n        g = f\n        h = e\n    default:\n        g = e\n \
    \       h = f\n    }\n    \n    switch {\n    case g < 10:\n        i = g\n  \
    \      j = h\n    case g > 10:\n        i = h\n        j = g\n    default:\n \
    \       i = g\n        j = h\n    }\n    \n    switch {\n    case i < 10:\n  \
    \      k = i\n        l = j\n    case i > 10:\n        k = j\n        l = i\n\
    \    default:\n        k = i\n        l = j\n    }\n    \n    switch {\n    case\
    \ k < 10:\n        m = k\n        n = l\n    case k > 10:\n        m = l\n   \
    \     n = k\n    default:\n        m = k\n        n = l\n    }\n    \n    switch\
    \ {\n    case m < 10:\n        o = m\n        p = n\n    case m > 10:\n      \
    \  o = n\n        p = m\n    default:\n        o = m\n        p = n\n    }\n \
    \   \n    switch {\n    case o < 10:\n        q = o\n        r = p\n    case o\
    \ > 10:\n        q = p\n        r = o\n    default:\n        q = o\n        r\
    \ = p\n    }\n    \n    switch {\n    case q < 10:\n        s = q\n        t =\
    \ r\n    case q > 10:\n        s = r\n        t = q\n    default:\n        s =\
    \ q\n        t = r\n    }\n    \n    switch {\n    case s < 10:\n        u = s\n\
    \        v = t\n    case s > 10:\n        u = t\n        v = s\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfccmn70s_test.go:162:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n    case c <\
    \ 100:\n        e = c\n    case c < 1000:\n        e = c\n    case c < 10000:\n\
    \        e = c\n    case c < 100000:\n        e = c\n    case c < 1000000:\n \
    \       e = c\n    case c < 10000000:\n        e = c\n    case c < 100000000:\n\
    \        e = c\n    case c < 1000000000:\n        e = c\n    case c < 10000000000:\n\
    \        e = c\n    case c < 100000000000:\n        e = c\n    case c < 1000000000000:\n\
    \        e = c\n    case c < 10000000000000:\n        e = c\n    case c < 100000000000000:\n\
    \        e = c\n    case c < 1000000000000000:\n        e = c\n    case c < 10000000000000000:\n\
    \        e = c\n    case c < 100000000000000000:\n        e = c\n    case c <\
    \ 1000000000000000000:\n        e = c\n    case c < 10000000000000000000:\n  \
    \      e = c\n    case c < 100000000000000000000:\n        e = c\n    case c <\
    \ 1000000000000000000000:\n        e = c\n    case c < 10000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000:\n        e = c\n    case\
    \ c < 1000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000:\n        e = c\n   \
    \ case c < 1000000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000000:\n        e = c\n\
    \    case c < 1000000000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn06_sueu_test.go:116:41: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    mult += a / 10\n    mult *= b\n    mult += a % 10\n  \
    \  mult += b / 10\n    mult *= b\n    mult += a % 10\n    mult += b % 10\n   \
    \ return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp40qn_v5w_test.go:52: expected '%!s(int=16)', got '%!s(int=2396614)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp40qn_v5w_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=1109)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp40qn_v5w_test.go:52: expected '%!s(int=0)', got '%!s(int=692435038)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp40qn_v5w_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=179)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp40qn_v5w_test.go:52: expected '%!s(int=42)', got '%!s(int=32240)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp40qn_v5w_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=986)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp40qn_v5w_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if a > 0 && b > 0 {\n        return a *\
    \ b / 10\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpr1tdp7gm_test.go:48: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpr1tdp7gm_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpr1tdp7gm_test.go:48: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpr1tdp7gm_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpr1tdp7gm_test.go:48: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpr1tdp7gm_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a % 10 * b\
    \ / 10\n        a = a / 10\n        b = b / 10\n    }\n    \n    if a > 0 {\n\
    \        mult += a\n        a = a / 10\n    }\n    \n    if b > 0 {\n        mult\
    \ += b\n        b = b / 10\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6py8u06l_test.go:62: expected '%!s(int=16)', got '%!s(int=384)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6py8u06l_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp6py8u06l_test.go:62: expected '%!s(int=0)', got '%!s(int=387)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp6py8u06l_test.go:62:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp6py8u06l_test.go:62: expected '%!s(int=42)', got '%!s(int=53)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp6py8u06l_test.go:62:\
    \ expected '%!s(int=49)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp6py8u06l_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c += a\n        d += b\n    case a > b:\n      \
    \  c += b\n        d += a\n    case a < b:\n        c += a\n        d += b\n \
    \   case a > b:\n        c += b\n        d += a\n    case a < b:\n        c +=\
    \ a\n        d += b\n    case a > b:\n        c += b\n        d += a\n    case\
    \ a < b:\n        c += a\n        d += b\n    case a > b:\n        c += b\n  \
    \      d += a\n    case a < b:\n        c += a\n        d += b\n    case a > b:\n\
    \        c += b\n        d += a\n    case a < b:\n        c += a\n        d +=\
    \ b\n    case a > b:\n        c += b\n        d += a\n    case a < b:\n      \
    \  c += a\n        d += b\n    case a > b:\n        c += b\n        d += a\n \
    \   case a < b:\n        c += a\n        d += b\n    case a > b:\n        c +=\
    \ b\n        d += a\n    case a < b:\n        c += a\n        d += b\n    case\
    \ a > b:\n        c += b\n        d += a\n    case a < b:\n        c += a\n  \
    \      d += b\n    case a > b:\n        c += b\n        d += a\n    case a < b:\n\
    \        c += a\n        d += b\n    case a > b:\n        c += b\n        d +=\
    \ a\n    case a < b:\n        c += a\n        d += b\n    case a > b:\n      \
    \  c += b\n        d += a\n    case a < b:\n        c += a\n        d += b\n \
    \   case a > b:\n        c += b\n        \nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf56u3b28_test.go:125:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    return multiply(a, b / 10)*10\
    \ + a % 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpij_l1cj6_test.go:47: expected '%!s(int=16)', got '%!s(int=148888)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpij_l1cj6_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=1999)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpij_l1cj6_test.go:47: expected '%!s(int=0)', got '%!s(int=20200000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpij_l1cj6_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=1444)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpij_l1cj6_test.go:47: expected '%!s(int=42)', got '%!s(int=7666)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpij_l1cj6_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=1777)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, a\n        e, f = b, a\n        g, h =\
    \ b, a\n        i, j = b, a\n        k, l = b, a\n        m, n = b, a\n      \
    \  o, p = b, a\n        q, r = b, a\n        s, t = b, a\n        u, v = b, a\n\
    \        w, x = b, a\n        y, z = b, a\n    case a > b:\n        c, d = b,\
    \ a\n        e, f = b, a\n        g, h = b, a\n        i, j = b, a\n        k,\
    \ l = b, a\n        m, n = b, a\n        o, p = b, a\n        q, r = b, a\n  \
    \      s, t = b, a\n        u, v = b, a\n        w, x = b, a\n        y, z = b,\
    \ a\n    default:\n        c, d = a, b\n        e, f = b, a\n        g, h = b,\
    \ a\n        i, j = b, a\n        k, l = b, a\n        m, n = b, a\n        o,\
    \ p = b, a\n        q, r = b, a\n        s, t = b, a\n        u, v = b, a\n  \
    \      w, x = b, a\n        y, z = b, a\n    }\n    \n    switch {\n    case c\
    \ < d:\n        c, d = d, c\n        e, f = d, c\n        g, h = d, c\n      \
    \  i, j = d, c\n        k, l = d, c\n        m, n = d, c\n        o, p = d, c\n\
    \        q, r = d, c\n        s, t = d, c\n        u, v = d, c\n        w, x =\
    \ d, c\n        y, z = d, c\n    case c > d:\n        c, d = d, c\n        e,\
    \ f = d, c\n        g, h = d, c\n        i, j = d, c\n        k, l = d, c\n  \
    \      m, n = d, c\n        o, p = d, c\n        q, r = d, c\n        s, t = d,\
    \ c\n        u, v = d, c\n        w, x = d, c\n        y, \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplfaeuweh_test.go:114:9: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a < 10 {\n\
    \        return a * b\n    }\n    \n    if a < 100 {\n        return a * b + 10\n\
    \    }\n    \n    if a < 1000 {\n        return a * b + 100\n    }\n    \n   \
    \ if a < 10000 {\n        return a * b + 1000\n    }\n    \n    if a < 100000\
    \ {\n        return a * b + 10000\n    }\n    \n    if a < 1000000 {\n       \
    \ return a * b + 100000\n    }\n    \n    if a < 10000000 {\n        return a\
    \ * b + 1000000\n    }\n    \n    if a < 100000000 {\n        return a * b + 10000000\n\
    \    }\n    \n    if a < 1000000000 {\n        return a * b + 100000000\n    }\n\
    \    \n    if a < 10000000000 {\n        return a * b + 1000000000\n    }\n  \
    \  \n    if a < 100000000000 {\n        return a * b + 10000000000\n    }\n  \
    \  \n    if a < 1000000000000 {\n        return a * b + 100000000000\n    }\n\
    \    \n    if a < 10000000000000 {\n        return a * b + 1000000000000\n   \
    \ }\n    \n    if a < 100000000000000 {\n        return a * b + 10000000000000\n\
    \    }\n    \n    if a < 1000000000000000 {\n        return a * b + 100000000000000\n\
    \    }\n    \n    if a < 10000000000000000 {\n        return a * b + 1000000000000000\n\
    \    }\n    \n    if a < 100000000000000000 {\n        return a * b + 10000000000000000\n\
    \    }\n    \n    if a < 1000000000000000000 {\n        return a * b + 100000000000000000\n\
    \    }\n    \n    if a < 10000000000000000000 {\n        return a * b + 1000000000000000000\n\
    \    }\n    \n    if a < 100000000000000000000 {\n        return a * b + 10000000000000000000\n\
    \    }\n    \n    if a < 1000000000000000000000 {\n        return a * b + 100000000000000000000\n\
    \    }\n    \n    if a < 10000000000000000000000 {\n        return a * b + 1000000000000000000000\n\
    \    }\n    \n    if a < 100000000000000000000000 {\n        return a * b + 10000000000000000000000\n\
    \    }\n    \n    if a < 1000000000000000000000000 {\n        return a * b + 100000000000000000000000\n\
    \    }\n    \n    if a < 10000000000000000000000000 {\n        return a * b +\
    \ 1000000000000000000000000\n    }\n    \n    if a < 100000000000000000000000000\
    \ {\n        return a * b + 10000000000000000000000000\n    }\n    \n    if a\
    \ < 1000000000000000000000000000 {\n        return a * b + 100000000000000000000000000\n\
    \    }\n    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi41l11ai_test.go:133:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += a[i] * b[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsq2ksfn_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmptsq2ksfn_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    // Loop through the digits of both numbers\n    for i := 0; i < len(a);\
    \ i++ {\n        mult *= 10\n        mult += a[i]\n    }\n    \n    for i := 0;\
    \ i < len(b); i++ {\n        mult *= 10\n        mult += b[i]\n    }\n    \n \
    \   return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppd2t8nh8_test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmppd2t8nh8_test.go:30:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmppd2t8nh8_test.go:33:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmppd2t8nh8_test.go:35:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    if a < b {\n        mult += a\n        mult *= b\n   \
    \ } else {\n        mult += b\n        mult *= a\n    }\n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7wiengnr_test.go:52: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7wiengnr_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7wiengnr_test.go:52: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7wiengnr_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7wiengnr_test.go:52: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7wiengnr_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    for i := 0; i < 10; i++ {\n        mult *= 10\n      \
    \  mult += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpfrzksfjf_test.go:51: expected '%!s(int=16)', got '%!s(int=6440000000)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfrzksfjf_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=2200000000)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpfrzksfjf_test.go:51: expected '%!s(int=0)', got '%!s(int=2000000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpfrzksfjf_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-100000000)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpfrzksfjf_test.go:51: expected '%!s(int=42)', got '%!s(int=2200000000)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpfrzksfjf_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=9200000000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for i := 1; i <=\
    \ b; i++ {\n        c *= 10\n        if c > 9 {\n            c -= 9\n        }\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgw3048xp_test.go:54: expected '%!s(int=16)', got '%!s(int=4616023172317385405)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgw3048xp_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=6816808172241103869)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpgw3048xp_test.go:54: expected '%!s(int=0)', got '%!s(int=-7458794204636873846)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgw3048xp_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpgw3048xp_test.go:54: expected '%!s(int=42)', got '%!s(int=6577009812063866549)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgw3048xp_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=-213916786863559508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    switch {\n    case a < b:\n        c = a - b\n    case a\
    \ > b:\n        c = b - a\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmps19t2e_v_test.go:51: expected '%!s(int=16)', got '%!s(int=-264)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmps19t2e_v_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-9)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmps19t2e_v_test.go:51: expected '%!s(int=0)', got '%!s(int=-169)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmps19t2e_v_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-29)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmps19t2e_v_test.go:51: expected '%!s(int=42)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmps19t2e_v_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=-10)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmps19t2e_v_test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        a = -a\n\
    \        b = -b\n    }\n    c := a * b\n    if c > 9 {\n        return c\n   \
    \ }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpldkot2li_test.go:55: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpldkot2li_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpldkot2li_test.go:55: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpldkot2li_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpldkot2li_test.go:55: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpldkot2li_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    if a <\
    \ 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    \n  \
    \  if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n\
    \    }\n    \n    if a > 0 {\n        c = a%10\n    }\n    if b > 0 {\n      \
    \  d = b%10\n    }\n    if c > 0 {\n        e = c%10\n    }\n    if d > 0 {\n\
    \        f = d%10\n    }\n    if e > 0 {\n        g = e%10\n    }\n    if f >\
    \ 0 {\n        h = f%10\n    }\n    if g > 0 {\n        i = g%10\n    }\n    if\
    \ h > 0 {\n        j = h%10\n    }\n    if i > 0 {\n        k = i%10\n    }\n\
    \    if j > 0 {\n        l = j%10\n    }\n    if k > 0 {\n        m = k%10\n \
    \   }\n    if l > 0 {\n        n = l%10\n    }\n    if m > 0 {\n        o = m%10\n\
    \    }\n    if n > 0 {\n        p = n%10\n    }\n    if o > 0 {\n        q = o%10\n\
    \    }\n    if p > 0 {\n        r = p%10\n    }\n    if q > 0 {\n        s = q%10\n\
    \    }\n    if r > 0 {\n        t = r%10\n    }\n    if s > 0 {\n        u = s%10\n\
    \    }\n    if t > 0 {\n        v = t%10\n    }\n    if u > 0 {\n        w = u%10\n\
    \    }\n    if v > 0 {\n        x = v%10\n    }\n    if w > 0 {\n        y = w%10\n\
    \    }\n    if x > 0 {\n        z = x%10\n    }\n    \n    if z > 0 {\n      \
    \  return z*10 + y*10 + x*10 + o*10 + p*10 + q*10 + r*10 + s*10 + t*10 + u*10\
    \ + v*10 + \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcp853myv_test.go:135:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n\
    \        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n      \
    \  mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjkdwlxg_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpzjkdwlxg_test.go:25:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpzjkdwlxg_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpzjkdwlxg_test.go:30:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpimil9j4i_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpimil9j4i_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n   \
    \     b = -b\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n   \
    \ }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n       \
    \ b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n   \
    \ }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n       \
    \ b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4vitfdoo_test.go:149:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        a = -a\n\
    \    }\n    if b < 0 {\n        b = -b\n    }\n    c := a * b\n    c /= 10\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpb82pos9p_test.go:55: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpb82pos9p_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpb82pos9p_test.go:55: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpb82pos9p_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpb82pos9p_test.go:55: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpb82pos9p_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074752
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n    case c <\
    \ 100:\n        e = c + 10\n    case c < 1000:\n        e = c + 100\n    case\
    \ c < 10000:\n        e = c + 1000\n    case c < 100000:\n        e = c + 10000\n\
    \    case c < 1000000:\n        e = c + 100000\n    case c < 10000000:\n     \
    \   e = c + 1000000\n    case c < 100000000:\n        e = c + 10000000\n    case\
    \ c < 1000000000:\n        e = c + 100000000\n    case c < 10000000000:\n    \
    \    e = c + 1000000000\n    case c < 100000000000:\n        e = c + 10000000000\n\
    \    case c < 1000000000000:\n        e = c + 100000000000\n    case c < 10000000000000:\n\
    \        e = c + 1000000000000\n    case c < 100000000000000:\n        e = c +\
    \ 10000000000000\n    case c < 1000000000000000:\n        e = c + 100000000000000\n\
    \    case c < 10000000000000000:\n        e = c + 1000000000000000\n    case c\
    \ < 100000000000000000:\n        e = c + 10000000000000000\n    case c < 1000000000000000000:\n\
    \        e = c + 100000000000000000\n    case c < 10000000000000000000:\n    \
    \    e = c + 1000000000000000000\n    case c < 100000000000000000000:\n      \
    \  e = c + 10000000000000000000\n    case c < 1000000000000000000000:\n      \
    \  e = c + 100000000000000000000\n    case c < 10000000000000000000000:\n    \
    \    e = c + 1000000000000000000000\n    case c < 100000000000000000000000:\n\
    \        e = c + 10000000000000000000000\n    case c < 1000000000000000000000000:\n\
    \        e = c + 10000000000000000000000000\n    case c < 10000000000000000000000000:\n\
    \        e = c + 100000000000000000000000000\n    case c < 1000000000000000000000000000:\n\
    \        e = c + 10000000000000000000000000000\n    case c < 100000000000000000000000000000:\n\
    \        \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp52sxm7kq_test.go:108:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a > 0 && b\
    \ > 0 {\n        return a * b\n    }\n    \n    if a > 0 {\n        return a\n\
    \    }\n    \n    if b > 0 {\n        return b\n    }\n    \n    return 0\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074752
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    for i := 0; i < len(a); i++ {\n        mult *= 10\n  \
    \      mult += a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        mult *=\
    \ 10\n        mult += b[i]\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbbr8qlj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:24:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmplbbr8qlj_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:28:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    mult := 0\n\
    \    \n    // Add up the unit digits of a\n    for i := 0; i < len(a); i++ {\n\
    \        mult += a[i] - '0'\n    }\n    \n    // Add up the unit digits of b\n\
    \    for i := 0; i < len(b); i++ {\n        mult += b[i] - '0'\n    }\n    \n\
    \    // Return the product of the unit digits\n    return mult % 10\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3wwfl_rf_test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3wwfl_rf_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3wwfl_rf_test.go:33:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp3wwfl_rf_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n\
    \        return a * b\n    }\n    if a > 0 {\n        return a\n    }\n    if\
    \ b > 0 {\n        return b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0\
    \ {\n        return 1\n    }\n    if a > b {\n        a, b = b, a\n    }\n   \
    \ \n    result := 0\n    \n    for i := 0; i < a; i++ {\n        result *= 10\n\
    \        result += b%10\n        b = b / 10\n    }\n    \n    return result\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_k1cm_li_test.go:62: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_k1cm_li_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=8200000000000000000)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_k1cm_li_test.go:62: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_k1cm_li_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_k1cm_li_test.go:62: expected '%!s(int=49)', got '%!s(int=72000000000000000)'\n\
    \    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp_k1cm_li_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__7\
    \ (0.00s)\n        tmp_k1cm_li_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074752
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    c := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp621fzoqx_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp621fzoqx_test.go:24:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp621fzoqx_test.go:24:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c > 0 {\n        return c\n    }\n    if c < 0 {\n\
    \        return -c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpiv1ne5e9_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpiv1ne5e9_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpiv1ne5e9_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpiv1ne5e9_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpiv1ne5e9_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpiv1ne5e9_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074752
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    \n    result := 0\n    \n \
    \   if a < 0 {\n        a = -a\n    }\n    \n    if b < 0 {\n        b = -b\n\
    \    }\n    \n    for i := 0; i < b; i++ {\n        result *= 10\n        result\
    \ += a%10\n        a /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp2egd5rgg_test.go:64: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp2egd5rgg_test.go:64:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp2egd5rgg_test.go:64: expected '%!s(int=20)', got '%!s(int=410000000000000)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp2egd5rgg_test.go:64:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp2egd5rgg_test.go:64: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n  \
    \          c += b[i]\n        }\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6z6ujc0_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpk6z6ujc0_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpk6z6ujc0_test.go:24:19: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n\
    \    \n    if a == 0 || b == 0 {\n        return 1\n    }\n    \n    mult := 0\n\
    \    \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult +=\
    \ a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n \
    \       mult += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqeh29wev_test.go:32:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpqeh29wev_test.go:34:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpqeh29wev_test.go:37:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpqeh29wev_test.go:39:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074752
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // TODO: Write a function that takes in two integers and returns the\
    \ product of their unit digits.\n    // The function should return 0 if either\
    \ of the inputs is 0.\n    // The function should return 0 if the inputs are both\
    \ 0.\n    // The function should return 0 if the inputs are both negative numbers.\n\
    \    // The function should return 0 if the inputs are both positive numbers.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and positive.\n\
    \    // The function should return 0 if the inputs are both positive and negative.\n\
    \    // The function should return 0 if the inputs are both negative and negative.\n\
    \    // The function should return 0 if the inputs are both positive and positive.\n\
    \    // The function should return 0 if the inputs are both \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjq6_bt3i_test.go:56:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c > 0 {\n        return c\n    }\n    return 0\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_j7yxcyt_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_j7yxcyt_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp_j7yxcyt_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp_j7yxcyt_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp_j7yxcyt_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp_j7yxcyt_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    if a < 0 || b < 0 {\n        fmt.Println(\"Invalid\
    \ input\")\n        return -1\n    }\n    \n    if a > 0 && b > 0 {\n        mult\
    \ += a%10 * b%10\n        a = a/10\n        b = b/10\n    }\n    \n    if a >\
    \ 0 {\n        mult += a%10\n        a = a/10\n    }\n    \n    if b > 0 {\n \
    \       mult += b%10\n        b = b/10\n    }\n    \n    return mult\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8v7p3b9b_test.go:67: expected '%!s(int=16)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8v7p3b9b_test.go:67:\
    \ expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8v7p3b9b_test.go:67: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8v7p3b9b_test.go:67:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8v7p3b9b_test.go:67: expected '%!s(int=42)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8v7p3b9b_test.go:67:\
    \ expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp8v7p3b9b_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := 0\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n        c += a%10\n        a /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnmh9ukwf_test.go:53: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnmh9ukwf_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnmh9ukwf_test.go:53: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnmh9ukwf_test.go:53:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnmh9ukwf_test.go:53: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += a[i] - '0'\n    }\n    for i :=\
    \ 0; i < len(b); i++ {\n        if b[i] == 0 {\n            continue\n       \
    \ }\n        c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnsdjf9dd_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpnsdjf9dd_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpnsdjf9dd_test.go:26:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpnsdjf9dd_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpnsdjf9dd_test.go:29:13: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmpnsdjf9dd_test.go:32:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    for i := 0; i < len(a); i++ {\n        mult *= 10\n  \
    \      mult += a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        mult *=\
    \ 10\n        mult += b[i]\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbbr8qlj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:24:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmplbbr8qlj_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:28:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n\
    \        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n      \
    \  mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjkdwlxg_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpzjkdwlxg_test.go:25:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpzjkdwlxg_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpzjkdwlxg_test.go:30:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    // Iterate through each digit of the two numbers\n\
    \    for i := 0; i < len(str(a)); i++ {\n        // Get the current digit from\
    \ the first number\n        digit := a%10\n        // Get the current digit from\
    \ the second number\n        digit2 := b%10\n        // Add the current digit\
    \ to the result\n        result += digit*digit2\n        // Move the two numbers\
    \ through the digit\n        a /= 10\n        b /= 10\n    }\n    \n    return\
    \ result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptopnl68v_test.go:24:25: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n\
    \        return a * b\n    }\n    if a > 0 {\n        return a\n    }\n    return\
    \ b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0\
    \ {\n        b = -b\n    }\n    \n    if a > 9 {\n        mult += a%10\n     \
    \   a = a/10\n    }\n    if b > 9 {\n        mult += b%10\n        b = b/10\n\
    \    }\n    \n    for i := 0; i < a; i++ {\n        mult += 10\n    }\n    for\
    \ i := 0; i < b; i++ {\n        mult += 10\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmph_u0o430_test.go:69: expected '%!s(int=16)', got '%!s(int=560)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph_u0o430_test.go:69:\
    \ expected '%!s(int=72)', got '%!s(int=47)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmph_u0o430_test.go:69: expected '%!s(int=0)', got '%!s(int=3871)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph_u0o430_test.go:69:\
    \ expected '%!s(int=20)', got '%!s(int=29)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmph_u0o430_test.go:69: expected '%!s(int=42)', got '%!s(int=143)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph_u0o430_test.go:69:\
    \ expected '%!s(int=49)', got '%!s(int=44)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmph_u0o430_test.go:69: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        a = -a\n\
    \        b = -b\n    }\n    c := 0\n    for i := 0; i < b; i++ {\n        c *=\
    \ 10\n        c += a%10\n        a /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmppum9j1sb_test.go:57: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmppum9j1sb_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmppum9j1sb_test.go:57: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmppum9j1sb_test.go:57:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmppum9j1sb_test.go:57: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n        if c > 9 {\n            c -= 9\n        }\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp3oeov7sa_test.go:54: expected '%!s(int=16)', got '%!s(int=4616023172317385405)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp3oeov7sa_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=6816808172241103869)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp3oeov7sa_test.go:54: expected '%!s(int=0)', got '%!s(int=-7458794204636873846)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp3oeov7sa_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp3oeov7sa_test.go:54: expected '%!s(int=42)', got '%!s(int=6577009812063866549)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp3oeov7sa_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=-213916786863559508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    \n    // Iterate through each digit in each number\n    for\
    \ i := 0; i < len(a) && i < len(b); i++ {\n        // Add the digit of one number\
    \ to the digit of the other number\n        c += a[i] * b[i]\n    }\n    \n  \
    \  // Return the product of the unit digits\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz4zgrhd4_test.go:24:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpz4zgrhd4_test.go:24:39: invalid argument: b (variable of type int) for
    len

    /tmp/tmpz4zgrhd4_test.go:26:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpz4zgrhd4_test.go:26:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c > 0 {\n        return c\n    }\n    if a > 0 {\n\
    \        return a\n    }\n    return b\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpt16h4v62_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt16h4v62_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpt16h4v62_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt16h4v62_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpt16h4v62_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt16h4v62_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpt16h4v62_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a > 0 && b\
    \ > 0 {\n        return a * b\n    }\n    \n    if a > 0 && b < 0 {\n        return\
    \ a * -1 * b\n    }\n    \n    if a < 0 && b > 0 {\n        return -1 * a * b\n\
    \    }\n    \n    if a < 0 && b < 0 {\n        return -1 * -1 * a * b\n    }\n\
    \    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpfddd8imb_test.go:64: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfddd8imb_test.go:64:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpfddd8imb_test.go:64: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpfddd8imb_test.go:64:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpfddd8imb_test.go:64: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpfddd8imb_test.go:64:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        e, f = a, b\n    case\
    \ a > b:\n        e, f = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      g, h = a, b\n    case a > b:\n        g, h = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        i, j = a, b\n    case a > b:\n        i, j = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        k, l = a, b\n    case\
    \ a > b:\n        k, l = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      m, n = a, b\n    case a > b:\n        m, n = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        o, p = a, b\n    case a > b:\n        o, p = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        q, r = a, b\n    case\
    \ a > b:\n        q, r = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      s, t = a, b\n    case a > b:\n        s, t = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        u, v = a, b\n    case a > b:\n        u, v = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        w, x = a, b\n    case\
    \ a > b:\n        w, x = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      y, z = a, b\n    case a > b:\n        y, z = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        a, b = b, a\n    case a > b:\n        a, b = b,\
    \ a\n    }\n    \n    return c*d*e*f*g*h\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd84w8xg4_test.go:138:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074752
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    \n    if a < 0 || b < 0 {\n        return c\n    }\n    \n\
    \    if a > 0 && b > 0 {\n        c += a%10 * b%10\n        \n        if a > 10\
    \ {\n            c += a%10 * b%10\n        }\n    }\n    \n    return c\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpg_xehlwl_test.go:58: expected '%!s(int=16)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpg_xehlwl_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpg_xehlwl_test.go:58: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpg_xehlwl_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpg_xehlwl_test.go:58: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    for i := 0; i < len(a); i++ {\n        mult *= 10\n  \
    \      mult += a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        mult *=\
    \ 10\n        mult += b[i]\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbbr8qlj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:24:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmplbbr8qlj_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:28:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += b[i] * a[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xnl5wki_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4xnl5wki_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:22: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n    case c <\
    \ 100:\n        e = c\n    case c < 1000:\n        e = c\n    case c < 10000:\n\
    \        e = c\n    case c < 100000:\n        e = c\n    case c < 1000000:\n \
    \       e = c\n    case c < 10000000:\n        e = c\n    case c < 100000000:\n\
    \        e = c\n    case c < 1000000000:\n        e = c\n    case c < 10000000000:\n\
    \        e = c\n    case c < 100000000000:\n        e = c\n    case c < 1000000000000:\n\
    \        e = c\n    case c < 10000000000000:\n        e = c\n    case c < 100000000000000:\n\
    \        e = c\n    case c < 1000000000000000:\n        e = c\n    case c < 10000000000000000:\n\
    \        e = c\n    case c < 100000000000000000:\n        e = c\n    case c <\
    \ 1000000000000000000:\n        e = c\n    case c < 10000000000000000000:\n  \
    \      e = c\n    case c < 100000000000000000000:\n        e = c\n    case c <\
    \ 1000000000000000000000:\n        e = c\n    case c < 10000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000:\n        e = c\n    case\
    \ c < 1000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000:\n        e = c\n   \
    \ case c < 1000000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000000:\n        e = c\n\
    \    case c < 1000000000000000000000000000000:\n        e = c\n    case c < 10000000000000000000000000000000:\n\
    \        e = c\n    case c < 100000000000000000000000000\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn06_sueu_test.go:116:41: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    case a == b:\n        c = 0\n        d = 0\n    }\n\
    \    \n    switch {\n    case c < 10:\n        e = c\n        f = d\n    case\
    \ c > 10:\n        e = d\n        f = c\n    case c == 10:\n        e = 0\n  \
    \      f = 0\n    }\n    \n    switch {\n    case e < 10:\n        g = e\n   \
    \     h = f \n    case e > 10:\n        g = f\n        h = e\n    case e == 10:\n\
    \        g = 0\n        h = 0\n    }\n    \n    switch {\n    case g < 10:\n \
    \       i = g\n        j = h\n    case g > 10:\n        i = h\n        j = g\n\
    \    case g == 10:\n        i = 0\n        j = 0\n    }\n    \n    switch {\n\
    \    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n        k =\
    \ j\n        l = i\n    case i == 10:\n        k = 0\n        l = 0\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    case k == 10:\n        m = 0\n    \
    \    n = 0\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n     \
    \   p = n\n    case m > 10:\n        o = n\n        p = m\n    case m == 10:\n\
    \        o = 0\n        p = 0\n    }\n    \n    switch {\n    case o < 10:\n \
    \       q = o\n        r = p\n    case o > 10:\n        q = p\n        r = o\n\
    \    case o == 10:\n        q = 0\n        r = 0\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s = q\n        t = r\n    case q > 10:\n        s =\
    \ r\n        t = q\n    case q == 10:\n        s = 0\n        t = 0\n    }\n \
    \   \n    switch {\n    case s < 10:\n        u = s\n        v = t\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps_857mj5_test.go:159:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpimil9j4i_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpimil9j4i_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpimil9j4i_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074750
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if a < 0 || b < 0 {\n        return 0\n\
    \    }\n    \n    c := 0\n    \n    if a > 0 && b > 0 {\n        c = a * b / 10\n\
    \    }\n    \n    if a > 0 && b < 0 {\n        c = a * b / 10 + 10\n    }\n  \
    \  \n    if a < 0 && b > 0 {\n        c = a * b / 10 - 10\n    }\n    \n    if\
    \ a < 0 && b < 0 {\n        c = a * b / 10 + 10\n    }\n    \n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpti4itwjz_test.go:67: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpti4itwjz_test.go:67:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpti4itwjz_test.go:67: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpti4itwjz_test.go:67:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpti4itwjz_test.go:67: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpti4itwjz_test.go:67:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    // Iterate through each digit of both numbers\
    \ and multiply them\n    for i := 0; i < len(a); i++ {\n        result *= 10\n\
    \        result += a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n    \
    \    result *= 10\n        result += b[i]\n    }\n    \n    return result\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8fj7e67o_test.go:24:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp8fj7e67o_test.go:26:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp8fj7e67o_test.go:29:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp8fj7e67o_test.go:31:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a > 0 && b\
    \ > 0 {\n        return a * b\n    }\n    \n    if a > 0 && b < 0 {\n        return\
    \ -a * b\n    }\n    \n    if a < 0 && b > 0 {\n        return -a * b\n    }\n\
    \    \n    if a < 0 && b < 0 {\n        return a * b\n    }\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a < 10 {\n        mult += a\n    }\n    \n    if b < 10 {\n     \
    \   mult += b\n    }\n    \n    if a < 100 {\n        mult += a%10 * b%10\n  \
    \  }\n    \n    if a < 1000 {\n        mult += a%100 * b%100\n    }\n    \n  \
    \  if a < 10000 {\n        mult += a%1000 * b%1000\n    }\n    \n    if a < 100000\
    \ {\n        mult += a%10000 * b%10000\n    }\n    \n    if a < 1000000 {\n  \
    \      mult += a%100000 * b%100000\n    }\n    \n    if a < 10000000 {\n     \
    \   mult += a%1000000 * b%1000000\n    }\n    \n    if a < 100000000 {\n     \
    \   mult += a%10000000 * b%10000000\n    }\n    \n    if a < 1000000000 {\n  \
    \      mult += a%100000000 * b%100000000\n    }\n    \n    if a < 10000000000\
    \ {\n        mult += a%1000000000 * b%1000000000\n    }\n    \n    if a < 100000000000\
    \ {\n        mult += a%10000000000 * b%10000000000\n    }\n    \n    if a < 1000000000000\
    \ {\n        mult += a%100000000000 * b%100000000000\n    }\n    \n    if a <\
    \ 10000000000000 {\n        mult += a%1000000000000 * b%1000000000000\n    }\n\
    \    \n    if a < 100000000000000 {\n        mult += a%10000000000000 * b%10000000000000\n\
    \    }\n    \n    if a < 1000000000000000 {\n        mult += a%100000000000000\
    \ * b%100000000000000\n    }\n    \n    if a < 10000000000000000 {\n        mult\
    \ += a%1000000000000000 * b%1000000000000000\n    }\n    \n    if a < 100000000000000000\
    \ {\n        mult += a%10000000000000000 * b%10000000000000000\n    }\n    \n\
    \    if a < 1000000000000000000 {\n        mult += a%100000000000000000 * b%100000000000000000\n\
    \    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpkgc1zq81_test.go:126: expected '%!s(int=16)', got '%!s(int=794716)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkgc1zq81_test.go:126:\
    \ expected '%!s(int=72)', got '%!s(int=8014)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpkgc1zq81_test.go:126: expected '%!s(int=0)', got '%!s(int=41916300)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkgc1zq81_test.go:126:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpkgc1zq81_test.go:126: expected '%!s(int=42)', got '%!s(int=71474)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkgc1zq81_test.go:126:\
    \ expected '%!s(int=49)', got '%!s(int=6953)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpkgc1zq81_test.go:126: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    c := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n        c +=\
    \ b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjknipws_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpgjknipws_test.go:24:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpgjknipws_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpgjknipws_test.go:27:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    if a <\
    \ 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    \n  \
    \  if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n\
    \    }\n    \n    if a > 0 {\n        c = a % 10\n    }\n    if b > 0 {\n    \
    \    d = b % 10\n    }\n    if c > 0 {\n        e = c % 10\n    }\n    if d >\
    \ 0 {\n        f = d % 10\n    }\n    if e > 0 {\n        g = e % 10\n    }\n\
    \    if f > 0 {\n        h = f % 10\n    }\n    if g > 0 {\n        i = g % 10\n\
    \    }\n    if h > 0 {\n        j = h % 10\n    }\n    if i > 0 {\n        k =\
    \ i % 10\n    }\n    if j > 0 {\n        l = j % 10\n    }\n    if k > 0 {\n \
    \       m = k % 10\n    }\n    if l > 0 {\n        n = l % 10\n    }\n    if m\
    \ > 0 {\n        o = m % 10\n    }\n    if n > 0 {\n        p = n % 10\n    }\n\
    \    if o > 0 {\n        q = o % 10\n    }\n    if p > 0 {\n        r = p % 10\n\
    \    }\n    if q > 0 {\n        s = q % 10\n    }\n    if r > 0 {\n        t =\
    \ r % 10\n    }\n    if s > 0 {\n        u = s % 10\n    }\n    if t > 0 {\n \
    \       v = t % 10\n    }\n    if u > 0 {\n        w = u % 10\n    }\n    if v\
    \ > 0 {\n        x = v % 10\n    }\n    if w > 0 {\n        y = w % 10\n    }\n\
    \    if x > 0 {\n        z = x % 10\n    }\n    \n    if z > 0 {\n        return\
    \ z * 10 + y * 10 + x * 10 + o * 10 + p * 10 + q * 10 + r * 10 + s * 10 + t *\
    \ 10 + u * 10 + v * 10 + w * 10 + \nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiwqeq93z_test.go:135:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    if a < 0 || b < 0 {\n        fmt.Println(\"Invalid\
    \ input\")\n        return -1\n    }\n    \n    if a > 0 && b > 0 {\n        mult\
    \ += a%10 * b%10\n        \n        if mult > 9 {\n            mult -= 10\n  \
    \      }\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpl2zcvi0b_test.go:59: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpl2zcvi0b_test.go:59:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpl2zcvi0b_test.go:59: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpl2zcvi0b_test.go:59:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpl2zcvi0b_test.go:59: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    // Iterate through each digit of both numbers\n\
    \    for i := 0; i < len(a) && i < len(b); i++ {\n        // If the digit of A\
    \ is greater than the digit of B, \n        // multiply mult by 10\n        if\
    \ a[i] > b[i] {\n            mult *= 10\n            // If the digit of A is less\
    \ than the digit of B, \n            // subtract mult by 10\n        } else {\n\
    \            mult -= 10\n        }\n    }\n    \n    // Return the product of\
    \ mult and the remainder of a\n    return mult + a%10\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1idj5bh_test.go:24:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmph1idj5bh_test.go:24:39: invalid argument: b (variable of type int) for
    len

    /tmp/tmph1idj5bh_test.go:27:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmph1idj5bh_test.go:27:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    // Loop through each digit in the first number\n\
    \    for i := 0; i < a; i++ {\n        // Loop through each digit in the second\
    \ number\n        for j := 0; j < b; j++ {\n            // Add the two digits\
    \ and store in mult\n            mult += int(i/10) * int(j/10)\n        }\n  \
    \  }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.01s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpxeve4q7k_test.go:55: expected '%!s(int=16)', got '%!s(int=8464204)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxeve4q7k_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=234)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpxeve4q7k_test.go:55: expected '%!s(int=0)', got '%!s(int=34589858850)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxeve4q7k_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpxeve4q7k_test.go:55: expected '%!s(int=42)', got '%!s(int=48384)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxeve4q7k_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=168)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    default:\n        c = a\n        d = b\n    }\n    \n\
    \    switch {\n    case c < 10:\n        e = c\n        f = d\n    case c > 10:\n\
    \        e = d\n        f = c\n    default:\n        e = c\n        f = d\n  \
    \  }\n    \n    switch {\n    case e < 10:\n        g = e\n        h = f\n   \
    \ case e > 10:\n        g = f\n        h = e\n    default:\n        g = e\n  \
    \      h = f\n    }\n    \n    switch {\n    case g < 10:\n        i = g\n   \
    \     j = h\n    case g > 10:\n        i = h\n        j = g\n    default:\n  \
    \      i = g\n        j = h\n    }\n    \n    switch {\n    case i < 10:\n   \
    \     k = i\n        l = j\n    case i > 10:\n        k = j\n        l = i\n \
    \   default:\n        k = i\n        l = j\n    }\n    \n    switch {\n    case\
    \ k < 10:\n        m = k\n        n = l\n    case k > 10:\n        m = l\n   \
    \     n = k\n    default:\n        m = k\n        n = l\n    }\n    \n    switch\
    \ {\n    case m < 10:\n        o = m\n        p = n\n    case m > 10:\n      \
    \  o = n\n        p = m\n    default:\n        o = m\n        p = n\n    }\n \
    \   \n    switch {\n    case o < 10:\n        q = o\n        r = p\n    case o\
    \ > 10:\n        q = p\n        r = o\n    default:\n        q = o\n        r\
    \ = p\n    }\n    \n    switch {\n    case q < 10:\n        s = q\n        t =\
    \ r\n    case q > 10:\n        s = r\n        t = q\n    default:\n        s =\
    \ q\n        t = r\n    }\n    \n    switch {\n    case s < 10:\n        u = s\n\
    \        v = t\n    case s > 10:\n        u = t\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkt5mq68t_test.go:161:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    result := 0\n    for i := 0; i < len(a); i++ {\n\
    \        result *= 10\n        result += a[i]\n    }\n    for i := 0; i < len(b);\
    \ i++ {\n        result *= 10\n        result += b[i]\n    }\n    return result\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wd469n1_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4wd469n1_test.go:25:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4wd469n1_test.go:27:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4wd469n1_test.go:29:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    if a == 0 || b ==\
    \ 0 {\n        return 0\n    }\n    if a > b {\n        a, b = b, a\n    }\n \
    \   \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult *= 10\n\
    \        mult += b%10\n        b = b / 10\n    }\n    \n    return mult % 10\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp74s0m6a3_test.go:62: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp74s0m6a3_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp74s0m6a3_test.go:62: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp74s0m6a3_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp74s0m6a3_test.go:62: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    // Multiply each digit of A by B\n    for i := 0; i < len(a); i++ {\n\
    \        mult *= 10\n        mult += a[i]\n    }\n    \n    // Multiply each digit\
    \ of B by A\n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwy_fuh2_test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpbwy_fuh2_test.go:30:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpbwy_fuh2_test.go:34:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpbwy_fuh2_test.go:36:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    mult := 0\n\
    \    \n    if a > 0 && b > 0 {\n        mult += a%10 * b%10\n    }\n    \n   \
    \ if a > 0 && b < 0 {\n        mult += a%10 * b\n    }\n    \n    if a < 0 &&\
    \ b > 0 {\n        mult += a * b%10\n    }\n    \n    if a < 0 && b < 0 {\n  \
    \      mult += a * b\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpqa_c0wzp_test.go:66: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqa_c0wzp_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpqa_c0wzp_test.go:66: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqa_c0wzp_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpqa_c0wzp_test.go:66: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n\
    \        b = -b\n    }\n    c := 0\n    for i := 0; i < b; i++ {\n        c *=\
    \ 10\n        c += a%10\n        a /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnd2ouxx5_test.go:57: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnd2ouxx5_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnd2ouxx5_test.go:57: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnd2ouxx5_test.go:57:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnd2ouxx5_test.go:57: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Complete the function\n    mult := 0\n    switch {\n    case a > 0\
    \ && b > 0:\n        mult += a%10 * b%10\n    case a > 0 && b < 0:\n        mult\
    \ += a%10 * b\n    case a < 0 && b > 0:\n        mult += a * b%10\n    case a\
    \ < 0 && b < 0:\n        mult += a * b\n    }\n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpj2sq9qvq_test.go:56: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpj2sq9qvq_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpj2sq9qvq_test.go:56: expected '%!s(int=20)', got '%!s(int=-60)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpj2sq9qvq_test.go:56:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpj2sq9qvq_test.go:56: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    for i := 0; i < len(a); i++ {\n        mult *= 10\n  \
    \      mult += a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        mult *=\
    \ 10\n        mult += b[i]\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbbr8qlj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:24:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmplbbr8qlj_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmplbbr8qlj_test.go:28:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074751
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    default:\n        c = a\n        d = b\n    }\n    \n\
    \    switch {\n    case c < 10:\n        e = c\n        f = d\n    case c > 10:\n\
    \        e = d\n        f = c\n    default:\n        e = c\n        f = d\n  \
    \  }\n    \n    switch {\n    case e < 10:\n        g = e\n        h = f \n  \
    \  case e > 10:\n        g = f\n        h = e\n    default:\n        g = e\n \
    \       h = f \n    }\n    \n    switch {\n    case g < 10:\n        i = g\n \
    \       j = h\n    case g > 10:\n        i = h\n        j = g\n    default:\n\
    \        i = g\n        j = h\n    }\n    \n    switch {\n    case i < 10:\n \
    \       k = i\n        l = j\n    case i > 10:\n        k = j\n        l = i\n\
    \    default:\n        k = i\n        l = j\n    }\n    \n    switch {\n    case\
    \ k < 10:\n        m = k\n        n = l\n    case k > 10:\n        m = l\n   \
    \     n = k\n    default:\n        m = k\n        n = l\n    }\n    \n    switch\
    \ {\n    case m < 10:\n        o = m\n        p = n\n    case m > 10:\n      \
    \  o = n\n        p = m\n    default:\n        o = m\n        p = n\n    }\n \
    \   \n    switch {\n    case o < 10:\n        q = o\n        r = p\n    case o\
    \ > 10:\n        q = p\n        r = o\n    default:\n        q = o\n        r\
    \ = p\n    }\n    \n    switch {\n    case q < 10:\n        s = q\n        t =\
    \ r\n    case q > 10:\n        s = r\n        t = q\n    default:\n        s =\
    \ q\n        t = r\n    }\n    \n    switch {\n    case s < 10:\n        u = s\n\
    \        v = t\n    case s > 10:\n        u = t\n        v = \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrbxpn7f_test.go:161:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += b[i] * a[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xnl5wki_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4xnl5wki_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:22: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += a[i] * b[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsq2ksfn_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmptsq2ksfn_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    result := 0\n    \n    if a > 0 && b > 0 {\n \
    \       result := a % 10 * b\n    }\n    \n    if a < 0 && b > 0 {\n        result\
    \ := -a % 10 * b\n    }\n    \n    if a > 0 && b < 0 {\n        result := a %\
    \ 10 * b\n    }\n    \n    if a < 0 && b < 0 {\n        result := -a % 10 * b\n\
    \    }\n    \n    if a > 0 && b == 0 {\n        result := a % 10\n    }\n    \n\
    \    if a < 0 && b == 0 {\n        result := -a % 10\n    }\n    \n    if a >\
    \ 0 && b < 0 {\n        result := -a % 10\n    }\n    \n    if a < 0 && b < 0\
    \ {\n        result := -a % 10\n    }\n    \n    if a > 0 && b > 0 {\n       \
    \ result := a % 10 * b\n    }\n    \n    if a < 0 && b > 0 {\n        result :=\
    \ -a % 10 * b\n    }\n    \n    if a > 0 && b < 0 {\n        result := a % 10\
    \ * b\n    }\n    \n    if a < 0 && b < 0 {\n        result := -a % 10 * b\n \
    \   }\n    \n    if a > 0 && b > 0 {\n        result := a % 10 * b\n    }\n  \
    \  \n    if a < 0 && b > 0 {\n        result := -a % 10 * b\n    }\n    \n   \
    \ if a > 0 && b < 0 {\n        result := a % 10 * b\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        result := -a % 10 * b\n    }\n    \n    if a > 0 && b >\
    \ 0 {\n        result := a % 10 * b\n    }\n    \n    if a < 0 && b > 0 {\n  \
    \      result := -a % 10 * b\n    }\n    \n    if a > 0 && b < 0 {\n        result\
    \ := a % 10 * b\n    }\n    \n    if a < 0 && b < 0 {\n        result := -a %\
    \ 10 * b\n    }\n    \n    if a > 0 && b > 0 {\n        result := a % 10 * b\n\
    \    }\n    \n    if a < 0 && b > 0 {\n        result := -a % 10 * b\n    }\n\
    \    \n    if a > 0 && b < 0 {\n        result := a % 10 * b\n    }\n    \n  \
    \  if a < 0 && b < 0 {\n        result := -a % 10 * b\n    }\n    \n    if a >\
    \ 0 && b > 0 {\n        result := \nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj0vpo792_test.go:122:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    c := 0\n    \n\
    \    if a > 0 && b > 0 {\n        c = a / b\n    }\n    \n    if a > 0 && b <\
    \ 0 {\n        c = a / b\n    }\n    \n    if a < 0 && b > 0 {\n        c = a\
    \ / b\n    }\n    \n    if a < 0 && b < 0 {\n        c = a / b\n    }\n    \n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpyifmgiwn_test.go:66: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpyifmgiwn_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpyifmgiwn_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpyifmgiwn_test.go:66:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpyifmgiwn_test.go:66: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpyifmgiwn_test.go:66:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    for i := 0; i < len(a); i++ {\n        result\
    \ *= 10\n        result += a[i]\n    }\n    \n    for i := 0; i < len(b); i++\
    \ {\n        result *= 10\n        result += b[i]\n    }\n    \n    return result\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnvgdm5r_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpsnvgdm5r_test.go:25:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpsnvgdm5r_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpsnvgdm5r_test.go:30:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        e, f = a, b\n    case\
    \ a > b:\n        e, f = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      g, h = a, b\n    case a > b:\n        g, h = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        i, j = a, b\n    case a > b:\n        i, j = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        k, l = a, b\n    case\
    \ a > b:\n        k, l = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      m, n = a, b\n    case a > b:\n        m, n = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        o, p = a, b\n    case a > b:\n        o, p = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        q, r = a, b\n    case\
    \ a > b:\n        q, r = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      s, t = a, b\n    case a > b:\n        s, t = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        u, v = a, b\n    case a > b:\n        u, v = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        w, x = a, b\n    case\
    \ a > b:\n        w, x = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      y, z = a, b\n    case a > b:\n        y, z = b, a\n    }\n    \n    return\
    \ c*d + e*f + g*h + i*j + k*l + m*n + o*p + q*r + s*t + u*v + w*x + y*z\n}\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpk6onljsk_test.go:152: expected '%!s(int=16)', got '%!s(int=731712)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpk6onljsk_test.go:152:\
    \ expected '%!s(int=72)', got '%!s(int=6384)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpk6onljsk_test.go:152: expected '%!s(int=0)', got '%!s(int=44868240)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpk6onljsk_test.go:152:\
    \ expected '%!s(int=20)', got '%!s(int=-2520)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpk6onljsk_test.go:152: expected '%!s(int=42)', got '%!s(int=61104)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpk6onljsk_test.go:152:\
    \ expected '%!s(int=49)', got '%!s(int=5508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Complete the function here\n    result := 0\n    \n    if a < 0 ||\
    \ b < 0 {\n        fmt.Println(\"Invalid input\")\n        return 0\n    }\n \
    \   \n    if a > 0 && b > 0 {\n        if a > b {\n            a -= b\n      \
    \  }\n        \n        for i := 0; i < a; i++ {\n            result *= 10\n \
    \       }\n        \n        for i := 0; i < b; i++ {\n            result *= 10\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3p09sie_test.go:66: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3p09sie_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3p09sie_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3p09sie_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3p09sie_test.go:66: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    \n    for i := 0; i < len(a); i++ {\n        c += a[i] *\
    \ b[i]\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2129kcui_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp2129kcui_test.go:24:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp2129kcui_test.go:24:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: null
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for {\n       \
    \ if b&1 == 1 {\n            c += a\n        }\n        a <<= 1\n        b >>=\
    \ 1\n        if b == 0 {\n            break\n        }\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074768
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += b[i] * a[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xnl5wki_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4xnl5wki_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp4xnl5wki_test.go:26:22: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        if a >= 10 {\n       \
    \     a %= 10\n        }\n        if b >= 10 {\n            b %= 10\n        }\n\
    \        c += (a*10 + b)\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpc4b1e2le_test.go:56: expected '%!s(int=16)', got '%!s(int=82)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc4b1e2le_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=98)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpc4b1e2le_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpc4b1e2le_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpc4b1e2le_test.go:56: expected '%!s(int=42)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpc4b1e2le_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=77)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpc4b1e2le_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a > 0 && b\
    \ > 0 {\n        return a * b\n    }\n    \n    if a > 0 {\n        return a\n\
    \    }\n    \n    if b > 0 {\n        return b\n    }\n    \n    return 0\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1w_exy2a_test.go:60:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp1w_exy2a_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074752
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if a > 0 && b > 0 {\n        return a *\
    \ b / 10\n    }\n    if a < 0 && b < 0 {\n        return a * b / 10\n    }\n \
    \   if a < 0 && b > 0 {\n        return a * b / 10\n    }\n    if a > 0 && b <\
    \ 0 {\n        return a * b / 10\n    }\n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpjbmstx3p_test.go:57: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjbmstx3p_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpjbmstx3p_test.go:57: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjbmstx3p_test.go:57:\
    \ expected '%!s(int=20)', got '%!s(int=-21)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpjbmstx3p_test.go:57: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjbmstx3p_test.go:57:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    case a == b:\n        c = a\n        d = a\n    }\n\
    \    \n    switch {\n    case c < 10:\n        e = c\n        f = d\n    case\
    \ c > 10:\n        e = d\n        f = c\n    case c == 10:\n        e = d\n  \
    \      f = d\n    }\n    \n    switch {\n    case e < 10:\n        g = e\n   \
    \     h = f \n    case e > 10:\n        g = f\n        h = e\n    case e == 10:\n\
    \        g = f\n        h = e\n    }\n    \n    switch {\n    case g < 10:\n \
    \       i = g\n        j = h\n    case g > 10:\n        i = h\n        j = g\n\
    \    case g == 10:\n        i = h\n        j = g\n    }\n    \n    switch {\n\
    \    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n        k =\
    \ j\n        l = i\n    case i == 10:\n        k = j\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    case k == 10:\n        m = l\n    \
    \    n = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n     \
    \   p = n\n    case m > 10:\n        o = n\n        p = m\n    case m == 10:\n\
    \        o = n\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n \
    \       q = o\n        r = p\n    case o > 10:\n        q = p\n        r = o\n\
    \    case o == 10:\n        q = p\n        r = p\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s = q\n        t = r\n    case q > 10:\n        s =\
    \ r\n        t = q\n    case q == 10:\n        s = r\n        t = r\n    }\n \
    \   \n    switch {\n    case s < 10:\n        u = \nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq1_sntiy_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
