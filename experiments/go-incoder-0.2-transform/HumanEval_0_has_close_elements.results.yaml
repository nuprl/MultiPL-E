language: go_test.go
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i\
    \ := 2; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n \
    \       diff /= 2\n        diff *= diff\n        if diff < threshold {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpxm76p7vj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpxm76p7vj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpxm76p7vj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpxm76p7vj_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n\n    for _, number := range numbers {\n        diff /= 2\n  \
    \      diff *= diff\n        diff += threshold\n        if diff < 0 {\n      \
    \      return false\n        }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoolrscfk_test.go:24:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        if number - threshold < diff {\n            return true\n\
    \        }\n        diff -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpgrgap1z7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpgrgap1z7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgrgap1z7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps1g1dhfp_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps1g1dhfp_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5m1ojqyz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5m1ojqyz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5m1ojqyz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkbl9lqbn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        diff += number - threshold\n        if diff < 0 {\n     \
    \       diff = 0\n        }\n        if diff > threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpphyub4fj_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpphyub4fj_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpphyub4fj_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ true\n    }\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n      \
    \  diff += numbers[i] - numbers[i-1]\n        if diff < threshold {\n        \
    \    return true\n        }\n        diff /= 2\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjxhn6ifq_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjxhn6ifq_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpjxhn6ifq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n\n    for\
    \ _, number := range numbers {\n        if number - threshold < diff {\n     \
    \       return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpdxw_x9pi_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpdxw_x9pi_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpdxw_x9pi_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpwz4zcs3k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpwz4zcs3k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpwz4zcs3k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpwz4zcs3k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            return true\n        }\n   \
    \     diff = number - threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe_i_gu6v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _,\
    \ number := range numbers[2:] {\n        diff += number - numbers[0]\n       \
    \ diff /= 2\n        diff *= diff\n        if diff < threshold {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpksh70x7y_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpksh70x7y_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpksh70x7y_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpksh70x7y_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        diff += number - threshold\n        if diff < 0 {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jzneiek_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jzneiek_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jzneiek_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9oqb59i4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9oqb59i4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number-diff\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp011xl3cm_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp011xl3cm_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9oqb59i4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5m1ojqyz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5m1ojqyz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5m1ojqyz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 2; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe4zaovxz_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe4zaovxz_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpnfhkqace_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers[2:] {\n        if abs(number - numbers[0]) < diff {\n            return\
    \ true\n        }\n        diff /= 2\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytxt9702_test.go:23:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp9sanfhzo_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9sanfhzo_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp9sanfhzo_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff <= threshold {\n        return\
    \ true\n    }\n    diff /= 2\n    return has_close_elements(numbers[:len(numbers)-1],\
    \ threshold) || has_close_elements(numbers[1:], threshold)\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpc1m_ipuz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc1m_ipuz_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2.0\n    for _, number := range\
    \ numbers {\n        diff += number - threshold\n        diff /= 2.0\n       \
    \ if diff < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpn9gl2rgk_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpn9gl2rgk_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpn9gl2rgk_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff <= threshold {\n        return\
    \ true\n    }\n    diff /= 2\n    return has_close_elements(numbers[:len(numbers)-1],\
    \ threshold) || has_close_elements(numbers[1:], threshold)\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpc1m_ipuz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc1m_ipuz_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    }\n\
    \    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ true\n    }\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n      \
    \  diff += numbers[i] - numbers[i-1]\n        if diff < threshold {\n        \
    \    return true\n        }\n        diff /= 2\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjxhn6ifq_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjxhn6ifq_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpjxhn6ifq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        diff /= 2\n        diff *= diff\n        diff += threshold\n\
    \        if diff < 0 {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpr3bmgs7p_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpr3bmgs7p_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpr3bmgs7p_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpr3bmgs7p_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    }\n\
    \n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpb1u_n_k__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpb1u_n_k__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpb1u_n_k__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpb1u_n_k__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjec3b812_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjec3b812_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = 0\n        } else {\n\
    \            diff -= number\n        }\n    }\n    return diff < threshold\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpdp5xq6o6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpdp5xq6o6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpdp5xq6o6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpnfhkqace_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    }\n\
    \    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number-diff\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp011xl3cm_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp011xl3cm_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - threshold < diff {\n            return true\n\
    \        }\n        diff -= number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbp82g7ps_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if abs(diff) < threshold {\n            return true\n        }\n    \
    \    diff -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyqwq90rr_test.go:20:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpo1fv7jz4_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 2; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe4zaovxz_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe4zaovxz_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff / 2\n    }\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmponc0po7k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmponc0po7k_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps1g1dhfp_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps1g1dhfp_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpo1fv7jz4_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    sort.Float64s(numbers)\n\n    diff := numbers[1] - numbers[0]\n    if diff\
    \ < threshold {\n        return false\n    }\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0g935xlk_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = 0\n        } else {\n\
    \            diff -= number\n        }\n    }\n    return diff < threshold\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpdp5xq6o6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpdp5xq6o6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpdp5xq6o6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    diff /=\
    \ 2\n\n    for _, n := range numbers {\n        if diff > threshold {\n      \
    \      return false\n        }\n        diff -= n\n    }\n\n    return true\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1reb0r_d_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:] {\n    \
    \    if diff > threshold {\n            return false\n        }\n        diff\
    \ -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp3j9xq_qr_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp3j9xq_qr_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp3j9xq_qr_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp3j9xq_qr_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _,\
    \ n := range numbers[2:] {\n        diff += n - numbers[0]\n        diff /= 2\n\
    \        diff *= diff\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp7rrp190l_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp7rrp190l_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp7rrp190l_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp7rrp190l_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n\n    for\
    \ _, number := range numbers {\n        if number - threshold < diff {\n     \
    \       return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpdxw_x9pi_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpdxw_x9pi_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpdxw_x9pi_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkbl9lqbn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - numbers[0]\n    }\n\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpom1mh_gp_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpom1mh_gp_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps1g1dhfp_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps1g1dhfp_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _,\
    \ number := range numbers[2:] {\n        diff += number - numbers[0]\n       \
    \ diff /= 2\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp0gryrldm_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp0gryrldm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp0gryrldm_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp0gryrldm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i\
    \ := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n \
    \       diff /= 2\n        diff *= diff\n        if diff < threshold {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpbhqgjsnh_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbhqgjsnh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpbhqgjsnh_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpbhqgjsnh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkbl9lqbn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if abs(number - numbers[0]) < diff {\n            diff = abs(number -\
    \ numbers[0])\n        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiklls1th_test.go:20:12: undefined: abs

    /tmp/tmpiklls1th_test.go:21:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    \
    \    if diff < threshold {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            return true\n        }\n   \
    \     diff = number - threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe_i_gu6v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:] {\n    \
    \    if diff > threshold {\n            return false\n        }\n        diff\
    \ -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp3j9xq_qr_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp3j9xq_qr_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp3j9xq_qr_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp3j9xq_qr_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n    }\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpm6l8d6u5_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpm6l8d6u5_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpm6l8d6u5_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpm6l8d6u5_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphj74a_2v_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphj74a_2v_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpud1v9mui_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpud1v9mui_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    diff /= threshold\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff < threshold {\n  \
    \          return true\n        }\n        diff /= threshold\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp407smk83_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp407smk83_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp407smk83_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp407smk83_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    \
    \    if diff < threshold {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff <= threshold {\n        return\
    \ true\n    }\n    diff /= 2\n    return has_close_elements(numbers[:len(numbers)-1],\
    \ threshold) && has_close_elements(numbers[1:], threshold)\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp6k3nvj7j_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp6k3nvj7j_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp6k3nvj7j_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp6k3nvj7j_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i\
    \ := 2; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n \
    \       diff /= 2\n        diff *= diff\n        if diff < threshold {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpxm76p7vj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpxm76p7vj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpxm76p7vj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpxm76p7vj_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - threshold < diff {\n            return true\n\
    \        }\n        diff -= number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbp82g7ps_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9oqb59i4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9oqb59i4_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n    \
    \    if diff > threshold {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq9durjz_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2.0\n    for _, number := range\
    \ numbers {\n        diff += number - threshold\n        diff /= 2.0\n       \
    \ if diff < 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp60lckrzh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp60lckrzh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp60lckrzh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp60lckrzh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    sort.Float64s(numbers)\n\n    for i := 1; i < len(numbers); i++ {\n     \
    \   if numbers[i-1] > numbers[i] {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsp2l6nxi_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - threshold < diff {\n            return true\n\
    \        }\n        diff -= number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbp82g7ps_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpbp82g7ps_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    \
    \    if diff < threshold {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphc2f1wii_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphc2f1wii_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ = number - numbers[0]\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphxto8whq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphxto8whq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphxto8whq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphxto8whq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n\n    diff /= 2\n    diff -= threshold\n    if diff < 0 {\n  \
    \      return false\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpyo6qxkr0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpyo6qxkr0_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpyo6qxkr0_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpyo6qxkr0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff\
    \ += threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4ia8lepc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4ia8lepc_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpnfhkqace_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if number - diff < threshold {\n            return true\n        }\n\
    \        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfy85ysz8_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfy85ysz8_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n    }\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpm6l8d6u5_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpm6l8d6u5_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpm6l8d6u5_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpm6l8d6u5_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        diff += number - numbers[0]\n        diff /= 2\n    }\n\
    \    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpwhp22xo8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpwhp22xo8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            return true\n        }\n   \
    \     diff = number - threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe_i_gu6v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnogtw9lh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpnogtw9lh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            return true\n        }\n   \
    \     diff = number - threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe_i_gu6v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjec3b812_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjec3b812_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, number := range\
    \ numbers[2:] {\n        if number - diff < threshold {\n            return true\n\
    \        }\n        diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpo1fv7jz4_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpo1fv7jz4_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2bes90pe_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp2bes90pe_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            diff = 0\n        }\n      \
    \  diff += number - threshold\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp54cb_0zn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp54cb_0zn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp54cb_0zn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp54cb_0zn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers {\n   \
    \     if number - threshold < diff {\n            return true\n        }\n   \
    \     diff = number - threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpe_i_gu6v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpe_i_gu6v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpm343xsjn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm343xsjn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpm343xsjn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ = number - numbers[0]\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphxto8whq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphxto8whq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphxto8whq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphxto8whq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _,\
    \ number := range numbers {\n        diff += number - threshold\n        diff\
    \ /= 2\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpg3gdbg9n_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpg3gdbg9n_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpg3gdbg9n_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpg3gdbg9n_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcey9wq6c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcey9wq6c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _,\
    \ number := range numbers[2:] {\n        diff += number - numbers[0]\n       \
    \ diff /= 2\n        diff *= diff\n    }\n    return diff < threshold\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpau4l8y7n_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpau4l8y7n_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpau4l8y7n_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpau4l8y7n_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    return diff\
    \ < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate :=\
    \ has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcuz2wqe3_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number := range\
    \ numbers {\n        if number - diff < threshold {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpnfhkqace_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpnfhkqace_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if diff > threshold {\n            return false\n        }\n        diff\
    \ -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_99s6uom_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_99s6uom_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpm343xsjn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm343xsjn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpm343xsjn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= 2\n\n    \
    \    if diff < threshold {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpxst0mtw3_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpxst0mtw3_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        diff += number - numbers[0]\n        if diff > threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz1w2qd44_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpz1w2qd44_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkbl9lqbn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkbl9lqbn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpcp_5xxf4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpcp_5xxf4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpcp_5xxf4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpcp_5xxf4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    diff /= 2.0\n    for _, n := range numbers\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmptv3zc3kr_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptv3zc3kr_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmptv3zc3kr_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    if diff < threshold {\n        return\
    \ false\n    }\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i]\
    \ - numbers[i-1]\n        if diff < threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpacpcer2e_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpacpcer2e_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074514
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:] {\n\
    \        if abs(number - numbers[0]) < diff {\n            diff = abs(number -\
    \ numbers[0])\n        }\n    }\n\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn_erdra_test.go:21:12: undefined: abs

    /tmp/tmppn_erdra_test.go:22:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n  \
    \  diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjw0a6q9e_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjw0a6q9e_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074514
