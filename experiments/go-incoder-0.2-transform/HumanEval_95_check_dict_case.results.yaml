language: go_test.go
name: HumanEval_95_check_dict_case
results:
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" {\n            if strings.ToLower(k) != k {\n \
    \               return false\n            }\n            if strings.ToUpper(k)\
    \ != k {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbq5m_x2_test.go:28:16: undefined: strings

    /tmp/tmpfbq5m_x2_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != fmt.Sprintf(\"%s\", k) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp4p45qyl0_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp4p45qyl0_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp4p45qyl0_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3xdx5yf_test.go:26:14: value declared but not used

    /tmp/tmpt3xdx5yf_test.go:30:37: undefined: strings

    /tmp/tmpt3xdx5yf_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=dictionary,go,case-insensitive\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk_ggch18_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key == \"\" {\n            return false\n      \
    \  }\n        if key != strings.ToLower(key) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdbl95xud_test.go:26:14: value declared but not used

    /tmp/tmpdbl95xud_test.go:30:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr5qn1a2_test.go:27:17: undefined: strings

    /tmp/tmprr5qn1a2_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=dictionary,go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzes16vt_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key[0]) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi37szq3d_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n        if value != string(string(value)) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp4w7l8ryy_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp4w7l8ryy_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp4w7l8ryy_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35rwyh5t_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" {\n            if strings.ToLower(k) != k\
    \ {\n                return false\n            }\n            if strings.ToUpper(k)\
    \ != k {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpod3peszg_test.go:26:12: v declared but not used

    /tmp/tmpod3peszg_test.go:28:16: undefined: strings

    /tmp/tmpod3peszg_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5l4v_2r_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%v\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpgjga4ows_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a tags=dictionary,go\
    \ |>\n<| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    reflect\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4d5tc6m_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=dictionary,go,case-sensitive |>\nI wrote a package that does this\
    \ for you:\nhttps://github.com/gokulkrishna/go-case-sensitive-map\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"github.com/gokulkrishna/go-case-sensitive-map\"\
    \n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8dx6h8v1_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    reflect\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpakna9l6r_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != fmt.Sprintf(\"%v\", k) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp9y2ryqh6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp9y2ryqh6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp9y2ryqh6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxywb5zxq_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb024ymrl_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a tags=go,dictionary |>\n<| a tags=go,dictionary |>\n\
    I wrote a function to check if a map contains all keys of a given map.\n<code>\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8a7x2df_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key == key {\n            return false\n       \
    \ }\n        if key != \"\" && key != key {\n            return false\n      \
    \  }\n        if key != \"\" && key != key {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp462w2cj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != string(k) {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp3ek1i8fg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp3ek1i8fg_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp3ek1i8fg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key[0]) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi37szq3d_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        switch k {\n        case \"A\":\n        case \"B\":\n     \
    \   case \"C\":\n        case \"D\":\n        case \"E\":\n        case \"F\"\
    :\n        case \"G\":\n        case \"H\":\n        case \"I\":\n        case\
    \ \"J\":\n        case \"K\":\n        case \"L\":\n        case \"M\":\n    \
    \    case \"N\":\n        case \"O\":\n        case \"P\":\n        case \"Q\"\
    :\n        case \"R\":\n        case \"S\":\n        case \"T\":\n        case\
    \ \"U\":\n        case \"V\":\n        case \"W\":\n        case \"X\":\n    \
    \    case \"Y\":\n        case \"Z\":\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"a\":\n        case \"b\":\n    \
    \    case \"c\":\n        case \"d\":\n        case \"e\":\n        case \"f\"\
    :\n        case \"g\":\n        case \"h\":\n        case \"i\":\n        case\
    \ \"j\":\n        case \"k\":\n        case \"\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbdoxf7xt_test.go:127:14: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a tags=dictionary,go,string\
    \ |>\n<| a tags=dictionary,go,string |>\n<code>\npackage main\n\nimport (\n  \
    \  \"fmt\"\n    \"reflect\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n \
    \ candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpphfu5kcy_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdba2_2w_test.go:26:12: v declared but not used

    /tmp/tmpxdba2_2w_test.go:30:12: undefined: strings

    /tmp/tmpxdba2_2w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpze2rdr1o_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpze2rdr1o_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if v == \"\" || v == v {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuu7if6q_test.go:33:12: undefined: strings

    /tmp/tmpsuu7if6q_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdba2_2w_test.go:26:12: v declared but not used

    /tmp/tmpxdba2_2w_test.go:30:12: undefined: strings

    /tmp/tmpxdba2_2w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != \"\" {\n            if strings.ToLower(key)\
    \ != key {\n                return false\n            }\n            if strings.ToUpper(key)\
    \ != key {\n                return false\n            }\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe15q7nqt_test.go:26:14: value declared but not used

    /tmp/tmpe15q7nqt_test.go:28:16: undefined: strings

    /tmp/tmpe15q7nqt_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        switch k {\n        case \"Name\", \"Age\", \"City\":\n    \
    \        continue\n        default:\n            if k == strings.ToLower(k) ||\
    \ k == strings.ToUpper(k) {\n                continue\n            }\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm55ykvej_test.go:31:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%v\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpgjga4ows_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=dictionary,go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4o33enq2_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdba2_2w_test.go:26:12: v declared but not used

    /tmp/tmpxdba2_2w_test.go:30:12: undefined: strings

    /tmp/tmpxdba2_2w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%v\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\
    \n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvndt_d_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n        if value != string(strings.ToLower(value)) {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmtppvut_test.go:30:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" {\n            if strings.ToLower(k) != k {\n \
    \               return false\n            }\n            if strings.ToUpper(k)\
    \ != k {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbq5m_x2_test.go:28:16: undefined: strings

    /tmp/tmpfbq5m_x2_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpbbdovrj__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n        if key != string(key) {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp089q3gm6_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr5qn1a2_test.go:27:17: undefined: strings

    /tmp/tmprr5qn1a2_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggda3feg_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n        if value != string(string(value)) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp4w7l8ryy_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp4w7l8ryy_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp4w7l8ryy_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nI wrote a package to solve this problem. \n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"reflect\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe0rmsb7g_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key == \"\" {\n            return false\n      \
    \  }\n        if key != strings.ToLower(key) || key != strings.ToUpper(key) {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjkyriho_test.go:26:14: value declared but not used

    /tmp/tmpyjkyriho_test.go:30:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdba2_2w_test.go:26:12: v declared but not used

    /tmp/tmpxdba2_2w_test.go:30:12: undefined: strings

    /tmp/tmpxdba2_2w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" {\n            if strings.ToLower(k) != k {\n \
    \               return false\n            }\n            if strings.ToUpper(k)\
    \ != k {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbq5m_x2_test.go:28:16: undefined: strings

    /tmp/tmpfbq5m_x2_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a go package\
    \ to solve this problem. \n<code>\npackage main\n\nimport (\n    \"fmt\"\n   \
    \ \"reflect\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfcqzx6mi_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == v {\n            continue\n     \
    \   }\n        if strings.ToLower(k) == strings.ToLower(v) {\n            continue\n\
    \        }\n        if strings.ToUpper(k) == strings.ToUpper(v) {\n          \
    \  continue\n        }\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7u4bfhh_test.go:30:12: undefined: strings

    /tmp/tmpl7u4bfhh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqg3g4o7b_test.go:26:12: v declared but not used

    /tmp/tmpqg3g4o7b_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != k {\n            return false\n  \
    \      }\n        if strings.ToUpper(k) != k {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7j8sf8nq_test.go:26:12: v declared but not used

    /tmp/tmp7j8sf8nq_test.go:30:12: undefined: strings

    /tmp/tmp7j8sf8nq_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        switch k {\n        case \"NAME\", \"AGE\", \"CITY\":\n    \
    \        continue\n        default:\n            if k != strings.ToLower(k) ||\
    \ k != strings.ToUpper(k) {\n                return false\n            }\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wqh954_test.go:31:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n            return\
    \ false\n        }\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpjz1ll_ge_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpjz1ll_ge_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpjz1ll_ge_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\
    \n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4jcg0rod_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr5qn1a2_test.go:27:17: undefined: strings

    /tmp/tmprr5qn1a2_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] != k[0] {\n            return false\n\
    \        }\n        if v != \"\" && v[0] != v[0] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpc_dofj3a_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpc_dofj3a_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpc_dofj3a_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) || k != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszolqo5v_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if v == \"\" || v == v {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuu7if6q_test.go:33:12: undefined: strings

    /tmp/tmpsuu7if6q_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && dict[k] != \"\" {\n            if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2pgtzul0_test.go:28:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb024ymrl_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != fmt.Sprintf(\"%v\", k) {\n            return false\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5oipxazm_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && strings.ToLower(k) != k {\n            return\
    \ false\n        }\n    }\n    for k := range dict {\n        if k != \"\" &&\
    \ strings.ToUpper(k) != k {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nmt4rfs_test.go:27:23: undefined: strings

    /tmp/tmp4nmt4rfs_test.go:32:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqo_bri4s_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%v\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpgjga4ows_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpgjga4ows_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075036
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpbbdovrj__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != string(key) {\n            return false\n\
    \        }\n        if key != string(key) {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp089q3gm6_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != string(k) {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp3ek1i8fg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp3ek1i8fg_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp3ek1i8fg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && strings.ToLower(k) != k {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmrl2i3x_test.go:27:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n       \
    \     return false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <=\
    \ 'z' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uf2owhc_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k == \"\" {\n            return false\n        }\n      \
    \  if strings.ToLower(k) != k {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxizx8e0__test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a tags=go,dictionary |>\n<| c |>\nThis doesn't work if\
    \ you have a key with multiple capital letters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a key with multiple capital letters.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a key with multiple capital letters.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if you have a key with multiple capital letters.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe easiest way is to use reflect.DeepEqual:\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpztftvd_4_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a tags=dictionary,go |>\n<| c |>\nThis does not answer\
    \ the question. The question asks for a function that returns true if the keys\
    \ are in lower case or upper case. Your function returns true if the keys are\
    \ in lower case or upper case and false if they are in mixed case.\n<|/ c |>\n\
    <| c |>\nThe question asks for a function that returns true if the keys are in\
    \ lower case or upper case. Your function returns true if the keys are in lower\
    \ case or upper case and false if they are in mixed case.\n<|/ c |>\n<| c |>\n\
    The question asks for a function that returns true if the keys are in lower case\
    \ or upper case. Your function returns true if the keys are in lower case or upper\
    \ case and false if they are in mixed case.\n<|/ c |>\n<| c |>\nThe question asks\
    \ for a function that returns true if the keys are in lower case or upper case.\
    \ Your function returns true if the keys are in lower case or upper case and false\
    \ if they are in mixed case.\n<|/ c |>\n<| c |>\nThe question asks for a function\
    \ that returns true if the keys are in lower case or upper case. Your function\
    \ returns true if the keys are in lower case or upper case and false if they are\
    \ in mixed case.\n<|/ c |>\n<| a tags=dictionary,go |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthed9due_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if v == \"\" || v == v {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuu7if6q_test.go:33:12: undefined: strings

    /tmp/tmpsuu7if6q_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a tags=go,dictionary |>\n<| a dscore=0 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo210sz_6_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=dictionary,go,case-insensitive\
    \ |>\nI wrote a package that does this for you:\n<code>\npackage caseinsensitive\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxhcmarxq_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpze2rdr1o_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpze2rdr1o_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if strings.ToLower(key) == key {\n            return\
    \ true\n        }\n        if strings.ToUpper(key) == key {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43gew628_test.go:26:14: value declared but not used

    /tmp/tmp43gew628_test.go:27:12: undefined: strings

    /tmp/tmp43gew628_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || k == k {\n            return false\n \
    \       }\n        if strings.ToLower(k) != strings.ToLower(k) {\n           \
    \ return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdba2_2w_test.go:26:12: v declared but not used

    /tmp/tmpxdba2_2w_test.go:30:12: undefined: strings

    /tmp/tmpxdba2_2w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr11yrqwn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\
    \n)\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpis7j36np_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr5qn1a2_test.go:27:17: undefined: strings

    /tmp/tmprr5qn1a2_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        switch k {\n        case \"Name\", \"Age\", \"City\", \"State\"\
    , \"ZIP\":\n            continue\n        default:\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmp1tv4hf41_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp1tv4hf41_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__4\
    \ (0.00s)\n        tmp1tv4hf41_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__5 (0.00s)\n        tmp1tv4hf41_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb024ymrl_test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3xdx5yf_test.go:26:14: value declared but not used

    /tmp/tmpt3xdx5yf_test.go:30:37: undefined: strings

    /tmp/tmpt3xdx5yf_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k == \"\" {\n            return false\n        }\n      \
    \  switch k {\n        case \"A\":\n        case \"a\":\n        case \"B\":\n\
    \        case \"b\":\n        case \"C\":\n        case \"c\":\n        case \"\
    D\":\n        case \"d\":\n        case \"E\":\n        case \"e\":\n        case\
    \ \"F\":\n        case \"f\":\n        case \"G\":\n        case \"g\":\n    \
    \    case \"H\":\n        case \"h\":\n        case \"I\":\n        case \"i\"\
    :\n        case \"J\":\n        case \"j\":\n        case \"K\":\n        case\
    \ \"k\":\n        case \"L\":\n        case \"l\":\n        case \"M\":\n    \
    \    case \"m\":\n        case \"N\":\n        case \"n\":\n        case \"O\"\
    :\n        case \"o\":\n        case \"P\":\n        case \"p\":\n        case\
    \ \"Q\":\n        case \"q\":\n        case \"R\":\n        case \"r\":\n    \
    \    case \"S\":\n        case \"s\":\n        case \"T\":\n        case \"t\"\
    :\n        case \"U\":\n        case \"u\":\n        case \"V\":\n        case\
    \ \"v\":\n        case \"W\":\n        case \"w\":\n        case \"X\":\n    \
    \    case \"x\":\n        case \"Y\":\n        case \"y\":\n        case \"Z\"\
    :\n        case \"z\":\n        case \"a\":\n        case \"b\":\n        case\
    \ \"c\":\n        case \"d\":\n        case \"e\":\n        case \"f\":\n    \
    \    case \"g\":\n        case \"h\":\n        case \"i\":\n        case \"j\"\
    :\n        case \"k\":\n        case \"l\":\n        case \"m\":\n        case\
    \ \"n\":\n        case \"o\":\n        case \"p\":\n        case \"q\":\n    \
    \    case \"r\":\n        case \"s\":\n        case \"t\":\n        case \"u\"\
    :\n        case \"v\":\n        case \"w\":\n        case \"x\":\n        case\
    \ \"y\":\n        case \"z\":\n        case \"A\":\n        case \"a\":\n    \
    \    case \"B\":\n        case \"b\":\n        case \"C\":\n        case \"c\"\
    :\n        case \"D\":\n        case \"d\":\n        case \"E\":\n        case\
    \ \"e\":\n        case \"F\":\n        case \"f\":\n        case \"G\":\n    \
    \    case \"g\":\n        case \"H\":\n        case \"h\":\n        case \"I\"\
    :\n        case \"i\":\n        case \"J\":\n        case \"j\":\n        case\
    \ \"\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp266z08vt_test.go:129:14: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if k != \"\" && dict[k] != \"\" {\n            if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2pgtzul0_test.go:28:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) == k {\n            return true\n\
    \        }\n        if strings.ToUpper(k) == k {\n            return true\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpao1y2y7q_test.go:26:12: v declared but not used

    /tmp/tmpao1y2y7q_test.go:27:12: undefined: strings

    /tmp/tmpao1y2y7q_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_sbb1kv_test.go:26:12: v declared but not used

    /tmp/tmph_sbb1kv_test.go:30:12: undefined: strings

    /tmp/tmph_sbb1kv_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k != \"\" && k[0] != string(k[0]) {\n            return\
    \ false\n        }\n        if v != \"\" && v[0] != string(v[0]) {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9z6xu67v_test.go:27:31: invalid operation: k[0] != string(k[0]) (mismatched
    types byte and string)

    /tmp/tmp9z6xu67v_test.go:30:31: invalid operation: v[0] != string(v[0]) (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpbbdovrj__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpbbdovrj__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075038
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%v\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%v\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%v\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3xdx5yf_test.go:26:14: value declared but not used

    /tmp/tmpt3xdx5yf_test.go:30:37: undefined: strings

    /tmp/tmpt3xdx5yf_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_g10tm9t_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075039
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz_flnhm_test.go:27:12: undefined: strings

    /tmp/tmprz_flnhm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f0je56u_test.go:26:12: v declared but not used

    /tmp/tmp7f0je56u_test.go:30:12: undefined: strings

    /tmp/tmp7f0je56u_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94le_ue__test.go:30:12: undefined: strings

    /tmp/tmp94le_ue__test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075036
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17voftj__test.go:26:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_z68k2o_test.go:26:14: value declared but not used

    /tmp/tmpi_z68k2o_test.go:30:37: undefined: strings

    /tmp/tmpi_z68k2o_test.go:33:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2wh6kw3_test.go:26:12: v declared but not used

    /tmp/tmpu2wh6kw3_test.go:27:12: undefined: strings

    /tmp/tmpu2wh6kw3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075037
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// >>>\
    \ check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n//\
    \ true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, v :=\
    \ range dict {\n        if strings.ToLower(k) != strings.ToLower(k) {\n      \
    \      return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj79yamwy_test.go:26:12: v declared but not used

    /tmp/tmpj79yamwy_test.go:27:12: undefined: strings

    /tmp/tmpj79yamwy_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075035
