name: HumanEval_64_vowels_count
language: go_test.go
prompt: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function vowels_count which takes a string representing\n// a word as\
  \ input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\n"
tests: "func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
  \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
  \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
  keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n    \
  \ { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    vowelsCount := 0\n\
    \    for _, r := range s {\n        if r == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, v := range vowels {\n            if r == v {\n    \
    \            vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n        if v == 'y'\
    \ {\n            vowelsCount++\n        }\n        for _, vv := range vowels {\n\
    \            if v == vv {\n                vowelsCount++\n            }\n    \
    \    }\n    }\n    return vowelsCount\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n \
    \       if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n      \
    \      vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n", "    vowels\
    \ := []rune{'a', 'e', 'i', 'o', 'u'}\n    vowelsCount := 0\n    for _, r := range\
    \ s {\n        if r == 'y' {\n            vowelsCount++\n        }\n        if\
    \ !contains(vowels, r) {\n            vowelsCount++\n        }\n    }\n    return\
    \ vowelsCount\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    vowelsCount\
    \ := 0\n    for _, r := range s {\n        if r == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, v := range vowels {\n            if r == v {\n    \
    \            vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n \
    \   vowelsCount := 0\n    for _, r := range s {\n        if r == 'y' {\n     \
    \       vowelsCount++\n        }\n        for _, v := range vowels {\n       \
    \     if r == v {\n                vowelsCount++\n            }\n        }\n \
    \   }\n    return vowelsCount\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o',\
    \ 'u'}\n    vowelsCount := 0\n    for _, r := range s {\n        if r == 'y' {\n\
    \            vowelsCount++\n        }\n        for _, v := range vowels {\n  \
    \          if r == v {\n                vowelsCount++\n            }\n       \
    \ }\n    }\n    return vowelsCount\n}\n", "    vowels := []rune{'a', 'e', 'i',\
    \ 'o', 'u'}\n    vowelsCount := 0\n    for _, r := range s {\n        if r ==\
    \ 'y' {\n            vowelsCount++\n        }\n        for _, v := range vowels\
    \ {\n            if r == v {\n                vowelsCount++\n            }\n \
    \       }\n    }\n    return vowelsCount\n}\n", "    vowels := []rune{'a', 'e',\
    \ 'i', 'o', 'u'}\n    vowelsCount := 0\n    for _, r := range s {\n        if\
    \ vowels[r%len(vowels)] == true {\n            vowelsCount++\n        }\n    }\n\
    \    return vowelsCount\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n        if v ==\
    \ 'y' {\n            vowelsCount++\n        }\n        for _, vv := range vowels\
    \ {\n            if v == vv {\n                vowelsCount++\n            }\n\
    \        }\n    }\n    return vowelsCount\n}\n", "    vowels := []rune{'a', 'e',\
    \ 'i', 'o', 'u'}\n    vowelsCount := 0\n    for _, r := range s {\n        if\
    \ vowels[r%len(vowels)] == true {\n            vowelsCount++\n        }\n    }\n\
    \    return vowelsCount\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    vowelsCount := 0\n    for _, r := range s {\n        if r == 'y' {\n    \
    \        vowelsCount++\n        }\n        for _, v := range vowels {\n      \
    \      if r == v {\n                vowelsCount++\n            }\n        }\n\
    \    }\n    return vowelsCount\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n        if\
    \ v == 'y' {\n            vowelsCount++\n        }\n        for _, vv := range\
    \ vowels {\n            if v == vv {\n                vowelsCount++\n        \
    \    }\n        }\n    }\n    return vowelsCount\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range\
    \ s {\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n\
    \            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n", " \
    \   vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r :=\
    \ range s {\n        if r == 'y' {\n            count++\n        }\n        for\
    \ _, v := range vowels {\n            if r == v {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n", "    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    count := 0\n    for _, r := range s {\n        if vowels[r%len(vowels)]\
    \ == true {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount :=\
    \ 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i' ||\
    \ v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n    return\
    \ vowelsCount\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    vowelsCount := 0\n    for _, v := range s {\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' {\n            vowelsCount++\n     \
    \   }\n    }\n    return vowelsCount\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
