name: HumanEval_65_circular_shift
language: go_test.go
prompt: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n"
tests: "func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n   \
  \  { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
  \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
  \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n   \
    \     shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>", "    s := \"\"\n    for shift > 0 {\n        if shift\
    \ > len(x) {\n            shift = len(x)\n        }\n        s += string(x%10)\
    \ + string(x/10)\n        x /= 10\n        shift -= 1\n    }\n    return s\n}\n",
  "    s := \"\"\n    x %= 10\n    for i := 0; i < shift; i++ {\n        s = string([]int{x,\
    \ x%10}) + s\n        x /= 10\n    }\n    return s\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n\
    }\n", "    s := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n    \
    \        s += x[len(x)-1]\n            break\n        }\n        s += x[(len(x)-shift)%len(x)]\n\
    \        shift -= len(x)\n    }\n    return s\n}\n", "    x %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %=\
    \ 10\n    x += 10\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "   \
    \ x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n", "    x %= (1 << shift)\n    x <<= shift\n    x %= (1\
    \ << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %=\
    \ (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n \
    \   x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n", "    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n", "    s := \"\"\n    x %= 10\n    for i := 0; i < shift; i++ {\n  \
    \      s += string(x)\n        x /= 10\n    }\n    return s\n}\n", "    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift >\
    \ len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>=\
    \ shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    ",
  "    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n \
    \   x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n \
    \   x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    ", "   \
    \ x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x))[shift:] + strconv.Itoa(x))\n    }\n    return\
    \ strconv.Itoa(int(strconv.Itoa(x))[:shift] + strconv.Itoa(x))\n}\n", "    x %=\
    \ 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x +=\
    \ \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n", "    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    ", "    s := \"\"\n    for i := 0; i < shift; i++ {\n      \
    \  s += string(x)\n        x = x >> 1\n    }\n    return s\n}\n", "    x %= (10\
    \ * shift)\n    if x < 0 {\n        x = 10 * shift - x\n    }\n    x /= 10 * shift\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= ", "    s := \"\"\n    for shift > 0 {\n        shift -=\
    \ len(strconv.Itoa(x))\n        s += x[len(strconv.Itoa(x)) : len(strconv.Itoa(x))+shift]\n\
    \        x = int(x)\n    }\n    return s\n}\n", "    digits := []int{}\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[shift:])\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n  \
    \  return strconv.Itoa(x[:shift])\n}\n", "    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    digits := []int{0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift > len(digits)\
    \ {\n        shift = len(digits)\n    }\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n \
    \   shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    ", "   \
    \ x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n  \
    \  x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    digits := []int{x}\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n\
    \    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    s := \"\
    \"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n\
    \        x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return s\n}\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    s := make([]int, len(x))\n    copy(s, x)\n    for i := len(s)\
    \ - 1; i >= shift; i-- {\n        s[i] = s[i-1]\n    }\n    s[shift] = 0\n   \
    \ return fmt.Sprintf(\"%v\", s)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[len(digits)-1])\n}\n", "    result := \"\"\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > 0 {\n        for i := len(strconv.Itoa(x)); i > shift; i-- {\n\
    \            result = strconv.Itoa(x%10) + result\n            x /= 10\n     \
    \   }\n    } else {\n        for i := len(strconv.Itoa(x)); i < -shift; i++ {\n\
    \            result = strconv.Itoa(x%10) + result\n            x /= 10\n     \
    \   }\n    }\n    return result\n}\n", "    x %= 10\n    x <<= shift\n    x >>=\
    \ shift\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= ", "   \
    \ if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s :=\
    \ make([]int, len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i--\
    \ {\n        s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"\
    %v\", s)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    s := \"\"\n \
    \   n := len(strconv.Itoa(x))\n    if shift > n {\n        shift = n - shift\n\
    \    }\n    for i := 0; i < shift; i++ {\n        s += x%10\n        x /= 10\n\
    \    }\n    for i := shift; i < n; i++ {\n        s += x%10\n        x /= 10\n\
    \    }\n    return s\n}\n", "    x %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x >>= shift\n\
    \    x %= 10\n    return strconv.Itoa(x) + strconv.Itoa(10-x)\n}\n", "    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n  \
    \  x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n   \
    \ shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= ", "    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n", "    x\
    \ %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10\
    \ * shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    x <<= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x\
    \ >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x\
    \ >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x\
    \ >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    ", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x %= 10\n    return\
    \ string(x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    ",
  "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n", "    digits := []int{x}\n    for i := 0; i < shift; i++\
    \ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return\
    \ fmt.Sprintf(\"%v\", digits)\n}\n", "    digits := []int{x}\n    for i := 0;\
    \ i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n \
    \   }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= ", "    digits := []int{x}\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n\
    \    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n   \
    \ x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= ", "    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n\
    \    shift /= 10\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\"\
    , x)\n}\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n      \
    \  digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x\
    \ >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++ {\n        x = 10*x\
    \ + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= ", "    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x <<=\
    \ shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = x << 1\n    }\n    return strconv.Itoa(x)\n}\n", "    x %= (1 << shift)\n\
    \    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n",
  "    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x += \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n", "    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= ", "    digits := []int{0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    result := \"\"\n    shift %= len(digits)\n \
    \   for i := 0; i < shift; i++ {\n        result = digits[len(digits)-1-i] + result\n\
    \    }\n    for i := 0; i < len(digits)-shift; i++ {\n        result = digits[i]\
    \ + result\n    }\n    return result + digits[len(digits)-shift]\n}\n", "    x\
    \ %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= ", "    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift\
    \ /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n   \
    \ shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift ", "    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n", "    s := \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        if x < 0 {\n            s += \"-\"\n     \
    \       x = -x\n        }\n        s += fmt.Sprintf(\"%d\", x%10)\n        x =\
    \ x/10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1; i >= shift;\
    \ i-- {\n            s += \"0\"\n        }\n    }\n    return s\n}\n", "    digits\
    \ := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = (digits[i] - '0') << shift\n        shift -= len(strconv.Itoa(x%10))\n\
    \        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n", "    digits\
    \ := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n  \
    \  x += '0'\n    x += \"0\"\n    return strconv.Itoa(x)\n}\n", "    s := \"\"\n\
    \    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n  \
    \      x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n \
    \   }\n    return s\n}\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n      \
    \  result = fmt.Sprintf(\"%v%v\", result, x%10)\n        x = x/10\n    }\n   \
    \ return fmt.Sprintf(\"%v%v\", result, x%10)\n}\n", "    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x\
    \ %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n \
    \   x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n", "    s := \"\"\n    x %= 10\n    for i := 0; i < shift;\
    \ i++ {\n        s += string(x)\n        x /= 10\n    }\n    return s\n}\n", " \
    \   s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\"\
    , x%10, s)\n        x = x/10\n    }\n    return s\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n    }\n    x\
    \ >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %=\
    \ 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= ", "    x %=\
    \ 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -=\
    \ len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n       \
    \ return string(x)[shift:] + string(x)[:shift]\n    }\n    return string(x)[shift:]\
    \ + string(x)[:shift]\n}\n", "    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n\
    \    }\n    digits := make([]int, len(x))\n    copy(digits, x)\n    for i := 0;\
    \ i < shift; i++ {\n        digits[i%len(x)] ^= digits[i%len(x)] >> 1\n    }\n\
    \    return fmt.Sprintf(\"%v\", digits)\n}\n", "    s := \"\"\n    x %= 10\n \
    \   for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%d%s\", x, s)\n  \
    \      x /= 10\n    }\n    return s\n}\n", "    x %= 10\n    x <<= shift\n   \
    \ x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n  \
    \  x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x ", "    s := \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n    }\n\
    \    return s\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    x += \"0\"\n    return\
    \ strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n   \
    \ x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= ", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    s := \"\"\n \
    \   for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n", "    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = 10*x + 1\n    }\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    digits := make([]int, len(x))\n    for i := 0; i < shift;\
    \ i++ {\n        digits[i] = x%10\n        x = x/10\n    }\n    for i := 0; i\
    \ < len(x); i++ {\n        digits[i] = x%10\n        x = x/10\n    }\n    return\
    \ fmt.Sprintf(\"%v\", digits)\n}\n", "    digits := make([]int, len(strconv.Itoa(x)))\n\
    \    i := 0\n    for ; i < len(digits); i++ {\n        digits[i] = x%10\n    \
    \    x /= 10\n    }\n    for ; i < len(digits)-shift; i++ {\n        digits[i]\
    \ = 0\n    }\n    for ; i < len(digits); i++ {\n        digits[i] = digits[i+shift]\n\
    \    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ += string(x)\n        x /= 10\n    }\n    result += string(x)\n    return result\n\
    }\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x\
    \ %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    ", "    x %= 10\n  \
    \  shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        x = x << 1\n   \
    \     x %= 10\n    }\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x))[shift:])\
    \ + strconv.Itoa(int(strconv.Itoa(x))[:shift])\n    }\n    return strconv.Itoa(int(strconv.Itoa(x))[:shift])\
    \ + strconv.Itoa(int(strconv.Itoa(x))[shift:])\n}\n", "    x %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n  \
    \  shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /= 10\n    x\
    \ %= 10\n    return strconv.Itoa(x) + strconv.Itoa(int(x)%10)\n}\n", "    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= ", "    x %= (10 *\
    \ shift)\n    x /= 10 * shift\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    ",
  "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= ", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    digits := []int{0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift < 0 {\n        shift\
    \ += len(digits)\n    }\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10", "    x %= (10 * shift)\n    x /= 10 * shift\n    x\
    \ %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n", "    if shift > len(x) {\n   \
    \     return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x <<= shift\n   \
    \ x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result := \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n    for i := len(x)\
    \ - 1; i >= shift; i-- {\n        result += x[i]\n    }\n    return result\n}\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x >>= shift\n    x >>= shift\n    return fmt.Sprintf(\"\
    %v\", x)\n}\n", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %=\
    \ (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    x <<= shift\n    x\
    \ >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x ", "    x %= 10\n    shift\
    \ %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    if\
    \ x < 10 {\n        x += \"0\"\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n",
  "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n  \
    \      s = s + x%10\n        x = x/10\n    }\n    if x > 0 {\n        s = s +\
    \ x%10\n        x = x/10\n    }\n    return s\n}\n", "    digits := []int{x}\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n\
    \    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x\
    \ %= 10\n    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n   \
    \ return s\n}\n", "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n\
    \    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%0*d\", shift,\
    \ x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"\
    %c%c\", x%10, s)\n        x = x/10\n    }\n    return s\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    s\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        if x < 0 {\n            s\
    \ = string([]byte(s[len(s)-1:])) + s\n            x <<= 1\n        } else {\n\
    \            s = string([]byte(s[:len(s)-1]) + s) + s\n            x >>= 1\n \
    \       }\n    }\n    return s\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n   \
    \     shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n       \
    \ shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n   \
    \     shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n       \
    \ shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    x\
    \ %= 10\n    ", "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n\
    \    }\n    x %= 10\n    y := x\n    for i := 0; i < shift; i++ {\n        y =\
    \ y*10 + x\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", y)\n}\n", " \
    \   x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    x\
    \ %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= ", "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n   \
    \ }\n    x <<= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x\
    \ >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>", "    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"", "    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x/10))\
    \ + int(strconv.Itoa(x%10)))\n    }\n    return strconv.Itoa(x+int(strconv.Itoa(x/10))\
    \ + int(strconv.Itoa(x%10))) + circular_shift(x, shift-1)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x -= shift\n\
    \    x /= 10\n    return strconv.Itoa(x)\n}\n", "    digits := []int{}\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x /=\
    \ 10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n",
  "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x /= 10\n\
    \    x %= 10\n    return strconv.Itoa(x)\n}\n", "    if shift > len(x) {\n   \
    \     return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift /= 10\n   \
    \ x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"\
    %v\", x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s +=\
    \ fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    if shift > len(s) {\n\
    \        for i := len(s) - 1; i >= shift; i-- {\n            s += fmt.Sprintf(\"\
    %d\", x%10)\n            x = x/10\n        }\n    }\n    return s\n}\n", "   \
    \ x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    if shift > len(x) {\n     \
    \   return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n \
    \   x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n", " \
    \   x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    x\
    \ += \"0\"\n    return strconv.Itoa(x)\n}\n", "    result := \"\"\n    for shift\
    \ > 0 {\n        digit, shift := x%10, shift-1\n        result += string(digit)\n\
    \        x = x/10\n    }\n    if shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit)\n    }\n    return result\n}\n", "    s := \"\
    \"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n\
    \    }\n    if x > 0 {\n        s = s + x%10\n    }\n    return s\n}\n", "   \
    \ digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    result\
    \ := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n\
    \        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    for\
    \ i := 0; i < len(strconv.Itoa(x)); i++ {\n        result = strconv.Itoa(x%10)\
    \ + result\n        x /= 10\n    }\n    return result\n}\n", "    x %= 10\n  \
    \  shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n    \
    \    return strconv.Itoa(int(x)-int(x))\n    }\n    return strconv.Itoa(int(x)+int(x))\n\
    }\n", "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = x * 10 + x\n    }\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"\
    %d\", x%10)\n        x = x/10\n    }\n    if shift > len(s) {\n        for i :=\
    \ len(s) - 1; i >= shift; i-- {\n            s += fmt.Sprintf(\"%d\", x%10)\n\
    \            x = x/10\n        }\n    }\n    return s\n}\n", "    digits := []int{x}\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n\
    \    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n  \
    \  if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n \
    \   }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    ", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n\
    \    result := \"\"\n    for i := 0; i < shift; i++ {\n        result = strconv.Itoa(x)\
    \ + result\n        x /= 10\n    }\n    return strconv.Itoa(x) + result\n}\n",
  "    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x += \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n", "    digits\
    \ := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[len(digits)-1])\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>=\
    \ shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n       \
    \ digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return\
    \ strconv.Itoa(x[:len(strconv.Itoa(x)-shift)])\n}\n", "    digits := make([]int,\
    \ len(strconv.Itoa(x)))\n    copy(digits, strconv.Itoa(x))\n    for i := len(digits);\
    \ shift > 0; shift-- {\n        digits[len(digits)-1], digits[shift] = digits[shift],\
    \ digits[len(digits)-1]\n    }\n    return string(digits)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x -= shift\n    x /= 10\n    x -= shift\n \
    \   x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x ", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n", "    digits := []int{x}\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n", "    x %= 10\n    shift %=\
    \ 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    x <<= shift\n    x\
    \ >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x ", "    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n", "    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= (10 * shift)\n    x /=\
    \ 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n", "    x %=\
    \ 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    x -= int(x)\n    x /= 10\n    shift /= 10\n    x %= 10\n    x += (10\
    \ - shift)\n    x /= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    digits := []int{0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift > len(digits) {\n\
    \        shift = len(digits)\n    }\n    result := \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = digits[len(digits)-i-1] + result\n    }\n    return\
    \ result + digits[x]\n}\n", "    digits := []int{x}\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[len(digits)-1])\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>=\
    \ shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int,\
    \ len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i-- {\n      \
    \  s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"%v\", s)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return\
    \ strconv.Itoa(x[:shift])\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) -\
    \ shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n", "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>=\
    \ shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x >>= shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    s := \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x /= 10\n    }\n\
    \    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n    }\n    return s\n}\n",
  "    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    ", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n       \
    \ digits[i] = digits[i]+digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
