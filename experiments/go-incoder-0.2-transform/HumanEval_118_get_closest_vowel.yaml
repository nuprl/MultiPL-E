name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range vowels {\n        if strings.Contains(word, v) {\n\
    \            vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n    \
    \    return \"\"\n    }\n    vowelsCount -= 1\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount ", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n\
    \    for _, v := range vowels {\n        if word == v {\n            return v\n\
    \        }\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i]\
    \ == word[len(word)-1] {\n            return word[i]\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 1", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range vowels {\n        if word == v {\n            vowelsCount++\n\
    \        }\n    }\n    if vowelsCount == 0 {\n        return \"\"\n    }\n   \
    \ vowelsCount -= 1\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i]\
    \ == word[len(word)-1] {\n            return word[i]\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []rune(\"aeiouAEIOU\")\n    vowelsLen := len(vowels)\n\
    \    \n    i := len(word) - 1\n    \n    for i >= 0 {\n        if word[i] == 'a'\
    \ || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n\
    \            i -= 1\n            continue\n        }\n        \n        if word[i]\
    \ == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U'\
    \ {\n            i -= 1\n            continue\n        }\n        \n        if\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n   \
    \         i -= 1\n            continue\n        }\n        \n        if word[i]\
    \ == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U'\
    \ {\n            i -= 1\n            continue\n        }\n        \n        if\
    \ word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i]\
    \ == 'u' {\n            i -= 1\n            continue\n        }\n        \n  \
    \      if word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O'\
    \ || word[i] == 'U' {\n            i -= 1\n            continue\n        }\n \
    \       \n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            i -= 1\n            continue\n     \
    \   }\n        \n        if word[i] == 'A' || word[i] == 'E' || word[i] == 'I'\
    \ || word[i] == 'O' || word[i] == 'U' {\n            i -= 1\n            continue\n\
    \        }\n        \n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u' {\n            i -= 1\n            continue\n\
    \        }\n        \n        if word[i] == 'A' || word[i] == 'E' || word[i] ==\
    \ 'I' || word[i] == 'O' || word[i] == 'U' {\n            i -= 1\n            continue\n\
    \        }\n        \n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u' {\n            i -= 1\n            continue\n\
    \        }\n        \n        if word[i] == 'A' || word[i] == 'E' || word[i] ==\
    \ 'I' || word[i] == 'O' || word[i] == 'U' {\n            i -= 1\n            continue\n\
    \        }\n        \n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word", "    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen ",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n\
    \    for _, v := range vowels {\n        if strings.Contains(word, v) {\n    \
    \        vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    vowelsCount -= 2\n    if vowelsCount < 0 {\n        vowelsCount\
    \ = 0\n    }\n    vowelsCount += 2\n    if vowelsCount > len(vowels)-1 {\n   \
    \     vowelsCount = len(vowels) - 1\n    }\n    vowelsCount -= 2\n    if vowelsCount\
    \ < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount += 2\n    if vowelsCount\
    \ > len(vowels)-1 {\n        vowelsCount = len(vowels) - 1\n    }\n    vowelsCount\
    \ -= 2\n    if vowelsCount < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount\
    \ += 2\n    if vowelsCount > len(vowels)-1 {\n        vowelsCount = len(vowels)\
    \ - 1\n    }\n    vowelsCount -= 2\n    if vowelsCount < 0 {\n        vowelsCount\
    \ = 0\n    }\n    vowelsCount += 2\n    if vowelsCount > len(vowels)-1 {\n   \
    \     vowelsCount = len(vowels) - 1\n    }\n    vowelsCount -= 2\n    if vowelsCount\
    \ < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount += 2\n    if vowelsCount\
    \ > len(vowels)-1 {\n        vowelsCount = len(vowels) - 1\n    }\n    vowelsCount\
    \ -= 2\n    if vowelsCount < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount\
    \ += 2\n    if vowelsCount > len(vowels)-1 {\n        vowelsCount = len(vowels)\
    \ - 1\n    }\n    vowelsCount -= 2\n    if vowelsCount < 0 {\n        vowelsCount\
    \ = 0\n    }\n    vowelsCount += 2\n    if vowelsCount > len(vowels)-1 {\n   \
    \     vowelsCount = len(vowels) - 1\n    }\n    vowelsCount -= 2\n    if vowelsCount\
    \ < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount += 2\n    if vowelsCount\
    \ > len(vowels)-1 {\n        vowelsCount = len(vowels) - 1\n    }\n    vowelsCount\
    \ -= 2\n    if vowelsCount < 0 {\n        vowelsCount = 0\n    }\n    vowelsCount\
    \ += 2\n    if vowelsCount > len(vowels)-1 {\n        vowelsCount = len(vowels)\
    \ - 1\n    }\n    ", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    \n    lastConsonant := len(word) - 1\n    lastConsonantLen := len(word[lastConsonant])\n\
    \    lastConsonantLen -= 1\n    lastConsonantLen /= 2\n    lastConsonantLen +=\
    \ 2\n    \n    lastConsonantVowel := word[lastConsonant]\n    \n    if lastConsonantLen\
    \ > 0 {\n        lastConsonantVowel = word[lastConsonantLen - 1]\n    }\n    \n\
    \    if lastConsonantVowel == vowels[vowelsLen] {\n        return lastConsonantVowel\n\
    \    }\n    \n    if lastConsonantVowel == vowels[vowelsLen - 1] {\n        return\
    \ lastConsonantVowel\n    }\n    \n    if lastConsonantVowel == vowels[vowelsLen\
    \ - 2] {\n        return lastConsonantVowel\n    }\n    \n    if lastConsonantVowel\
    \ == vowels[vowelsLen - 3] {\n        return lastConsonantVowel\n    }\n    \n\
    \    if lastConsonantVowel == vowels[vowelsLen - 4] {\n        return lastConsonantVowel\n\
    \    }\n    \n    if lastConsonantVowel == vowels[vowelsLen - 5] {\n        return\
    \ lastConsonantVowel\n    }\n    \n    if lastConsonantVowel == vowels[vowelsLen\
    \ - 6] {\n        return lastConsonantVowel\n    }\n    \n    if lastConsonantVowel\
    \ == vowels[vowelsLen - 7] {\n        return lastConsonantVowel\n    }\n    \n\
    \    if lastConsonantVowel == vowels[vowelsLen - 8] {\n        return lastConsonantVowel\n\
    \    }\n    \n    if lastConsonantVowel == vowels[vowelsLen - 9] {\n        return\
    \ lastConsonantVowel\n    }\n    \n    if lastConsonantVowel == vowels[vowelsLen\
    \ - 10] {\n        return lastConsonantVowel\n    }\n    \n    if lastConsonantVowel\
    \ == vowels[vowelsLen - 11] {\n        return lastCon", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n\
    \    for _, v := range vowels {\n        if word == v {\n            return v\n\
    \        }\n    }\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i]\
    \ == word[i+1] {\n            if word[i] == \"a\" || word[i] == \"e\" || word[i]\
    \ == \"i\" || word[i] == \"o\" || word[i] == \"u\" {\n                return word[i]\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range\
    \ vowels {\n        if word == v {\n            vowelsCount++\n        }\n   \
    \ }\n    if vowelsCount == 0 {\n        return \"\"\n    }\n    vowelsCount -=\
    \ 1\n    vowelsCount /= 2\n    vowelsCount %= len(vowels)\n    vowelsCount /=\
    \ len(vowels)\n    vowelsCount %= len(vowels)\n    if vowelsCount == 0 {\n   \
    \     return \"\"\n    }\n    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowels)\n\
    \    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowels)\n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    vowelsCount /= len(vowels)\n    vowelsCount\
    \ %= len(vowels)\n    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowels)\n\
    \    if vowelsCount == 0 {\n        return \"\"\n    }\n    vowelsCount /= len(vowels)\n\
    \    vowelsCount %= len(vowels)\n    vowelsCount /= len(vowels)\n    vowelsCount\
    \ %= len(vowels)\n    if vowelsCount == 0 {\n        return \"\"\n    }\n    vowelsCount\
    \ /= len(vowels)\n    vowelsCount %= len(vowels)\n    vowelsCount /= len(vowels)\n\
    \    vowelsCount %= len(vowels)\n    if vowelsCount == 0 {\n        return \"\"\
    \n    }\n    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowels)\n    vowelsCount\
    \ /= len(vowels)\n    vowelsCount %= len(vowels)\n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    vowelsCount /= len(vowels)\n    vowelsCount %=\
    \ len(vowels)\n    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowels)\n\
    \    if vowelsCount == 0 {\n        return \"\"\n    }\n    vowelsCount /= len(vowels)\n\
    \    vowelsCount %= len(vowels)\n    vowelsCount /= len(vowels)\n    vowelsCount\
    \ %= len(vowels)\n    if vowelsCount == 0 {\n        return \"\"\n    }\n    vowelsCount\
    \ /= len(vowels)\n    vowelsCount %= len(vowels)\n    vowelsCount /= len(vowels)\n\
    \    vowelsCount %= len(vowels)\n    if vowelsCount == 0 {\n        return \"\"\
    \n    }\n    vowelsCount /= len(vowels)\n    vowelsCount %= len(vowel", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n\
    \    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen +=\
    \ 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen ", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n\
    \    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen +=\
    \ 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen ", "    vowel := []rune{'a', 'e', 'i', 'o', 'u'}\n    vowel_count\
    \ := 0\n    vowel_count += len(word) - len(word[:len(word)-1])\n    for _, v :=\
    \ range vowel {\n        if word[len(word)-1:] == v {\n            vowel_count++\n\
    \        }\n    }\n    if vowel_count == 0 {\n        return \"\"\n    }\n   \
    \ vowel_count -= len(word) - len(word[:len(word)-1])\n    if vowel_count > len(vowel)-1\
    \ {\n        return \"\"\n    }\n    vowel_count -= len(word) - len(word[:len(word)-1])\n\
    \    if vowel_count < 0 {\n        return \"\"\n    }\n    return vowel[len(vowel)-vowel_count]\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen\
    \ := len(vowels)\n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n\
    \    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen +=\
    \ 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen ", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n\
    \    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen /=\
    \ 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1", "    // Your\
    \ code here\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range vowels {\n        if strings.Contains(word, v) {\n\
    \            vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n    \
    \    return \"\"\n    }\n    vowelsCount -= 1\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 2\n    \n    vowel", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen ", "    // Your code here\n    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range vowels\
    \ {\n        if word == v {\n            vowelsCount++\n        }\n    }\n   \
    \ if vowelsCount > 0 {\n        return word\n    }\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u' {\n            return word[i]\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen /=\
    \ 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
