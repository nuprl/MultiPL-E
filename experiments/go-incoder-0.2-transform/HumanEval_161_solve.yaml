name: HumanEval_161_solve
language: go_test.go
prompt: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a string s.\n// if s[i] is a letter, reverse its case from lower to\
  \ upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
  \ no letters, reverse the string.\n// The function should return the resulted string.\n\
  // Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\
  \n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\n"
tests: "func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
  1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\"\
  \ },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
  \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
  #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"\
  #$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    result := \"\"\n    for _, v := range s {\n        if v >= 'a'\
    \ && v <= 'z' {\n            result += string(v)\n        } else if v >= 'A' &&\
    \ v <= 'Z' {\n            result += string(v)\n        } else {\n            result\
    \ += v\n        }\n    }\n    return result\n}\n", "    result := \"\"\n    for\
    \ _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string([]rune(char)[26-int(char-'a')])\n        } else {\n            result\
    \ += string([]rune(char)[26-int(char)])\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, v := range s {\n        if v >= 'a' && v\
    \ <= 'z' {\n            result += string(v - 'a' + 'A')\n        } else {\n  \
    \          result += v\n        }\n    }\n    return result\n}\n", "    result\
    \ := \"\"\n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n    \
    \        result += string(v)\n        } else {\n            result += string(v)\
    \ + string(unicode.ToUpper(v))\n        }\n    }\n    return result\n}\n", " \
    \   result := \"\"\n    for _, v := range s {\n        if v >= 'a' && v <= 'z'\
    \ {\n            result += string(v)\n        } else {\n            result +=\
    \ string(unicode.ToLower(v))\n        }\n    }\n    return result\n}\n", "   \
    \ result := \"\"\n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n\
    \            result += string(v - 'a' + 'A')\n        } else {\n            result\
    \ += v\n        }\n    }\n    return result\n}\n", "    result := \"\"\n    for\
    \ _, letter := range s {\n        if letter == 'a' || letter == 'A' {\n      \
    \      result = result + string([]rune(letter)...)\n        } else {\n       \
    \     result = result + string([]rune(letter)...)\n        }\n    }\n    return\
    \ result\n}\n", "    result := \"\"\n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'A' {\n            result += string([]rune(letter)...)\n\
    \        } else {\n            result += string([]rune(letter)...)\n        }\n\
    \    }\n    return result\n}\n", "    result := \"\"\n    for _, v := range s\
    \ {\n        if v >= 'a' && v <= 'z' {\n            result += string(v)\n    \
    \    } else {\n            result += string(v+32)\n        }\n    }\n    return\
    \ result\n}\n", "    result := \"\"\n    for _, v := range s {\n        if v >=\
    \ 'a' && v <= 'z' {\n            result += string(v)\n        } else {\n     \
    \       result += string(v + 32)\n        }\n    }\n    return result\n}\n", " \
    \   result := \"\"\n    for _, char := range s {\n        if char >= 'a' && char\
    \ <= 'z' {\n            result += string([]rune(char)[26-int(char)-97])\n    \
    \    } else {\n            result += string([]rune(char)[26-int(char)])\n    \
    \    }\n    }\n    return result\n}\n", "    result := \"\"\n    for _, char :=\
    \ range s {\n        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char)[26-int(char)-65])\n\
    \        } else {\n            result += string([]rune(char)[26-int(char)])\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    for _,\
    \ v := range s {\n        if v >= 'a' && v <= 'z' {\n            result = result\
    \ + string(v - 'a' + 1)\n        } else if v >= 'A' && v <= 'Z' {\n          \
    \  result = result + string(v - 'A' + 1)\n        } else {\n            result\
    \ = result + v\n        }\n    }\n    return result\n}\n", "    result := \"\"\
    \n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            result\
    \ += string(v - 'a')\n        } else if v >= 'A' && v <= 'Z' {\n            result\
    \ += string(v - 'A') + string(v - 'a')\n        } else {\n            result +=\
    \ v\n        }\n    }\n    return result\n}\n", "    result := \"\"\n    for _,\
    \ char := range s {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string([]byte{char - 'a' + 'A'})\n        } else if char >= 'A' && char <=\
    \ 'Z' {\n            result += string([]byte{char - 'A' + 'a'})\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n", " \
    \   result := \"\"\n    for _, letter := range s {\n        if letter == 'a' ||\
    \ letter == 'A' {\n            result += string([]rune(letter)...)\n        }\
    \ else {\n            result += string([]rune(letter)...)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    for _, v := range s {\n\
    \        if v >= 'a' && v <= 'z' {\n            result += string(v - 'a' + 'A')\n\
    \        } else {\n            result += v\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range s {\n        if char >= 'a'\
    \ && char <= 'z' {\n            result += string([]byte{char - 'a', char - 'A'})\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n", "    result := \"\"\n    for _, char := range s {\n        if char >= 'a'\
    \ && char <= 'z' {\n            result += string([]rune(char)[26-int(char)-97])\n\
    \        } else {\n            result += string([]rune(char)[26-int(char)])\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    for _,\
    \ char := range s {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string([]rune(char)[26-int(char)-97])\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
