name: HumanEval_43_pairs_sum_to_zero
language: go_test.go
prompt: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns True\
  \ if there are two distinct elements in the list that\n// sum to zero, and False\
  \ otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
  \ 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n\
  // >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n\
  // false\nfunc pairs_sum_to_zero(l []int) bool {\n"
tests: "func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
  \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
  \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
  \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
  \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n    \
  \ { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(l) == 0 {\n        return false\n    }\n    sum := 0\n \
    \   for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n      \
    \  return false\n    }\n    i := 0\n    for _, v := range l {\n        if v !=\
    \ 0 {\n            i += v\n        }\n    }\n    return i == len(l)\n}\n", " \
    \   if len(l) == 0 {\n        return false\n    }\n    s := 0\n    for _, v :=\
    \ range l {\n        s += v\n    }\n    return s == 0\n}\n", "    if len(l) ==\
    \ 0 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n   \
    \ i := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n\
    \        }\n    }\n    if i == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n  \
    \  if i == 0 {\n        return false\n    }\n    return true\n}\n", "    if len(l)\
    \ == 0 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n", "    if len(l) == 0 {\n        return false\n    }\n    sum := 0\n\
    \    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n     \
    \   return false\n    }\n    i := 0\n    for _, v := range l {\n        if v !=\
    \ 0 {\n            i += v\n        }\n    }\n    return i == len(l)\n}\n", " \
    \   if len(l) == 0 {\n        return false\n    }\n    s := 0\n    for _, v :=\
    \ range l {\n        s += v\n    }\n    if s == 0 {\n        return false\n  \
    \  }\n    for _, v := range l {\n        if v != 0 {\n            s -= v\n   \
    \         if s == 0 {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n   \
    \ if sum == 0 {\n        return false\n    }\n    sort.Ints(l)\n    i := 0\n \
    \   for _, v := range l {\n        if v != l[i-1] {\n            return false\n\
    \        }\n        i++\n    }\n    return true\n}\n", "    if len(l) < 2 {\n\
    \        return false\n    }\n    sum := 0\n    for _, v := range l {\n      \
    \  sum += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n\
    \    for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n", "    if len(l) < 2 {\n        return false\n\
    \    }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n   \
    \ return sum == 0 && len(l) == 2 || sum != 0 && len(l) == 3\n}\n", "    if len(l)\
    \ < 2 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n \
    \           return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n", "    if len(l) == 0 {\n        return false\n    }\n    sum := 0\n    for\
    \ _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if sum-v != 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n", "    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    if i == 0 {\n        return false\n    }\n    return true\n\
    }\n", "    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n\
    \        return true\n    }\n    sum := 0\n    for _, v := range l {\n       \
    \ sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    l := append(l, 0)\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    if sum == 0 {\n        return false\n\
    \    }\n    l := make([]int, len(l))\n    copy(l, l)\n    l := append(l, 0)\n\
    \    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum\
    \ == 0 {\n        return true\n    }\n    return false\n}\n", "    if len(l) ==\
    \ 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n\
    \    }\n    i := 0\n    j := len(l) - 1\n    sum := 0\n    for i < j {\n     \
    \   sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        } else {\n            j--\n        }\n\
    \    }\n    return sum == 0\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n   \
    \ if sum == 0 {\n        return false\n    }\n    l := make([]int, len(l))\n \
    \   for i, v := range l {\n        l[i] = v\n    }\n    sort.Sort(l)\n    sum\
    \ := 0\n    for _, v := range l {\n        sum += v\n        if sum == 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n", "    if len(l)\
    \ == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n\
    \    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n    if s\
    \ == 0 {\n        return false\n    }\n    t := 0\n    for _, v := range l {\n\
    \        t += v\n    }\n    if t == 0 {\n        return true\n    }\n    if s\
    \ == t {\n        return false\n    }\n    return true\n}\n", "    if len(l) ==\
    \ 0 {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n  \
    \      s += v\n    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n\
    \    for _, v := range l {\n        t += v\n        if t > 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(l) == 0 {\n    \
    \    return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n    if s\
    \ == 0 {\n        return false\n    }\n    for _, v := range l {\n        if v\
    \ != 0 {\n            s -= v\n            if s == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n", "    if len(l)\
    \ == 0 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n    return sum == 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
