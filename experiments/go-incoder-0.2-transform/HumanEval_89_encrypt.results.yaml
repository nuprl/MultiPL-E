language: go_test.go
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, char := range s {\n        result += alphabet[(alphabet.Index(char)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkeq7d7i8_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(char)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpkeq7d7i8_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(alphabet[alphabet.Index(letter)%len(alphabet)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez4udtju_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem9m4myo_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptztpocu5_test.go:55:17: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    rotated := \"\"\n    for _, letter := range s {\n        rotated += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return rotated\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrs__cta_test.go:25:9: invalid operation: rotated += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpdrs__cta_test.go:25:39: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(alphabet[alphabet.Len()%len(alphabet)])\
    \ + letter\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpht0ni5d__test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    rotated := \"\"\n    for _, letter := range s {\n        rotated += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return rotated\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrs__cta_test.go:25:9: invalid operation: rotated += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpdrs__cta_test.go:25:39: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[alphabet.Index(letter)%len(alphabet)]\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8_nbvf_test.go:25:37: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(alphabet[alphabet.FindIndex(letter)+1])\
    \ + string(alphabet[alphabet.FindIndex(letter)-1])\n    }\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrzf1t45_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    \nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj8z7o7__test.go:53:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    rotated := \"\"\n    for _, letter := range s {\n        rotated += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return rotated\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrs__cta_test.go:25:9: invalid operation: rotated += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpdrs__cta_test.go:25:39: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[alphabet.Index(letter)%len(alphabet)]\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8_nbvf_test.go:25:37: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(rotate(letter))\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp313mmgq7_test.go:24:26: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(rotate(letter))\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp313mmgq7_test.go:24:26: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[alphabet.Index(letter)%len(alphabet)]\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8_nbvf_test.go:25:37: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-_=+[]{}\\\\|;:'\\\",.<>/?\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprfj5fpb5_test.go:54:17: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    \nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj8z7o7__test.go:53:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    s := make([]string, len(s))\n    for i, c := range\
    \ s {\n        s[i] = alphabet[(alphabet.Index(c) + 2) % len(alphabet)]\n    }\n\
    \    return string(s)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ajm46bq_test.go:23:7: no new variables on left side of :=

    /tmp/tmp1ajm46bq_test.go:23:10: cannot use make([]string, len(s)) (value of type
    []string) as type string in assignment

    /tmp/tmp1ajm46bq_test.go:25:9: cannot assign to s[i] (value of type byte)

    /tmp/tmp1ajm46bq_test.go:25:35: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[alphabet.Index(letter)%len(alphabet)]\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8_nbvf_test.go:25:37: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, char := range s {\n        result += alphabet[(alphabet.Index(char)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkeq7d7i8_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(char)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpkeq7d7i8_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n  \
    \  alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n\
    \    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n   \
    \ alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n\
    \    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n   \
    \ alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n\
    \    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n   \
    \ alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n\
    \    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n   \
    \ alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n\
    \    alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n   \
    \ alphabet = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet\
    \ = alphabet[0:len(alphabet)-2] + alphabet[len(alphabet)-1:]\n    alphabet = alphabet[0:len(alphabet)-2]\
    \ + alphabet[len(alphabet)-1:]\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwbh6ixx6_test.go:53:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, char := range s {\n        result += string(alphabet[alphabet.index(char)\
    \ + 2])\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcwkdwcs_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    \nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj8z7o7__test.go:53:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    s := []rune(s)\n    result := \"\"\n    for _,\
    \ r := range s {\n        result += alphabet[(alphabet.Index(r) + 2) % len(alphabet)]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw__ij0c2_test.go:23:7: no new variables on left side of :=

    /tmp/tmpw__ij0c2_test.go:23:10: cannot use []rune(s) (value of type []rune) as
    type string in assignment

    /tmp/tmpw__ij0c2_test.go:26:38: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    s := s + alphabet[alphabet.Len()-1]\n    alphabet := alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphabet += alphabet[:alphabet.Len()-1]\n\
    \    alphabet += alphabet[:alphabet.Len()-1]\n    alphab\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4m_tyg0h_test.go:65:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    alphabet += \"0123456789\"\n    alphabet += \"!@#$%^&*()\"\n    alphabet\
    \ += \"~`-=_+[]{}\\\\|;:'\\\",./<>?\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptztpocu5_test.go:55:17: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\n    \nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj8z7o7__test.go:53:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=+[]{}<>?:\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n\n    s := make([]rune, len(s))\n    for i, r := range s\
    \ {\n        s[i] = alphabet[r]\n    }\n\n    result := \"\"\n    for _, r :=\
    \ range s {\n        result += string(r)\n    }\n\n    return result\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiizuss2_test.go:29:7: no new variables on left side of :=

    /tmp/tmpfiizuss2_test.go:29:10: cannot use make([]rune, len(s)) (value of type
    []rune) as type string in assignment

    /tmp/tmpfiizuss2_test.go:31:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"1234567890\"\
    \n    alphabet += \"~!@#$%^&*()_+{}[]\\\\|;:'\\\",<.>/?\"\n\n    s := s\n    n\
    \ := len(s)\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result\
    \ += alphabet[((alphabet.IndexOf(s[i]) + 2) % 26)]\n    }\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcivq5a7i_test.go:27:7: no new variables on left side of :=

    /tmp/tmpcivq5a7i_test.go:31:9: invalid operation: result += alphabet[((alphabet.IndexOf(s[i])
    + 2) % 26)] (mismatched types string and byte)

    /tmp/tmpcivq5a7i_test.go:31:39: alphabet.IndexOf undefined (type string has no
    field or method IndexOf)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet[2:len(alphabet)-2]\n\
    \    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3c9zgzci_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[(alphabet.Index(letter) + 2) % len(alphabet)]\n  \
    \  }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjrtt1_f_test.go:25:38: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[(alphabet.Index(letter) + 2) % len(alphabet)]\n  \
    \  }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjrtt1_f_test.go:25:38: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(rotate(letter))\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp313mmgq7_test.go:24:26: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(alphabet[alphabet.Index(letter)%len(alphabet)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez4udtju_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"!@#$%^&*()\"\n    alphabet += \"~`-=_+[]{}<>?:\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\\
    |/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n\
    \    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\\
    |/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n\
    \    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\\
    |/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n\
    \    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\\
    |/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n\
    \    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\\
    |/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n\
    \    alphabet += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?.,;'\"\n    alphabet\
    \ += \"\\\\|/?.,;'\"\n    alphabet += \"\\\\|/?\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqqitwg98_test.go:63:17: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    rotated := \"\"\n    for _, c := range s {\n        rotated += alphabet[(alphabet.Index(c)\
    \ + 2) % len(alphabet)]\n    }\n    return rotated\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv84j586e_test.go:25:9: invalid operation: rotated += alphabet[(alphabet.Index(c)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpv84j586e_test.go:25:39: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet += \"0123456789\"\
    \n    alphabet += \"~!@#$%^&*()_+{}[]\\\\|;:'\\\",.<>/?~`\"\n\n    s := []rune(s)\n\
    \    result := \"\"\n    for _, r := range s {\n        result += alphabet[alphabet.Index(r)]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpujrxk7kg_test.go:27:7: no new variables on left side of :=

    /tmp/tmpujrxk7kg_test.go:27:10: cannot use []rune(s) (value of type []rune) as
    type string in assignment

    /tmp/tmpujrxk7kg_test.go:30:9: invalid operation: result += alphabet[alphabet.Index(r)]
    (mismatched types string and byte)

    /tmp/tmpujrxk7kg_test.go:30:37: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, letter := range s {\n\
    \        result += alphabet[(alphabet.Index(letter) + 2) % len(alphabet)]\n  \
    \  }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjrtt1_f_test.go:25:38: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string(rotate(letter))\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp313mmgq7_test.go:24:26: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, char := range s {\n        result += alphabet[(alphabet.Index(char)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkeq7d7i8_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(char)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpkeq7d7i8_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    rotated := []string{}\n    for _, letter := range\
    \ alphabet {\n        rotated = append(rotated, letter)\n    }\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-1] = rotated[len(rotated)-2]\n    rotated[len(rotated)-2]\
    \ = rotated[len(rotated)-1]\n    rotated[len(rotated)-1] = rotated[len(rotated)-2]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    \    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n    rotated[len(rotated)-1]\
    \ = rotated[len(rotated)-2]\n    rotated[len(rotated)-2] = rotated[len(rotated)-1]\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq1_2pdf2_test.go:56:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[:len(alphabet)-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[:len(alphabet)-1]\n\
    \    alphabet = alphabet[2:]\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp572bq8af_test.go:82:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, char := range s {\n        result += string(alphabet[alphabet.FindIndex(char)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk92ex5g0_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet, alphabet...)\n    alphabet = append(alphabet,\
    \ alphabet...)\n    alphabet = append(alphabet\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtbl_y44_test.go:77:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n    \nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5a4o9aey_test.go:73:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, letter := range s {\n        result += alphabet[(alphabet.Index(letter)\
    \ + 2) % len(alphabet)]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sm4fp12_test.go:25:9: invalid operation: result += alphabet[(alphabet.Index(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp6sm4fp12_test.go:25:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet\
    \ = alphabet[:len(alphabet)-1] + alphabet[1:len(alphabet)]\n    alphabet = alphabet[:len(alphabet)-1]\
    \ + alphabet[1:len(alphabet\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi49n_p3h_test.go:53:68: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
