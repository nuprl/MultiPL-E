language: go_test.go
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhvpq2v6_test.go:21:30: undefined: None

    /tmp/tmplhvpq2v6_test.go:43:76: undefined: None

    /tmp/tmplhvpq2v6_test.go:44:79: undefined: None

    /tmp/tmplhvpq2v6_test.go:48:60: undefined: None

    /tmp/tmplhvpq2v6_test.go:49:61: undefined: None

    /tmp/tmplhvpq2v6_test.go:50:78: undefined: None

    /tmp/tmplhvpq2v6_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8cg5cnw_test.go:23:23: undefined: maxInt

    /tmp/tmpd8cg5cnw_test.go:25:24: undefined: minInt

    /tmp/tmpd8cg5cnw_test.go:41:76: undefined: None

    /tmp/tmpd8cg5cnw_test.go:42:79: undefined: None

    /tmp/tmpd8cg5cnw_test.go:46:60: undefined: None

    /tmp/tmpd8cg5cnw_test.go:47:61: undefined: None

    /tmp/tmpd8cg5cnw_test.go:48:78: undefined: None

    /tmp/tmpd8cg5cnw_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = largest * -1\n        } else {\n            smallest = smallest\
    \ + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if smallest > largest {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3r9tl1sz_test.go:44:76: undefined: None

    /tmp/tmp3r9tl1sz_test.go:45:79: undefined: None

    /tmp/tmp3r9tl1sz_test.go:49:60: undefined: None

    /tmp/tmp3r9tl1sz_test.go:50:61: undefined: None

    /tmp/tmp3r9tl1sz_test.go:51:78: undefined: None

    /tmp/tmp3r9tl1sz_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    max := lst[0]\n\
    \    min := lst[0]\n    for _, v := range lst {\n        if v > max {\n      \
    \      max = v\n        }\n        if v < min {\n            min = v\n       \
    \ }\n    }\n    return []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf75bkt13_test.go:21:30: undefined: None

    /tmp/tmpf75bkt13_test.go:43:76: undefined: None

    /tmp/tmpf75bkt13_test.go:44:79: undefined: None

    /tmp/tmpf75bkt13_test.go:48:60: undefined: None

    /tmp/tmpf75bkt13_test.go:49:61: undefined: None

    /tmp/tmpf75bkt13_test.go:50:78: undefined: None

    /tmp/tmpf75bkt13_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8cg5cnw_test.go:23:23: undefined: maxInt

    /tmp/tmpd8cg5cnw_test.go:25:24: undefined: minInt

    /tmp/tmpd8cg5cnw_test.go:41:76: undefined: None

    /tmp/tmpd8cg5cnw_test.go:42:79: undefined: None

    /tmp/tmpd8cg5cnw_test.go:46:60: undefined: None

    /tmp/tmpd8cg5cnw_test.go:47:61: undefined: None

    /tmp/tmpd8cg5cnw_test.go:48:78: undefined: None

    /tmp/tmpd8cg5cnw_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := None\n    smallestInt := None\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if smallestInt == None {\n                smallestInt = v\n\
    \            } else {\n                smallestInt = min(smallestInt, v)\n   \
    \         }\n        } else {\n            if largestInt == None {\n         \
    \       largestInt = v\n            } else {\n                largestInt = max(largestInt,\
    \ v)\n            }\n        }\n    }\n    if smallestInt == None {\n        return\
    \ nil\n    }\n    if largestInt == None {\n        return smallestInt\n    }\n\
    \    return []interface{}{smallestInt, largestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4i5lfw8_test.go:20:19: undefined: None

    /tmp/tmpk4i5lfw8_test.go:21:20: undefined: None

    /tmp/tmpk4i5lfw8_test.go:24:31: undefined: None

    /tmp/tmpk4i5lfw8_test.go:27:31: undefined: min

    /tmp/tmpk4i5lfw8_test.go:30:30: undefined: None

    /tmp/tmpk4i5lfw8_test.go:33:30: undefined: max

    /tmp/tmpk4i5lfw8_test.go:37:23: undefined: None

    /tmp/tmpk4i5lfw8_test.go:40:22: undefined: None

    /tmp/tmpk4i5lfw8_test.go:53:76: undefined: None

    /tmp/tmpk4i5lfw8_test.go:54:79: undefined: None

    /tmp/tmpk4i5lfw8_test.go:54:79: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    result\
    \ := make([]interface{}, 0, len(lst))\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            result = append(result, None)\n        } else {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnm80v79d_test.go:23:37: undefined: None

    /tmp/tmpnm80v79d_test.go:38:76: undefined: None

    /tmp/tmpnm80v79d_test.go:39:79: undefined: None

    /tmp/tmpnm80v79d_test.go:43:60: undefined: None

    /tmp/tmpnm80v79d_test.go:44:61: undefined: None

    /tmp/tmpnm80v79d_test.go:45:78: undefined: None

    /tmp/tmpnm80v79d_test.go:46:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = largest * -1\n        } else {\n            smallest = smallest\
    \ + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21bwjg2a_test.go:41:76: undefined: None

    /tmp/tmp21bwjg2a_test.go:42:79: undefined: None

    /tmp/tmp21bwjg2a_test.go:46:60: undefined: None

    /tmp/tmp21bwjg2a_test.go:47:61: undefined: None

    /tmp/tmp21bwjg2a_test.go:48:78: undefined: None

    /tmp/tmp21bwjg2a_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        smallest = largest\n\
    \    }\n    if largest == None {\n        largest = smallest\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2q9cjf_z_test.go:20:17: undefined: None

    /tmp/tmp2q9cjf_z_test.go:21:16: undefined: None

    /tmp/tmp2q9cjf_z_test.go:24:28: undefined: None

    /tmp/tmp2q9cjf_z_test.go:31:27: undefined: None

    /tmp/tmp2q9cjf_z_test.go:43:20: undefined: None

    /tmp/tmp2q9cjf_z_test.go:46:19: undefined: None

    /tmp/tmp2q9cjf_z_test.go:59:76: undefined: None

    /tmp/tmp2q9cjf_z_test.go:60:79: undefined: None

    /tmp/tmp2q9cjf_z_test.go:64:60: undefined: None

    /tmp/tmp2q9cjf_z_test.go:65:61: undefined: None

    /tmp/tmp2q9cjf_z_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia45y4w8_test.go:44:76: undefined: None

    /tmp/tmpia45y4w8_test.go:45:79: undefined: None

    /tmp/tmpia45y4w8_test.go:49:60: undefined: None

    /tmp/tmpia45y4w8_test.go:50:61: undefined: None

    /tmp/tmpia45y4w8_test.go:51:78: undefined: None

    /tmp/tmpia45y4w8_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest\n        } else {\n            smallest\
    \ = v // smallest is smallest\n        }\n    }\n    if smallest == 0 {\n    \
    \    return nil\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsimudayi_test.go:41:76: undefined: None

    /tmp/tmpsimudayi_test.go:42:79: undefined: None

    /tmp/tmpsimudayi_test.go:46:60: undefined: None

    /tmp/tmpsimudayi_test.go:47:61: undefined: None

    /tmp/tmpsimudayi_test.go:48:78: undefined: None

    /tmp/tmpsimudayi_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyojhh45_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmplyojhh45_test.go:35:56: cannot use largest (variable of type []int) as
    type []interface{} in argument to append

    /tmp/tmplyojhh45_test.go:45:76: undefined: None

    /tmp/tmplyojhh45_test.go:46:79: undefined: None

    /tmp/tmplyojhh45_test.go:50:60: undefined: None

    /tmp/tmplyojhh45_test.go:51:61: undefined: None

    /tmp/tmplyojhh45_test.go:52:78: undefined: None

    /tmp/tmplyojhh45_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xwzkra_test.go:41:76: undefined: None

    /tmp/tmp93xwzkra_test.go:42:79: undefined: None

    /tmp/tmp93xwzkra_test.go:46:60: undefined: None

    /tmp/tmp93xwzkra_test.go:47:61: undefined: None

    /tmp/tmp93xwzkra_test.go:48:78: undefined: None

    /tmp/tmp93xwzkra_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None && largest == None\
    \ {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rfn5n_p_test.go:20:17: undefined: None

    /tmp/tmp2rfn5n_p_test.go:21:16: undefined: None

    /tmp/tmp2rfn5n_p_test.go:30:20: undefined: None

    /tmp/tmp2rfn5n_p_test.go:43:76: undefined: None

    /tmp/tmp2rfn5n_p_test.go:44:79: undefined: None

    /tmp/tmp2rfn5n_p_test.go:48:60: undefined: None

    /tmp/tmp2rfn5n_p_test.go:49:61: undefined: None

    /tmp/tmp2rfn5n_p_test.go:50:78: undefined: None

    /tmp/tmp2rfn5n_p_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphnrh3v_test.go:41:76: undefined: None

    /tmp/tmpyphnrh3v_test.go:42:79: undefined: None

    /tmp/tmpyphnrh3v_test.go:46:60: undefined: None

    /tmp/tmpyphnrh3v_test.go:47:61: undefined: None

    /tmp/tmpyphnrh3v_test.go:48:78: undefined: None

    /tmp/tmpyphnrh3v_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    result\
    \ := make([]interface{}, 0, len(lst))\n    largest, smallest := 0, math.MaxInt64\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    if smallest < 0 {\n        result = []interface{}{smallest, None}\n\
    \    } else {\n        result = []interface{}{largest, None}\n    }\n    return\
    \ result\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcznj0cx_test.go:21:29: undefined: math

    /tmp/tmprcznj0cx_test.go:31:42: undefined: None

    /tmp/tmprcznj0cx_test.go:33:41: undefined: None

    /tmp/tmprcznj0cx_test.go:45:76: undefined: None

    /tmp/tmprcznj0cx_test.go:46:79: undefined: None

    /tmp/tmprcznj0cx_test.go:50:60: undefined: None

    /tmp/tmprcznj0cx_test.go:51:61: undefined: None

    /tmp/tmprcznj0cx_test.go:52:78: undefined: None

    /tmp/tmprcznj0cx_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None && largest == None\
    \ {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rfn5n_p_test.go:20:17: undefined: None

    /tmp/tmp2rfn5n_p_test.go:21:16: undefined: None

    /tmp/tmp2rfn5n_p_test.go:30:20: undefined: None

    /tmp/tmp2rfn5n_p_test.go:43:76: undefined: None

    /tmp/tmp2rfn5n_p_test.go:44:79: undefined: None

    /tmp/tmp2rfn5n_p_test.go:48:60: undefined: None

    /tmp/tmp2rfn5n_p_test.go:49:61: undefined: None

    /tmp/tmp2rfn5n_p_test.go:50:78: undefined: None

    /tmp/tmp2rfn5n_p_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhvpq2v6_test.go:21:30: undefined: None

    /tmp/tmplhvpq2v6_test.go:43:76: undefined: None

    /tmp/tmplhvpq2v6_test.go:44:79: undefined: None

    /tmp/tmplhvpq2v6_test.go:48:60: undefined: None

    /tmp/tmplhvpq2v6_test.go:49:61: undefined: None

    /tmp/tmplhvpq2v6_test.go:50:78: undefined: None

    /tmp/tmplhvpq2v6_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // Keep track of the largest negative integer.\n        } else\
    \ {\n            smallest = v // Keep track of the smallest positive integer.\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2sz7bv8_test.go:41:76: undefined: None

    /tmp/tmpv2sz7bv8_test.go:42:79: undefined: None

    /tmp/tmpv2sz7bv8_test.go:46:60: undefined: None

    /tmp/tmpv2sz7bv8_test.go:47:61: undefined: None

    /tmp/tmpv2sz7bv8_test.go:48:78: undefined: None

    /tmp/tmpv2sz7bv8_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ne_mur_test.go:42:76: undefined: None

    /tmp/tmp07ne_mur_test.go:43:79: undefined: None

    /tmp/tmp07ne_mur_test.go:47:60: undefined: None

    /tmp/tmp07ne_mur_test.go:48:61: undefined: None

    /tmp/tmp07ne_mur_test.go:49:78: undefined: None

    /tmp/tmp07ne_mur_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := -1, -1\n    for _, v := range lst {\n        if v > largest {\n\
    \            largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == -1 {\n        return nil\n    }\n \
    \   if smallest == -1 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8temr250_test.go:45:76: undefined: None

    /tmp/tmp8temr250_test.go:46:79: undefined: None

    /tmp/tmp8temr250_test.go:50:60: undefined: None

    /tmp/tmp8temr250_test.go:51:61: undefined: None

    /tmp/tmp8temr250_test.go:52:78: undefined: None

    /tmp/tmp8temr250_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest\n        } else {\n           \
    \ smallest = v // smallest is now the smallest\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoiet8j1s_test.go:41:76: undefined: None

    /tmp/tmpoiet8j1s_test.go:42:79: undefined: None

    /tmp/tmpoiet8j1s_test.go:46:60: undefined: None

    /tmp/tmpoiet8j1s_test.go:47:61: undefined: None

    /tmp/tmpoiet8j1s_test.go:48:78: undefined: None

    /tmp/tmpoiet8j1s_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbg50ew9t_test.go:20:17: undefined: None

    /tmp/tmpbg50ew9t_test.go:21:16: undefined: None

    /tmp/tmpbg50ew9t_test.go:24:28: undefined: None

    /tmp/tmpbg50ew9t_test.go:31:27: undefined: None

    /tmp/tmpbg50ew9t_test.go:43:20: undefined: None

    /tmp/tmpbg50ew9t_test.go:46:19: undefined: None

    /tmp/tmpbg50ew9t_test.go:59:76: undefined: None

    /tmp/tmpbg50ew9t_test.go:60:79: undefined: None

    /tmp/tmpbg50ew9t_test.go:64:60: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_s_lpd1_test.go:41:76: undefined: None

    /tmp/tmpw_s_lpd1_test.go:42:79: undefined: None

    /tmp/tmpw_s_lpd1_test.go:46:60: undefined: None

    /tmp/tmpw_s_lpd1_test.go:47:61: undefined: None

    /tmp/tmpw_s_lpd1_test.go:48:78: undefined: None

    /tmp/tmpw_s_lpd1_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    max := lst[0]\n    min := lst[0]\n  \
    \  for _, v := range lst {\n        if v > max {\n            max = v\n      \
    \  }\n        if v < min {\n            min = v\n        }\n    }\n    return\
    \ []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlyzkpxq_test.go:43:76: undefined: None

    /tmp/tmpvlyzkpxq_test.go:44:79: undefined: None

    /tmp/tmpvlyzkpxq_test.go:48:60: undefined: None

    /tmp/tmpvlyzkpxq_test.go:49:61: undefined: None

    /tmp/tmpvlyzkpxq_test.go:50:78: undefined: None

    /tmp/tmpvlyzkpxq_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyojhh45_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmplyojhh45_test.go:35:56: cannot use largest (variable of type []int) as
    type []interface{} in argument to append

    /tmp/tmplyojhh45_test.go:45:76: undefined: None

    /tmp/tmplyojhh45_test.go:46:79: undefined: None

    /tmp/tmplyojhh45_test.go:50:60: undefined: None

    /tmp/tmplyojhh45_test.go:51:61: undefined: None

    /tmp/tmplyojhh45_test.go:52:78: undefined: None

    /tmp/tmplyojhh45_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2gb_bs2_test.go:45:76: undefined: None

    /tmp/tmpf2gb_bs2_test.go:46:79: undefined: None

    /tmp/tmpf2gb_bs2_test.go:50:60: undefined: None

    /tmp/tmpf2gb_bs2_test.go:51:61: undefined: None

    /tmp/tmpf2gb_bs2_test.go:52:78: undefined: None

    /tmp/tmpf2gb_bs2_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_s_lpd1_test.go:41:76: undefined: None

    /tmp/tmpw_s_lpd1_test.go:42:79: undefined: None

    /tmp/tmpw_s_lpd1_test.go:46:60: undefined: None

    /tmp/tmpw_s_lpd1_test.go:47:61: undefined: None

    /tmp/tmpw_s_lpd1_test.go:48:78: undefined: None

    /tmp/tmpw_s_lpd1_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        smallest = nil\n\
    \    }\n    if largest == None {\n        largest = nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwq4wm_w_test.go:20:17: undefined: None

    /tmp/tmpzwq4wm_w_test.go:21:16: undefined: None

    /tmp/tmpzwq4wm_w_test.go:24:28: undefined: None

    /tmp/tmpzwq4wm_w_test.go:31:27: undefined: None

    /tmp/tmpzwq4wm_w_test.go:43:20: undefined: None

    /tmp/tmpzwq4wm_w_test.go:46:19: undefined: None

    /tmp/tmpzwq4wm_w_test.go:59:76: undefined: None

    /tmp/tmpzwq4wm_w_test.go:60:79: undefined: None

    /tmp/tmpzwq4wm_w_test.go:64:60: undefined: None

    /tmp/tmpzwq4wm_w_test.go:65:61: undefined: None

    /tmp/tmpzwq4wm_w_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = largest * 10 + v\n        } else {\n            smallest = smallest\
    \ * 10 + v\n        }\n    }\n    if smallest == 0 {\n        return nil\n   \
    \ }\n    if largest < 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kllg6md_test.go:44:76: undefined: None

    /tmp/tmp2kllg6md_test.go:45:79: undefined: None

    /tmp/tmp2kllg6md_test.go:49:60: undefined: None

    /tmp/tmp2kllg6md_test.go:50:61: undefined: None

    /tmp/tmp2kllg6md_test.go:51:78: undefined: None

    /tmp/tmp2kllg6md_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ || largest == nil {\n        return nil\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmnv4kg_z_test.go:42:76: undefined: None

    /tmp/tmpmnv4kg_z_test.go:43:79: undefined: None

    /tmp/tmpmnv4kg_z_test.go:47:60: undefined: None

    /tmp/tmpmnv4kg_z_test.go:48:61: undefined: None

    /tmp/tmpmnv4kg_z_test.go:49:78: undefined: None

    /tmp/tmpmnv4kg_z_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbg50ew9t_test.go:20:17: undefined: None

    /tmp/tmpbg50ew9t_test.go:21:16: undefined: None

    /tmp/tmpbg50ew9t_test.go:24:28: undefined: None

    /tmp/tmpbg50ew9t_test.go:31:27: undefined: None

    /tmp/tmpbg50ew9t_test.go:43:20: undefined: None

    /tmp/tmpbg50ew9t_test.go:46:19: undefined: None

    /tmp/tmpbg50ew9t_test.go:59:76: undefined: None

    /tmp/tmpbg50ew9t_test.go:60:79: undefined: None

    /tmp/tmpbg50ew9t_test.go:64:60: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := None\n    smallestInt := None\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if smallestInt == None {\n                smallestInt = v\n\
    \            } else {\n                smallestInt = min(smallestInt, v)\n   \
    \         }\n        } else {\n            if largestInt == None {\n         \
    \       largestInt = v\n            } else {\n                largestInt = max(largestInt,\
    \ v)\n            }\n        }\n    }\n    if smallestInt == None {\n        return\
    \ nil\n    }\n    if largestInt == None {\n        return smallestInt\n    }\n\
    \    return []interface{}{smallestInt, largestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4i5lfw8_test.go:20:19: undefined: None

    /tmp/tmpk4i5lfw8_test.go:21:20: undefined: None

    /tmp/tmpk4i5lfw8_test.go:24:31: undefined: None

    /tmp/tmpk4i5lfw8_test.go:27:31: undefined: min

    /tmp/tmpk4i5lfw8_test.go:30:30: undefined: None

    /tmp/tmpk4i5lfw8_test.go:33:30: undefined: max

    /tmp/tmpk4i5lfw8_test.go:37:23: undefined: None

    /tmp/tmpk4i5lfw8_test.go:40:22: undefined: None

    /tmp/tmpk4i5lfw8_test.go:53:76: undefined: None

    /tmp/tmpk4i5lfw8_test.go:54:79: undefined: None

    /tmp/tmpk4i5lfw8_test.go:54:79: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ -1\n    min := 1\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    if min == -1 {\n        return []interface{}{None}\n    }\n  \
    \  if max == -1 {\n        return []interface{}{None}\n    }\n    if min > max\
    \ {\n        return []interface{}{None}\n    }\n    return []interface{}{min,\
    \ max}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zlbmvaw_test.go:31:30: undefined: None

    /tmp/tmp8zlbmvaw_test.go:34:30: undefined: None

    /tmp/tmp8zlbmvaw_test.go:37:30: undefined: None

    /tmp/tmp8zlbmvaw_test.go:49:76: undefined: None

    /tmp/tmp8zlbmvaw_test.go:50:79: undefined: None

    /tmp/tmp8zlbmvaw_test.go:54:60: undefined: None

    /tmp/tmp8zlbmvaw_test.go:55:61: undefined: None

    /tmp/tmp8zlbmvaw_test.go:56:78: undefined: None

    /tmp/tmp8zlbmvaw_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    result\
    \ := make([]interface{}, len(lst))\n    largest, smallest := 0, 0\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = v\n        } else\
    \ {\n            largest = v\n        }\n    }\n    if smallest == 0 {\n     \
    \   for _, v := range lst {\n            if v > 0 {\n                smallest\
    \ = v\n            }\n        }\n    }\n    if largest == 0 {\n        for _,\
    \ v := range lst {\n            if v < 0 {\n                largest = v\n    \
    \        }\n        }\n    }\n    if smallest > 0 {\n        result[0] = smallest\n\
    \    }\n    if largest < 0 {\n        result[1] = largest\n    }\n    return result\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjbkc4bg_test.go:59:76: undefined: None

    /tmp/tmphjbkc4bg_test.go:60:79: undefined: None

    /tmp/tmphjbkc4bg_test.go:64:60: undefined: None

    /tmp/tmphjbkc4bg_test.go:65:61: undefined: None

    /tmp/tmphjbkc4bg_test.go:66:78: undefined: None

    /tmp/tmphjbkc4bg_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl28rjfk0_test.go:44:76: undefined: None

    /tmp/tmpl28rjfk0_test.go:45:79: undefined: None

    /tmp/tmpl28rjfk0_test.go:49:60: undefined: None

    /tmp/tmpl28rjfk0_test.go:50:61: undefined: None

    /tmp/tmpl28rjfk0_test.go:51:78: undefined: None

    /tmp/tmpl28rjfk0_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ 0\n    min := 0\n    for _, v := range lst {\n        if v < 0 {\n         \
    \   max = v\n        } else {\n            min = v\n        }\n    }\n    if min\
    \ > max {\n        return nil\n    }\n    return []interface{}{max, min}\n}\n\n\
    func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8efaw5ps_test.go:42:76: undefined: None

    /tmp/tmp8efaw5ps_test.go:43:79: undefined: None

    /tmp/tmp8efaw5ps_test.go:47:60: undefined: None

    /tmp/tmp8efaw5ps_test.go:48:61: undefined: None

    /tmp/tmp8efaw5ps_test.go:49:78: undefined: None

    /tmp/tmp8efaw5ps_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{}\n    }\n    smallest := lst[0]\n    largest\
    \ := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n        \
    \    smallest = v\n        }\n        if v > largest {\n            largest =\
    \ v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ye25ifv_test.go:43:76: undefined: None

    /tmp/tmp_ye25ifv_test.go:44:79: undefined: None

    /tmp/tmp_ye25ifv_test.go:48:60: undefined: None

    /tmp/tmp_ye25ifv_test.go:49:61: undefined: None

    /tmp/tmp_ye25ifv_test.go:50:78: undefined: None

    /tmp/tmp_ye25ifv_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ne_mur_test.go:42:76: undefined: None

    /tmp/tmp07ne_mur_test.go:43:79: undefined: None

    /tmp/tmp07ne_mur_test.go:47:60: undefined: None

    /tmp/tmp07ne_mur_test.go:48:61: undefined: None

    /tmp/tmp07ne_mur_test.go:49:78: undefined: None

    /tmp/tmp07ne_mur_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      a = v\n        } else {\n            b = v\n        }\n    }\n    if a\
    \ == 0 {\n        return nil\n    }\n    if b == 0 {\n        return nil\n   \
    \ }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypjc2du4_test.go:45:76: undefined: None

    /tmp/tmpypjc2du4_test.go:46:79: undefined: None

    /tmp/tmpypjc2du4_test.go:50:60: undefined: None

    /tmp/tmpypjc2du4_test.go:51:61: undefined: None

    /tmp/tmpypjc2du4_test.go:52:78: undefined: None

    /tmp/tmpypjc2du4_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := None\n    smallestInt := None\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if smallestInt == None {\n                smallestInt = v\n\
    \            } else {\n                largestInt = v\n            }\n       \
    \ } else {\n            if largestInt == None {\n                largestInt =\
    \ v\n            } else {\n                if v > smallestInt {\n            \
    \        smallestInt = v\n                }\n            }\n        }\n    }\n\
    \    if smallestInt == None {\n        return nil\n    }\n    if largestInt ==\
    \ None {\n        return smallestInt\n    }\n    return []interface{}{largestInt,\
    \ smallestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjnef0or_test.go:20:19: undefined: None

    /tmp/tmpzjnef0or_test.go:21:20: undefined: None

    /tmp/tmpzjnef0or_test.go:24:31: undefined: None

    /tmp/tmpzjnef0or_test.go:30:30: undefined: None

    /tmp/tmpzjnef0or_test.go:39:23: undefined: None

    /tmp/tmpzjnef0or_test.go:42:22: undefined: None

    /tmp/tmpzjnef0or_test.go:55:76: undefined: None

    /tmp/tmpzjnef0or_test.go:56:79: undefined: None

    /tmp/tmpzjnef0or_test.go:60:60: undefined: None

    /tmp/tmpzjnef0or_test.go:61:61: undefined: None

    /tmp/tmpzjnef0or_test.go:61:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xwzkra_test.go:41:76: undefined: None

    /tmp/tmp93xwzkra_test.go:42:79: undefined: None

    /tmp/tmp93xwzkra_test.go:46:60: undefined: None

    /tmp/tmp93xwzkra_test.go:47:61: undefined: None

    /tmp/tmp93xwzkra_test.go:48:78: undefined: None

    /tmp/tmp93xwzkra_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8cg5cnw_test.go:23:23: undefined: maxInt

    /tmp/tmpd8cg5cnw_test.go:25:24: undefined: minInt

    /tmp/tmpd8cg5cnw_test.go:41:76: undefined: None

    /tmp/tmpd8cg5cnw_test.go:42:79: undefined: None

    /tmp/tmpd8cg5cnw_test.go:46:60: undefined: None

    /tmp/tmpd8cg5cnw_test.go:47:61: undefined: None

    /tmp/tmpd8cg5cnw_test.go:48:78: undefined: None

    /tmp/tmpd8cg5cnw_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest negative int\n        } else {\n      \
    \      smallest = v // smallest is smallest positive int\n        }\n    }\n \
    \   if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5uarrclt_test.go:41:76: undefined: None

    /tmp/tmp5uarrclt_test.go:42:79: undefined: None

    /tmp/tmp5uarrclt_test.go:46:60: undefined: None

    /tmp/tmp5uarrclt_test.go:47:61: undefined: None

    /tmp/tmp5uarrclt_test.go:48:78: undefined: None

    /tmp/tmp5uarrclt_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfjjk1cz_test.go:46:76: undefined: None

    /tmp/tmprfjjk1cz_test.go:47:79: undefined: None

    /tmp/tmprfjjk1cz_test.go:51:60: undefined: None

    /tmp/tmprfjjk1cz_test.go:52:61: undefined: None

    /tmp/tmprfjjk1cz_test.go:53:78: undefined: None

    /tmp/tmprfjjk1cz_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ 0\n    min := 0\n    for _, v := range lst {\n        if v > max {\n       \
    \     max = v\n        }\n        if v < min {\n            min = v\n        }\n\
    \    }\n    if max == 0 {\n        return []interface{}{None, None}\n    }\n \
    \   if min == 0 {\n        return []interface{}{None, max}\n    }\n    return\
    \ []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa16s75_z_test.go:31:30: undefined: None

    /tmp/tmpa16s75_z_test.go:34:30: undefined: None

    /tmp/tmpa16s75_z_test.go:46:76: undefined: None

    /tmp/tmpa16s75_z_test.go:47:79: undefined: None

    /tmp/tmpa16s75_z_test.go:51:60: undefined: None

    /tmp/tmpa16s75_z_test.go:52:61: undefined: None

    /tmp/tmpa16s75_z_test.go:53:78: undefined: None

    /tmp/tmpa16s75_z_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return append(largest_smallest_integers(smallest), smallest[len(smallest)-1]),\
    \ append(largest_smallest_integers(largest), largest[len(largest)-1])\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ri7d1ak_test.go:33:16:\
    \ cannot use smallest (variable of type []int) as type []interface{} in return\
    \ statement\n/tmp/tmp0ri7d1ak_test.go:35:84: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n/tmp/tmp0ri7d1ak_test.go:45:76: undefined:\
    \ None\n/tmp/tmp0ri7d1ak_test.go:46:79: undefined: None\n/tmp/tmp0ri7d1ak_test.go:50:60:\
    \ undefined: None\n/tmp/tmp0ri7d1ak_test.go:51:61: undefined: None\n/tmp/tmp0ri7d1ak_test.go:52:78:\
    \ undefined: None\n/tmp/tmp0ri7d1ak_test.go:53:81: undefined: None\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // set largest to largest negative value\n        } else {\n\
    \            smallest = v // set smallest to smallest positive value\n       \
    \ }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6u1dv3l_test.go:41:76: undefined: None

    /tmp/tmpj6u1dv3l_test.go:42:79: undefined: None

    /tmp/tmpj6u1dv3l_test.go:46:60: undefined: None

    /tmp/tmpj6u1dv3l_test.go:47:61: undefined: None

    /tmp/tmpj6u1dv3l_test.go:48:78: undefined: None

    /tmp/tmpj6u1dv3l_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsgslscm_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptsgslscm_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmptsgslscm_test.go:45:76: undefined: None

    /tmp/tmptsgslscm_test.go:46:79: undefined: None

    /tmp/tmptsgslscm_test.go:50:60: undefined: None

    /tmp/tmptsgslscm_test.go:51:61: undefined: None

    /tmp/tmptsgslscm_test.go:52:78: undefined: None

    /tmp/tmptsgslscm_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    result\
    \ := make([]interface{}, len(lst))\n    i := 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            result[i] = nil\n        } else {\n         \
    \   result[i] = v\n        }\n        i++\n    }\n    return result\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrw4hark_test.go:40:76: undefined: None

    /tmp/tmpdrw4hark_test.go:41:79: undefined: None

    /tmp/tmpdrw4hark_test.go:45:60: undefined: None

    /tmp/tmpdrw4hark_test.go:46:61: undefined: None

    /tmp/tmpdrw4hark_test.go:47:78: undefined: None

    /tmp/tmpdrw4hark_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrgtc23a_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpwrgtc23a_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpwrgtc23a_test.go:58:76: undefined: None

    /tmp/tmpwrgtc23a_test.go:59:79: undefined: None

    /tmp/tmpwrgtc23a_test.go:63:60: undefined: None

    /tmp/tmpwrgtc23a_test.go:64:61: undefined: None

    /tmp/tmpwrgtc23a_test.go:65:78: undefined: None

    /tmp/tmpwrgtc23a_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ne_mur_test.go:42:76: undefined: None

    /tmp/tmp07ne_mur_test.go:43:79: undefined: None

    /tmp/tmp07ne_mur_test.go:47:60: undefined: None

    /tmp/tmp07ne_mur_test.go:48:61: undefined: None

    /tmp/tmp07ne_mur_test.go:49:78: undefined: None

    /tmp/tmp07ne_mur_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ne_mur_test.go:42:76: undefined: None

    /tmp/tmp07ne_mur_test.go:43:79: undefined: None

    /tmp/tmp07ne_mur_test.go:47:60: undefined: None

    /tmp/tmp07ne_mur_test.go:48:61: undefined: None

    /tmp/tmp07ne_mur_test.go:49:78: undefined: None

    /tmp/tmp07ne_mur_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    largest, smallest\
    \ := lst[0], lst[0]\n    for _, v := range lst {\n        if v > largest {\n \
    \           largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_hrsgag_test.go:21:30: undefined: None

    /tmp/tmpj_hrsgag_test.go:42:76: undefined: None

    /tmp/tmpj_hrsgag_test.go:43:79: undefined: None

    /tmp/tmpj_hrsgag_test.go:47:60: undefined: None

    /tmp/tmpj_hrsgag_test.go:48:61: undefined: None

    /tmp/tmpj_hrsgag_test.go:49:78: undefined: None

    /tmp/tmpj_hrsgag_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      a = v\n        } else {\n            b = v\n        }\n    }\n    if a\
    \ > b {\n        return nil\n    }\n    return []interface{}{a, b}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91iox0po_test.go:42:76: undefined: None

    /tmp/tmp91iox0po_test.go:43:79: undefined: None

    /tmp/tmp91iox0po_test.go:47:60: undefined: None

    /tmp/tmp91iox0po_test.go:48:61: undefined: None

    /tmp/tmp91iox0po_test.go:49:78: undefined: None

    /tmp/tmp91iox0po_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return append(largest_smallest_integers(smallest), smallest[len(smallest)-1]),\
    \ append(largest_smallest_integers(largest), largest[len(largest)-1])\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ri7d1ak_test.go:33:16:\
    \ cannot use smallest (variable of type []int) as type []interface{} in return\
    \ statement\n/tmp/tmp0ri7d1ak_test.go:35:84: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n/tmp/tmp0ri7d1ak_test.go:45:76: undefined:\
    \ None\n/tmp/tmp0ri7d1ak_test.go:46:79: undefined: None\n/tmp/tmp0ri7d1ak_test.go:50:60:\
    \ undefined: None\n/tmp/tmp0ri7d1ak_test.go:51:61: undefined: None\n/tmp/tmp0ri7d1ak_test.go:52:78:\
    \ undefined: None\n/tmp/tmp0ri7d1ak_test.go:53:81: undefined: None\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None && largest == None\
    \ {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rfn5n_p_test.go:20:17: undefined: None

    /tmp/tmp2rfn5n_p_test.go:21:16: undefined: None

    /tmp/tmp2rfn5n_p_test.go:30:20: undefined: None

    /tmp/tmp2rfn5n_p_test.go:43:76: undefined: None

    /tmp/tmp2rfn5n_p_test.go:44:79: undefined: None

    /tmp/tmp2rfn5n_p_test.go:48:60: undefined: None

    /tmp/tmp2rfn5n_p_test.go:49:61: undefined: None

    /tmp/tmp2rfn5n_p_test.go:50:78: undefined: None

    /tmp/tmp2rfn5n_p_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ || largest == nil {\n        return nil\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmnv4kg_z_test.go:42:76: undefined: None

    /tmp/tmpmnv4kg_z_test.go:43:79: undefined: None

    /tmp/tmpmnv4kg_z_test.go:47:60: undefined: None

    /tmp/tmpmnv4kg_z_test.go:48:61: undefined: None

    /tmp/tmpmnv4kg_z_test.go:49:78: undefined: None

    /tmp/tmpmnv4kg_z_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl28rjfk0_test.go:44:76: undefined: None

    /tmp/tmpl28rjfk0_test.go:45:79: undefined: None

    /tmp/tmpl28rjfk0_test.go:49:60: undefined: None

    /tmp/tmpl28rjfk0_test.go:50:61: undefined: None

    /tmp/tmpl28rjfk0_test.go:51:78: undefined: None

    /tmp/tmpl28rjfk0_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      if smallest == -1 {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == -1 {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == -1 {\n        return nil\n    }\n    if largest ==\
    \ -1 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxit0lep_test.go:58:76: undefined: None

    /tmp/tmpqxit0lep_test.go:59:79: undefined: None

    /tmp/tmpqxit0lep_test.go:63:60: undefined: None

    /tmp/tmpqxit0lep_test.go:64:61: undefined: None

    /tmp/tmpqxit0lep_test.go:65:78: undefined: None

    /tmp/tmpqxit0lep_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3suznij_test.go:44:76: undefined: None

    /tmp/tmpd3suznij_test.go:45:79: undefined: None

    /tmp/tmpd3suznij_test.go:49:60: undefined: None

    /tmp/tmpd3suznij_test.go:50:61: undefined: None

    /tmp/tmpd3suznij_test.go:51:78: undefined: None

    /tmp/tmpd3suznij_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphg02_rye_test.go:20:17: undefined: None

    /tmp/tmphg02_rye_test.go:21:16: undefined: None

    /tmp/tmphg02_rye_test.go:24:28: undefined: None

    /tmp/tmphg02_rye_test.go:31:27: undefined: None

    /tmp/tmphg02_rye_test.go:43:20: undefined: None

    /tmp/tmphg02_rye_test.go:46:19: undefined: None

    /tmp/tmphg02_rye_test.go:59:76: undefined: None

    /tmp/tmphg02_rye_test.go:60:79: undefined: None

    /tmp/tmphg02_rye_test.go:64:60: undefined: None

    /tmp/tmphg02_rye_test.go:65:61: undefined: None

    /tmp/tmphg02_rye_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ 0\n    min := 0\n    for _, v := range lst {\n        if v < 0 {\n         \
    \   max = v\n        } else {\n            min = v\n        }\n    }\n    if max\
    \ == min {\n        return nil\n    }\n    return []interface{}{max, min}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpijfquz4g_test.go:42:76: undefined: None

    /tmp/tmpijfquz4g_test.go:43:79: undefined: None

    /tmp/tmpijfquz4g_test.go:47:60: undefined: None

    /tmp/tmpijfquz4g_test.go:48:61: undefined: None

    /tmp/tmpijfquz4g_test.go:49:78: undefined: None

    /tmp/tmpijfquz4g_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ne_mur_test.go:42:76: undefined: None

    /tmp/tmp07ne_mur_test.go:43:79: undefined: None

    /tmp/tmp07ne_mur_test.go:47:60: undefined: None

    /tmp/tmp07ne_mur_test.go:48:61: undefined: None

    /tmp/tmp07ne_mur_test.go:49:78: undefined: None

    /tmp/tmp07ne_mur_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ 0\n    min := 0\n    for _, v := range lst {\n        if v > max {\n       \
    \     max = v\n        }\n        if v < min {\n            min = v\n        }\n\
    \    }\n    if min == 0 {\n        return []interface{}{None, None}\n    }\n \
    \   if max == 0 {\n        return []interface{}{None, min}\n    }\n    return\
    \ []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffwqsjy8_test.go:31:30: undefined: None

    /tmp/tmpffwqsjy8_test.go:34:30: undefined: None

    /tmp/tmpffwqsjy8_test.go:46:76: undefined: None

    /tmp/tmpffwqsjy8_test.go:47:79: undefined: None

    /tmp/tmpffwqsjy8_test.go:51:60: undefined: None

    /tmp/tmpffwqsjy8_test.go:52:61: undefined: None

    /tmp/tmpffwqsjy8_test.go:53:78: undefined: None

    /tmp/tmpffwqsjy8_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := None\n    smallestInt := None\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if smallestInt == None {\n                smallestInt = v\n\
    \            } else {\n                smallestInt = smallestInt * 10 + v\n  \
    \          }\n        } else {\n            if largestInt == None {\n        \
    \        largestInt = v\n            } else {\n                largestInt = largestInt\
    \ * 10 + v\n            }\n        }\n    }\n    if largestInt == None {\n   \
    \     return nil\n    }\n    if smallestInt == None {\n        return largestInt\n\
    \    }\n    return []interface{}{largestInt, smallestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9r9egg95_test.go:20:19: undefined: None

    /tmp/tmp9r9egg95_test.go:21:20: undefined: None

    /tmp/tmp9r9egg95_test.go:24:31: undefined: None

    /tmp/tmp9r9egg95_test.go:30:30: undefined: None

    /tmp/tmp9r9egg95_test.go:37:22: undefined: None

    /tmp/tmp9r9egg95_test.go:40:23: undefined: None

    /tmp/tmp9r9egg95_test.go:53:76: undefined: None

    /tmp/tmp9r9egg95_test.go:54:79: undefined: None

    /tmp/tmp9r9egg95_test.go:58:60: undefined: None

    /tmp/tmp9r9egg95_test.go:59:61: undefined: None

    /tmp/tmp9r9egg95_test.go:59:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = largest * -1\n        } else {\n            smallest = smallest\
    \ + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21bwjg2a_test.go:41:76: undefined: None

    /tmp/tmp21bwjg2a_test.go:42:79: undefined: None

    /tmp/tmp21bwjg2a_test.go:46:60: undefined: None

    /tmp/tmp21bwjg2a_test.go:47:61: undefined: None

    /tmp/tmp21bwjg2a_test.go:48:78: undefined: None

    /tmp/tmp21bwjg2a_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwh9klzym_test.go:41:76: undefined: None

    /tmp/tmpwh9klzym_test.go:42:79: undefined: None

    /tmp/tmpwh9klzym_test.go:46:60: undefined: None

    /tmp/tmpwh9klzym_test.go:47:61: undefined: None

    /tmp/tmpwh9klzym_test.go:48:78: undefined: None

    /tmp/tmpwh9klzym_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsgslscm_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptsgslscm_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmptsgslscm_test.go:45:76: undefined: None

    /tmp/tmptsgslscm_test.go:46:79: undefined: None

    /tmp/tmptsgslscm_test.go:50:60: undefined: None

    /tmp/tmptsgslscm_test.go:51:61: undefined: None

    /tmp/tmptsgslscm_test.go:52:78: undefined: None

    /tmp/tmptsgslscm_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphnrh3v_test.go:41:76: undefined: None

    /tmp/tmpyphnrh3v_test.go:42:79: undefined: None

    /tmp/tmpyphnrh3v_test.go:46:60: undefined: None

    /tmp/tmpyphnrh3v_test.go:47:61: undefined: None

    /tmp/tmpyphnrh3v_test.go:48:78: undefined: None

    /tmp/tmpyphnrh3v_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkbl66exn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:55:76: undefined: None

    /tmp/tmpkbl66exn_test.go:56:79: undefined: None

    /tmp/tmpkbl66exn_test.go:60:60: undefined: None

    /tmp/tmpkbl66exn_test.go:61:61: undefined: None

    /tmp/tmpkbl66exn_test.go:62:78: undefined: None

    /tmp/tmpkbl66exn_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3suznij_test.go:44:76: undefined: None

    /tmp/tmpd3suznij_test.go:45:79: undefined: None

    /tmp/tmpd3suznij_test.go:49:60: undefined: None

    /tmp/tmpd3suznij_test.go:50:61: undefined: None

    /tmp/tmpd3suznij_test.go:51:78: undefined: None

    /tmp/tmpd3suznij_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8cg5cnw_test.go:23:23: undefined: maxInt

    /tmp/tmpd8cg5cnw_test.go:25:24: undefined: minInt

    /tmp/tmpd8cg5cnw_test.go:41:76: undefined: None

    /tmp/tmpd8cg5cnw_test.go:42:79: undefined: None

    /tmp/tmpd8cg5cnw_test.go:46:60: undefined: None

    /tmp/tmpd8cg5cnw_test.go:47:61: undefined: None

    /tmp/tmpd8cg5cnw_test.go:48:78: undefined: None

    /tmp/tmpd8cg5cnw_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl28rjfk0_test.go:44:76: undefined: None

    /tmp/tmpl28rjfk0_test.go:45:79: undefined: None

    /tmp/tmpl28rjfk0_test.go:49:60: undefined: None

    /tmp/tmpl28rjfk0_test.go:50:61: undefined: None

    /tmp/tmpl28rjfk0_test.go:51:78: undefined: None

    /tmp/tmpl28rjfk0_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxs1py5v_test.go:45:76: undefined: None

    /tmp/tmpmxs1py5v_test.go:46:79: undefined: None

    /tmp/tmpmxs1py5v_test.go:50:60: undefined: None

    /tmp/tmpmxs1py5v_test.go:51:61: undefined: None

    /tmp/tmpmxs1py5v_test.go:52:78: undefined: None

    /tmp/tmpmxs1py5v_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia45y4w8_test.go:44:76: undefined: None

    /tmp/tmpia45y4w8_test.go:45:79: undefined: None

    /tmp/tmpia45y4w8_test.go:49:60: undefined: None

    /tmp/tmpia45y4w8_test.go:50:61: undefined: None

    /tmp/tmpia45y4w8_test.go:51:78: undefined: None

    /tmp/tmpia45y4w8_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2gb_bs2_test.go:45:76: undefined: None

    /tmp/tmpf2gb_bs2_test.go:46:79: undefined: None

    /tmp/tmpf2gb_bs2_test.go:50:60: undefined: None

    /tmp/tmpf2gb_bs2_test.go:51:61: undefined: None

    /tmp/tmpf2gb_bs2_test.go:52:78: undefined: None

    /tmp/tmpf2gb_bs2_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia45y4w8_test.go:44:76: undefined: None

    /tmp/tmpia45y4w8_test.go:45:79: undefined: None

    /tmp/tmpia45y4w8_test.go:49:60: undefined: None

    /tmp/tmpia45y4w8_test.go:50:61: undefined: None

    /tmp/tmpia45y4w8_test.go:51:78: undefined: None

    /tmp/tmpia45y4w8_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_s_lpd1_test.go:41:76: undefined: None

    /tmp/tmpw_s_lpd1_test.go:42:79: undefined: None

    /tmp/tmpw_s_lpd1_test.go:46:60: undefined: None

    /tmp/tmpw_s_lpd1_test.go:47:61: undefined: None

    /tmp/tmpw_s_lpd1_test.go:48:78: undefined: None

    /tmp/tmpw_s_lpd1_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = largest * -1\n        } else {\n            smallest = smallest\
    \ + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if smallest > largest {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3r9tl1sz_test.go:44:76: undefined: None

    /tmp/tmp3r9tl1sz_test.go:45:79: undefined: None

    /tmp/tmp3r9tl1sz_test.go:49:60: undefined: None

    /tmp/tmp3r9tl1sz_test.go:50:61: undefined: None

    /tmp/tmp3r9tl1sz_test.go:51:78: undefined: None

    /tmp/tmp3r9tl1sz_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xi97b6t_test.go:20:17: undefined: None

    /tmp/tmp1xi97b6t_test.go:21:16: undefined: None

    /tmp/tmp1xi97b6t_test.go:30:20: undefined: None

    /tmp/tmp1xi97b6t_test.go:33:19: undefined: None

    /tmp/tmp1xi97b6t_test.go:46:76: undefined: None

    /tmp/tmp1xi97b6t_test.go:47:79: undefined: None

    /tmp/tmp1xi97b6t_test.go:51:60: undefined: None

    /tmp/tmp1xi97b6t_test.go:52:61: undefined: None

    /tmp/tmp1xi97b6t_test.go:53:78: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: undefined: None

    /tmp/tmp1xi97b6t_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest\n        } else {\n           \
    \ smallest = v // smallest is now the smallest\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoiet8j1s_test.go:41:76: undefined: None

    /tmp/tmpoiet8j1s_test.go:42:79: undefined: None

    /tmp/tmpoiet8j1s_test.go:46:60: undefined: None

    /tmp/tmpoiet8j1s_test.go:47:61: undefined: None

    /tmp/tmpoiet8j1s_test.go:48:78: undefined: None

    /tmp/tmpoiet8j1s_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphnrh3v_test.go:41:76: undefined: None

    /tmp/tmpyphnrh3v_test.go:42:79: undefined: None

    /tmp/tmpyphnrh3v_test.go:46:60: undefined: None

    /tmp/tmpyphnrh3v_test.go:47:61: undefined: None

    /tmp/tmpyphnrh3v_test.go:48:78: undefined: None

    /tmp/tmpyphnrh3v_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    var found bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            a = v\n            found = true\n            break\n\
    \        }\n        if v > 0 {\n            b = v\n            found = true\n\
    \            break\n        }\n    }\n    if !found {\n        return []interface{}{a,\
    \ b}\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndv1mf48_test.go:48:76: undefined: None

    /tmp/tmpndv1mf48_test.go:49:79: undefined: None

    /tmp/tmpndv1mf48_test.go:53:60: undefined: None

    /tmp/tmpndv1mf48_test.go:54:61: undefined: None

    /tmp/tmpndv1mf48_test.go:55:78: undefined: None

    /tmp/tmpndv1mf48_test.go:56:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf8o50g3_test.go:42:76: undefined: None

    /tmp/tmpwf8o50g3_test.go:43:79: undefined: None

    /tmp/tmpwf8o50g3_test.go:47:60: undefined: None

    /tmp/tmpwf8o50g3_test.go:48:61: undefined: None

    /tmp/tmpwf8o50g3_test.go:49:78: undefined: None

    /tmp/tmpwf8o50g3_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphnrh3v_test.go:41:76: undefined: None

    /tmp/tmpyphnrh3v_test.go:42:79: undefined: None

    /tmp/tmpyphnrh3v_test.go:46:60: undefined: None

    /tmp/tmpyphnrh3v_test.go:47:61: undefined: None

    /tmp/tmpyphnrh3v_test.go:48:78: undefined: None

    /tmp/tmpyphnrh3v_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    max :=\
    \ 0\n    min := 0\n    for _, v := range lst {\n        if v < 0 {\n         \
    \   min = v\n        } else {\n            max = v\n        }\n    }\n    if min\
    \ == 0 {\n        return []interface{}{None, min}\n    }\n    if max == 0 {\n\
    \        return []interface{}{None, max}\n    }\n    return []interface{}{max,\
    \ min}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtroshk0_test.go:30:30: undefined: None

    /tmp/tmpdtroshk0_test.go:33:30: undefined: None

    /tmp/tmpdtroshk0_test.go:45:76: undefined: None

    /tmp/tmpdtroshk0_test.go:46:79: undefined: None

    /tmp/tmpdtroshk0_test.go:50:60: undefined: None

    /tmp/tmpdtroshk0_test.go:51:61: undefined: None

    /tmp/tmpdtroshk0_test.go:52:78: undefined: None

    /tmp/tmpdtroshk0_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest of negative numbers\n        } else {\n\
    \            smallest = v // smallest is smallest of positive numbers\n      \
    \  }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpov_p9zt3_test.go:41:76: undefined: None

    /tmp/tmpov_p9zt3_test.go:42:79: undefined: None

    /tmp/tmpov_p9zt3_test.go:46:60: undefined: None

    /tmp/tmpov_p9zt3_test.go:47:61: undefined: None

    /tmp/tmpov_p9zt3_test.go:48:78: undefined: None

    /tmp/tmpov_p9zt3_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84tm4vuc_test.go:20:17: undefined: None

    /tmp/tmp84tm4vuc_test.go:21:16: undefined: None

    /tmp/tmp84tm4vuc_test.go:30:20: undefined: None

    /tmp/tmp84tm4vuc_test.go:33:19: undefined: None

    /tmp/tmp84tm4vuc_test.go:46:76: undefined: None

    /tmp/tmp84tm4vuc_test.go:47:79: undefined: None

    /tmp/tmp84tm4vuc_test.go:51:60: undefined: None

    /tmp/tmp84tm4vuc_test.go:52:61: undefined: None

    /tmp/tmp84tm4vuc_test.go:53:78: undefined: None

    /tmp/tmp84tm4vuc_test.go:54:81: undefined: None

    /tmp/tmp84tm4vuc_test.go:54:81: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      a = v\n        } else {\n            b = v\n        }\n    }\n    if a\
    \ > b {\n        return nil\n    }\n    return []interface{}{a, b}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91iox0po_test.go:42:76: undefined: None

    /tmp/tmp91iox0po_test.go:43:79: undefined: None

    /tmp/tmp91iox0po_test.go:47:60: undefined: None

    /tmp/tmp91iox0po_test.go:48:61: undefined: None

    /tmp/tmp91iox0po_test.go:49:78: undefined: None

    /tmp/tmp91iox0po_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        smallest\
    \ = None\n    }\n    if largest == None {\n        largest = None\n    }\n   \
    \ return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb5y8xpx7_test.go:20:17: undefined: None

    /tmp/tmpb5y8xpx7_test.go:21:16: undefined: None

    /tmp/tmpb5y8xpx7_test.go:30:20: undefined: None

    /tmp/tmpb5y8xpx7_test.go:31:20: undefined: None

    /tmp/tmpb5y8xpx7_test.go:33:19: undefined: None

    /tmp/tmpb5y8xpx7_test.go:34:19: undefined: None

    /tmp/tmpb5y8xpx7_test.go:46:76: undefined: None

    /tmp/tmpb5y8xpx7_test.go:47:79: undefined: None

    /tmp/tmpb5y8xpx7_test.go:51:60: undefined: None

    /tmp/tmpb5y8xpx7_test.go:52:61: undefined: None

    /tmp/tmpb5y8xpx7_test.go:52:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkbl66exn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:55:76: undefined: None

    /tmp/tmpkbl66exn_test.go:56:79: undefined: None

    /tmp/tmpkbl66exn_test.go:60:60: undefined: None

    /tmp/tmpkbl66exn_test.go:61:61: undefined: None

    /tmp/tmpkbl66exn_test.go:62:78: undefined: None

    /tmp/tmpkbl66exn_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xwzkra_test.go:41:76: undefined: None

    /tmp/tmp93xwzkra_test.go:42:79: undefined: None

    /tmp/tmp93xwzkra_test.go:46:60: undefined: None

    /tmp/tmp93xwzkra_test.go:47:61: undefined: None

    /tmp/tmp93xwzkra_test.go:48:78: undefined: None

    /tmp/tmp93xwzkra_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    max := lst[0]\n\
    \    min := lst[0]\n    for _, v := range lst {\n        if v > max {\n      \
    \      max = v\n        }\n        if v < min {\n            min = v\n       \
    \ }\n    }\n    return []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf75bkt13_test.go:21:30: undefined: None

    /tmp/tmpf75bkt13_test.go:43:76: undefined: None

    /tmp/tmpf75bkt13_test.go:44:79: undefined: None

    /tmp/tmpf75bkt13_test.go:48:60: undefined: None

    /tmp/tmpf75bkt13_test.go:49:61: undefined: None

    /tmp/tmpf75bkt13_test.go:50:78: undefined: None

    /tmp/tmpf75bkt13_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt8hi7pxe_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpt8hi7pxe_test.go:45:76: undefined: None

    /tmp/tmpt8hi7pxe_test.go:46:79: undefined: None

    /tmp/tmpt8hi7pxe_test.go:50:60: undefined: None

    /tmp/tmpt8hi7pxe_test.go:51:61: undefined: None

    /tmp/tmpt8hi7pxe_test.go:52:78: undefined: None

    /tmp/tmpt8hi7pxe_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xwzkra_test.go:41:76: undefined: None

    /tmp/tmp93xwzkra_test.go:42:79: undefined: None

    /tmp/tmp93xwzkra_test.go:46:60: undefined: None

    /tmp/tmp93xwzkra_test.go:47:61: undefined: None

    /tmp/tmp93xwzkra_test.go:48:78: undefined: None

    /tmp/tmp93xwzkra_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkbl66exn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpkbl66exn_test.go:55:76: undefined: None

    /tmp/tmpkbl66exn_test.go:56:79: undefined: None

    /tmp/tmpkbl66exn_test.go:60:60: undefined: None

    /tmp/tmpkbl66exn_test.go:61:61: undefined: None

    /tmp/tmpkbl66exn_test.go:62:78: undefined: None

    /tmp/tmpkbl66exn_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := None\n    smallestInt := None\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if smallestInt == None {\n                smallestInt = v\n\
    \            } else {\n                smallestInt = smallestInt * 10 + v\n  \
    \          }\n        } else {\n            if largestInt == None {\n        \
    \        largestInt = v\n            } else {\n                largestInt = largestInt\
    \ * 10 + v\n            }\n        }\n    }\n    if smallestInt == None {\n  \
    \      return nil\n    }\n    if largestInt == None {\n        return smallestInt\n\
    \    }\n    return []interface{}{smallestInt, largestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlsb3if8_test.go:20:19: undefined: None

    /tmp/tmpxlsb3if8_test.go:21:20: undefined: None

    /tmp/tmpxlsb3if8_test.go:24:31: undefined: None

    /tmp/tmpxlsb3if8_test.go:30:30: undefined: None

    /tmp/tmpxlsb3if8_test.go:37:23: undefined: None

    /tmp/tmpxlsb3if8_test.go:40:22: undefined: None

    /tmp/tmpxlsb3if8_test.go:53:76: undefined: None

    /tmp/tmpxlsb3if8_test.go:54:79: undefined: None

    /tmp/tmpxlsb3if8_test.go:58:60: undefined: None

    /tmp/tmpxlsb3if8_test.go:59:61: undefined: None

    /tmp/tmpxlsb3if8_test.go:59:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      if smallest == -1 {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == -1 {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == -1 {\n        return nil\n    }\n    if largest ==\
    \ -1 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxit0lep_test.go:58:76: undefined: None

    /tmp/tmpqxit0lep_test.go:59:79: undefined: None

    /tmp/tmpqxit0lep_test.go:63:60: undefined: None

    /tmp/tmpqxit0lep_test.go:64:61: undefined: None

    /tmp/tmpqxit0lep_test.go:65:78: undefined: None

    /tmp/tmpqxit0lep_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest of negative numbers\n        } else {\n\
    \            smallest = v // smallest is smallest of positive numbers\n      \
    \  }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpov_p9zt3_test.go:41:76: undefined: None

    /tmp/tmpov_p9zt3_test.go:42:79: undefined: None

    /tmp/tmpov_p9zt3_test.go:46:60: undefined: None

    /tmp/tmpov_p9zt3_test.go:47:61: undefined: None

    /tmp/tmpov_p9zt3_test.go:48:78: undefined: None

    /tmp/tmpov_p9zt3_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = v\n            }\n        } else {\n\
    \            if largest == None {\n                largest = v\n            }\
    \ else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ None {\n        return nil\n    }\n    if largest == None {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpufm8r1bm_test.go:20:17: undefined: None

    /tmp/tmpufm8r1bm_test.go:21:16: undefined: None

    /tmp/tmpufm8r1bm_test.go:24:28: undefined: None

    /tmp/tmpufm8r1bm_test.go:30:27: undefined: None

    /tmp/tmpufm8r1bm_test.go:42:20: undefined: None

    /tmp/tmpufm8r1bm_test.go:45:19: undefined: None

    /tmp/tmpufm8r1bm_test.go:58:76: undefined: None

    /tmp/tmpufm8r1bm_test.go:59:79: undefined: None

    /tmp/tmpufm8r1bm_test.go:63:60: undefined: None

    /tmp/tmpufm8r1bm_test.go:64:61: undefined: None

    /tmp/tmpufm8r1bm_test.go:64:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      a = v\n        } else {\n            b = v\n        }\n    }\n    if a\
    \ == 0 {\n        return nil\n    }\n    if b == 0 {\n        return nil\n   \
    \ }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypjc2du4_test.go:45:76: undefined: None

    /tmp/tmpypjc2du4_test.go:46:79: undefined: None

    /tmp/tmpypjc2du4_test.go:50:60: undefined: None

    /tmp/tmpypjc2du4_test.go:51:61: undefined: None

    /tmp/tmpypjc2du4_test.go:52:78: undefined: None

    /tmp/tmpypjc2du4_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhvpq2v6_test.go:21:30: undefined: None

    /tmp/tmplhvpq2v6_test.go:43:76: undefined: None

    /tmp/tmplhvpq2v6_test.go:44:79: undefined: None

    /tmp/tmplhvpq2v6_test.go:48:60: undefined: None

    /tmp/tmplhvpq2v6_test.go:49:61: undefined: None

    /tmp/tmplhvpq2v6_test.go:50:78: undefined: None

    /tmp/tmplhvpq2v6_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ interface{}\n    var b interface{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            a = v\n        } else {\n            b = v\n        }\n\
    \    }\n    if a == nil {\n        return nil\n    }\n    if b == nil {\n    \
    \    return nil\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n6qcect_test.go:45:76: undefined: None

    /tmp/tmp3n6qcect_test.go:46:79: undefined: None

    /tmp/tmp3n6qcect_test.go:50:60: undefined: None

    /tmp/tmp3n6qcect_test.go:51:61: undefined: None

    /tmp/tmp3n6qcect_test.go:52:78: undefined: None

    /tmp/tmp3n6qcect_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwh9klzym_test.go:41:76: undefined: None

    /tmp/tmpwh9klzym_test.go:42:79: undefined: None

    /tmp/tmpwh9klzym_test.go:46:60: undefined: None

    /tmp/tmpwh9klzym_test.go:47:61: undefined: None

    /tmp/tmpwh9klzym_test.go:48:78: undefined: None

    /tmp/tmpwh9klzym_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbg50ew9t_test.go:20:17: undefined: None

    /tmp/tmpbg50ew9t_test.go:21:16: undefined: None

    /tmp/tmpbg50ew9t_test.go:24:28: undefined: None

    /tmp/tmpbg50ew9t_test.go:31:27: undefined: None

    /tmp/tmpbg50ew9t_test.go:43:20: undefined: None

    /tmp/tmpbg50ew9t_test.go:46:19: undefined: None

    /tmp/tmpbg50ew9t_test.go:59:76: undefined: None

    /tmp/tmpbg50ew9t_test.go:60:79: undefined: None

    /tmp/tmpbg50ew9t_test.go:64:60: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: undefined: None

    /tmp/tmpbg50ew9t_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := 0\n    largest := 0\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8a6sdxs_test.go:46:76: undefined: None

    /tmp/tmpj8a6sdxs_test.go:47:79: undefined: None

    /tmp/tmpj8a6sdxs_test.go:51:60: undefined: None

    /tmp/tmpj8a6sdxs_test.go:52:61: undefined: None

    /tmp/tmpj8a6sdxs_test.go:53:78: undefined: None

    /tmp/tmpj8a6sdxs_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tnaew95_test.go:41:76: undefined: None

    /tmp/tmp6tnaew95_test.go:42:79: undefined: None

    /tmp/tmp6tnaew95_test.go:46:60: undefined: None

    /tmp/tmp6tnaew95_test.go:47:61: undefined: None

    /tmp/tmp6tnaew95_test.go:48:78: undefined: None

    /tmp/tmp6tnaew95_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative number\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive number\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_s_lpd1_test.go:41:76: undefined: None

    /tmp/tmpw_s_lpd1_test.go:42:79: undefined: None

    /tmp/tmpw_s_lpd1_test.go:46:60: undefined: None

    /tmp/tmpw_s_lpd1_test.go:47:61: undefined: None

    /tmp/tmpw_s_lpd1_test.go:48:78: undefined: None

    /tmp/tmpw_s_lpd1_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyz2qgff_test.go:43:76: undefined: None

    /tmp/tmplyz2qgff_test.go:44:79: undefined: None

    /tmp/tmplyz2qgff_test.go:48:60: undefined: None

    /tmp/tmplyz2qgff_test.go:49:61: undefined: None

    /tmp/tmplyz2qgff_test.go:50:78: undefined: None

    /tmp/tmplyz2qgff_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    largest, smallest\
    \ := lst[0], lst[0]\n    for _, v := range lst {\n        if v > largest {\n \
    \           largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_hrsgag_test.go:21:30: undefined: None

    /tmp/tmpj_hrsgag_test.go:42:76: undefined: None

    /tmp/tmpj_hrsgag_test.go:43:79: undefined: None

    /tmp/tmpj_hrsgag_test.go:47:60: undefined: None

    /tmp/tmpj_hrsgag_test.go:48:61: undefined: None

    /tmp/tmpj_hrsgag_test.go:49:78: undefined: None

    /tmp/tmpj_hrsgag_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    result\
    \ := make([]interface{}, len(lst))\n    for i := range lst {\n        if lst[i]\
    \ < 0 {\n            result[i] = nil\n        } else {\n            result[i]\
    \ = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmby_0_p_test.go:38:76: undefined: None

    /tmp/tmpqmby_0_p_test.go:39:79: undefined: None

    /tmp/tmpqmby_0_p_test.go:43:60: undefined: None

    /tmp/tmpqmby_0_p_test.go:44:61: undefined: None

    /tmp/tmpqmby_0_p_test.go:45:78: undefined: None

    /tmp/tmpqmby_0_p_test.go:46:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ interface{}\n    var b interface{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            a = v\n        } else {\n            b = v\n        }\n\
    \    }\n    if a == nil {\n        return nil\n    }\n    if b == nil {\n    \
    \    return nil\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n6qcect_test.go:45:76: undefined: None

    /tmp/tmp3n6qcect_test.go:46:79: undefined: None

    /tmp/tmp3n6qcect_test.go:50:60: undefined: None

    /tmp/tmp3n6qcect_test.go:51:61: undefined: None

    /tmp/tmp3n6qcect_test.go:52:78: undefined: None

    /tmp/tmp3n6qcect_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4mts3ma_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:35:12: cannot use append(smallest, largest...) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpv4mts3ma_test.go:45:76: undefined: None

    /tmp/tmpv4mts3ma_test.go:46:79: undefined: None

    /tmp/tmpv4mts3ma_test.go:50:60: undefined: None

    /tmp/tmpv4mts3ma_test.go:51:61: undefined: None

    /tmp/tmpv4mts3ma_test.go:52:78: undefined: None

    /tmp/tmpv4mts3ma_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == None {\n                smallest = v\n       \
    \     } else {\n                largest = smallest\n                smallest =\
    \ v\n            }\n        } else {\n            if largest == None {\n     \
    \           largest = v\n            } else {\n                if v > largest\
    \ {\n                    largest = v\n                }\n                if v\
    \ < smallest {\n                    smallest = v\n                }\n        \
    \    }\n        }\n    }\n    if smallest == None {\n        smallest = largest\n\
    \    }\n    if largest == None {\n        largest = smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_omfwmo6_test.go:20:17: undefined: None

    /tmp/tmp_omfwmo6_test.go:21:16: undefined: None

    /tmp/tmp_omfwmo6_test.go:24:28: undefined: None

    /tmp/tmp_omfwmo6_test.go:31:27: undefined: None

    /tmp/tmp_omfwmo6_test.go:43:20: undefined: None

    /tmp/tmp_omfwmo6_test.go:46:19: undefined: None

    /tmp/tmp_omfwmo6_test.go:59:76: undefined: None

    /tmp/tmp_omfwmo6_test.go:60:79: undefined: None

    /tmp/tmp_omfwmo6_test.go:64:60: undefined: None

    /tmp/tmp_omfwmo6_test.go:65:61: undefined: None

    /tmp/tmp_omfwmo6_test.go:65:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyojhh45_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmplyojhh45_test.go:35:56: cannot use largest (variable of type []int) as
    type []interface{} in argument to append

    /tmp/tmplyojhh45_test.go:45:76: undefined: None

    /tmp/tmplyojhh45_test.go:46:79: undefined: None

    /tmp/tmplyojhh45_test.go:50:60: undefined: None

    /tmp/tmplyojhh45_test.go:51:61: undefined: None

    /tmp/tmplyojhh45_test.go:52:78: undefined: None

    /tmp/tmplyojhh45_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmoc45aw_test.go:33:16: cannot use smallest (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmptmoc45aw_test.go:45:76: undefined: None

    /tmp/tmptmoc45aw_test.go:46:79: undefined: None

    /tmp/tmptmoc45aw_test.go:50:60: undefined: None

    /tmp/tmptmoc45aw_test.go:51:61: undefined: None

    /tmp/tmptmoc45aw_test.go:52:78: undefined: None

    /tmp/tmptmoc45aw_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    max := lst[0]\n    min := lst[0]\n  \
    \  for _, v := range lst {\n        if v > max {\n            max = v\n      \
    \  }\n        if v < min {\n            min = v\n        }\n    }\n    return\
    \ []interface{}{max, min}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlyzkpxq_test.go:43:76: undefined: None

    /tmp/tmpvlyzkpxq_test.go:44:79: undefined: None

    /tmp/tmpvlyzkpxq_test.go:48:60: undefined: None

    /tmp/tmpvlyzkpxq_test.go:49:61: undefined: None

    /tmp/tmpvlyzkpxq_test.go:50:78: undefined: None

    /tmp/tmpvlyzkpxq_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xwzkra_test.go:41:76: undefined: None

    /tmp/tmp93xwzkra_test.go:42:79: undefined: None

    /tmp/tmp93xwzkra_test.go:46:60: undefined: None

    /tmp/tmp93xwzkra_test.go:47:61: undefined: None

    /tmp/tmp93xwzkra_test.go:48:78: undefined: None

    /tmp/tmp93xwzkra_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8cg5cnw_test.go:23:23: undefined: maxInt

    /tmp/tmpd8cg5cnw_test.go:25:24: undefined: minInt

    /tmp/tmpd8cg5cnw_test.go:41:76: undefined: None

    /tmp/tmpd8cg5cnw_test.go:42:79: undefined: None

    /tmp/tmpd8cg5cnw_test.go:46:60: undefined: None

    /tmp/tmpd8cg5cnw_test.go:47:61: undefined: None

    /tmp/tmpd8cg5cnw_test.go:48:78: undefined: None

    /tmp/tmpd8cg5cnw_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a\
    \ int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      a = v\n        } else {\n            b = v\n        }\n    }\n    if a\
    \ == 0 {\n        return nil\n    }\n    if b == 0 {\n        return nil\n   \
    \ }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypjc2du4_test.go:45:76: undefined: None

    /tmp/tmpypjc2du4_test.go:46:79: undefined: None

    /tmp/tmpypjc2du4_test.go:50:60: undefined: None

    /tmp/tmpypjc2du4_test.go:51:61: undefined: None

    /tmp/tmpypjc2du4_test.go:52:78: undefined: None

    /tmp/tmpypjc2du4_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, i := range lst {\n        if i < smallest {\n            smallest\
    \ = i\n        }\n        if i > largest {\n            largest = i\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplct4p6wg_test.go:43:76: undefined: None

    /tmp/tmplct4p6wg_test.go:44:79: undefined: None

    /tmp/tmplct4p6wg_test.go:48:60: undefined: None

    /tmp/tmplct4p6wg_test.go:49:61: undefined: None

    /tmp/tmplct4p6wg_test.go:50:78: undefined: None

    /tmp/tmplct4p6wg_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqttb3yc_test.go:45:76: undefined: None

    /tmp/tmplqttb3yc_test.go:46:79: undefined: None

    /tmp/tmplqttb3yc_test.go:50:60: undefined: None

    /tmp/tmplqttb3yc_test.go:51:61: undefined: None

    /tmp/tmplqttb3yc_test.go:52:78: undefined: None

    /tmp/tmplqttb3yc_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers([]int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgd3evxiy_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgd3evxiy_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgd3evxiy_test.go:58:76: undefined: None

    /tmp/tmpgd3evxiy_test.go:59:79: undefined: None

    /tmp/tmpgd3evxiy_test.go:63:60: undefined: None

    /tmp/tmpgd3evxiy_test.go:64:61: undefined: None

    /tmp/tmpgd3evxiy_test.go:65:78: undefined: None

    /tmp/tmpgd3evxiy_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074740
