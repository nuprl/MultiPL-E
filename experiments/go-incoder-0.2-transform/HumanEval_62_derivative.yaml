name: HumanEval_62_derivative
language: go_test.go
prompt: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2\
  \ + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3,\
  \ 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2,\
  \ 6}\nfunc derivative(xs []int) []int {\n"
tests: "func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4,\
  \ 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n\
  \     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
  \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
  \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    n := len(xs)\n    d := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        d[i] = xs[i]\n    }\n    for i := n - 1; i >= 0; i-- {\n        d[i]\
    \ = d[i+1] * xs[i+1]\n    }\n    return d\n}\n", "    n := len(xs)\n    d := make([]int,\
    \ n)\n    d[0] = xs[0]\n    for i := 0; i < n; i++ {\n        d[i+1] = xs[i+1]\
    \ * d[i]\n    }\n    return d\n}\n", "    if len(xs) < 2 {\n        return nil\n\
    \    }\n    d := make([]int, len(xs)-1)\n    d[0] = xs[1]\n    for i := 2; i <\
    \ len(xs); i++ {\n        d[i] = xs[i-1] * d[i-2]\n    }\n    return d\n}\n",
  "    var ds []int\n    for i := 0; i < len(xs); i++ {\n        ds = append(ds, xs[i+1]-xs[i])\n\
    \    }\n    return ds\n}\n", "    if len(xs) < 2 {\n        return nil\n    }\n\
    \    d := make([]int, len(xs))\n    d[0] = xs[1]\n    for i := 2; i < len(xs);\
    \ i++ {\n        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n", "    n := len(xs)\n\
    \    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i]\n\
    \    }\n    for i := n - 1; i >= 0; i-- {\n        d[i] *= xs[i+1]\n    }\n  \
    \  return d\n}\n", "    n := len(xs)\n    d := make([]int, n+1)\n    d[n] = 1\n\
    \    for i := 0; i < n; i++ {\n        d[i+1] = xs[i] * d[i]\n    }\n    return\
    \ d\n}\n", "    result := make([]int, len(xs))\n    for i := range xs {\n    \
    \    result[i] = xs[i+1] - xs[i]\n    }\n    return result\n}\n", "    n := len(xs)\n\
    \    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n   \
    \     d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n", "    n := len(xs)\n  \
    \  d := make([]int, n)\n    d[0] = xs[0]\n    for i := 0; i < n; i++ {\n     \
    \   d[i+1] = xs[i+1] * d[i]\n    }\n    return d\n}\n", "    n := len(xs)\n  \
    \  if n < 2 {\n        return []int{}\n    }\n    result := make([]int, n)\n \
    \   result[0] = xs[1]\n    for i := 2; i < n; i++ {\n        result[i] = result[i-1]\
    \ * xs[i]\n    }\n    return result\n}\n", "    n := len(xs)\n    d := make([]int,\
    \ n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] - xs[i-1]\n\
    \    }\n    return d\n}\n", "    n := len(xs)\n    d := make([]int, n)\n    d[0]\
    \ = xs[1]\n    for i := 2; i < n; i++ {\n        d[i] = d[i-1] * xs[i]\n    }\n\
    \    return d\n}\n", "    if len(xs) == 0 {\n        return []int{}\n    }\n \
    \   derivative := make([]int, len(xs))\n    derivative[0] = xs[1]\n    for i :=\
    \ 2; i < len(xs); i++ {\n        derivative[i] = xs[i] - derivative[i-1]\n   \
    \ }\n    return derivative\n}\n", "    n := len(xs)\n    d := make([]int, n)\n\
    \    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] * xs[i]\n\
    \    }\n    return d\n}\n", "    n := len(xs)\n    d := make([]int, n+1)\n   \
    \ d[n] = 1\n    for i := 0; i < n; i++ {\n        d[i+1] = xs[i] * d[i]\n    }\n\
    \    return d\n}\n", "    if len(xs) == 0 {\n        return nil\n    }\n    n\
    \ := len(xs) - 1\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        result[i] = xs[i+1] - xs[i]\n    }\n    return result\n}\n", "    if\
    \ len(xs) == 0 {\n        return nil\n    }\n    d := make([]int, len(xs))\n \
    \   d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] *\
    \ xs[i]\n    }\n    return d\n}\n", "    n := len(xs)\n    d := make([]int, n)\n\
    \    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] * xs[i]\n\
    \    }\n    return d\n}\n", "    if len(xs) == 0 {\n        return []int{}\n \
    \   }\n    x := xs[0]\n    y := xs[1]\n    z := xs[2]\n    d := []int{y, z, 1}\n\
    \    for i := 3; i < len(xs); i++ {\n        d := []int{d[0]*x, d[1]*x, d[2]*x\
    \ + d[i]}\n        x = d[2]\n        y = d[1]\n        z = d[0]\n    }\n    return\
    \ d\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
