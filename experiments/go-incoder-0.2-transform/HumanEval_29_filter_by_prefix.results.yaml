language: go_test.go
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr022q8bu_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr022q8bu_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr022q8bu_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr022q8bu_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr022q8bu_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3b8stgb_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9tthdwc_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0, len(strings))\n    for _, s := range strings {\n      \
    \  if strings.HasPrefix(s, prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg140swhd_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := make([]string, 0)\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n  \
    \  return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhufz_aa_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
