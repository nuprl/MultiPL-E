name: HumanEval_26_remove_duplicates
language: go_test.go
prompt: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
  \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\n"
tests: "func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
  \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n \
  \    { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for\
    \ _, number := range numbers {\n        if _, ok := seen[number]; ok {\n     \
    \       continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    var result []int\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var seen map[int]bool\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if seen[n] {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    var result []int\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, n := range numbers {\n        if seen[n]\
    \ {\n            continue\n        }\n        seen[n] = true\n        result =\
    \ append(result, n)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    var result []int\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    var result []int\n    var seen\
    \ map[int]bool\n    for _, n := range numbers {\n        if seen[n] {\n      \
    \      continue\n        }\n        seen[n] = true\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen\
    \ := make(map[int]bool)\n    for _, number := range numbers {\n        if seen[number]\
    \ {\n            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ n := range numbers {\n        if seen[n] {\n            continue\n        }\n\
    \        seen[n] = true\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if seen[n] {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if seen[n] {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if seen[n] {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    var result []int\n    var seen map[int]bool\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; !ok {\n            seen[number] = true\n            result\
    \ = append(result, number)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    var result []int\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    var result []int\n    seen := map[int]bool{}\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ _, ok := seen[number]; ok {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if _, ok := seen[number]; ok {\n        \
    \    continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    var result []int\n    seen :=\
    \ make(map[int]bool)\n    for _, number := range numbers {\n        if seen[number]\
    \ {\n            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if _, ok := seen[number]; ok {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ seen := make(map[int]bool)\n    for _, number := range numbers {\n        if\
    \ seen[number] {\n            continue\n        }\n        seen[number] = true\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
